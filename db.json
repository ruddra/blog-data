[
    {
        "author_id": "1",
        "created_at": "1442504259864",
        "created_by": "1",
        "featured": "0",
        "html": "<p>You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&lt;your blog URL&gt;/ghost/</code>. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!</p>\n\n<h2 id=\"gettingstarted\">Getting Started</h2>\n\n<p>Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!</p>\n\n<p>Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>shortcuts</em> to <strong>style</strong> your content. For example, a list:</p>\n\n<ul>\n<li>Item number one</li>\n<li>Item number two\n<ul><li>A nested item</li></ul></li>\n<li>A final item</li>\n</ul>\n\n<p>or with numbers!</p>\n\n<ol>\n<li>Remember to buy some milk  </li>\n<li>Drink the milk  </li>\n<li>Tweet that I remembered to buy the milk, and drank it</li>\n</ol>\n\n<h3 id=\"links\">Links</h3>\n\n<p>Want to link to a source? No problem. If you paste in a URL, like <a href=\"http://ghost.org\">http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to <a href=\"http://ghost.org\">the Ghost website</a>. Neat.</p>\n\n<h3 id=\"whataboutimages\">What about Images?</h3>\n\n<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:</p>\n\n<p><img src=\"https://ghost.org/images/ghost.png\" alt=\"The Ghost Logo\" /></p>\n\n<p>Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:</p>\n\n<h3 id=\"quoting\">Quoting</h3>\n\n<p>Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!</p>\n\n<blockquote>\n  <p>Ghost - Just a blogging platform</p>\n</blockquote>\n\n<h3 id=\"workingwithcode\">Working with Code</h3>\n\n<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.</p>\n\n<pre><code>.awesome-thing {\n    display: block;\n    width: 100%;\n}\n</code></pre>\n\n<h3 id=\"readyforabreak\">Ready for a Break?</h3>\n\n<p>Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.</p>\n\n<hr />\n\n<h3 id=\"advancedusage\">Advanced Usage</h3>\n\n<p>There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.</p>\n\n<p><input type=\"text\" placeholder=\"I'm an input field!\" /></p>\n\n<p>That should be enough to get you started. Have fun - and let us know what you think :)</p>",
        "id": "1",
        "image": "",
        "language": "en_US",
        "markdown": "You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at `<your blog URL>/ghost/`. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!\n\n## Getting Started\n\nGhost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!\n\nWriting in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use *shortcuts* to **style** your content. For example, a list:\n\n* Item number one\n* Item number two\n    * A nested item\n* A final item\n\nor with numbers!\n\n1. Remember to buy some milk\n2. Drink the milk\n3. Tweet that I remembered to buy the milk, and drank it\n\n### Links\n\nWant to link to a source? No problem. If you paste in a URL, like http://ghost.org - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to [the Ghost website](http://ghost.org). Neat.\n\n### What about Images?\n\nImages work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:\n\n![The Ghost Logo](https://ghost.org/images/ghost.png)\n\nNot sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:\n\n![A bowl of bananas]\n\n\n### Quoting\n\nSometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!\n\n> Ghost - Just a blogging platform\n\n### Working with Code\n\nGot a streak of geek? We've got you covered there, too. You can write inline `<code>` blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.\n\n    .awesome-thing {\n        display: block;\n        width: 100%;\n    }\n\n### Ready for a Break? \n\nThrow 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.\n\n---\n\n### Advanced Usage\n\nThere's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.\n\n<input type=\"text\" placeholder=\"I'm an input field!\" />\n\nThat should be enough to get you started. Have fun - and let us know what you think :)",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442504259881",
        "published_by": "1",
        "slug": "welcome-to-ghost",
        "status": "draft",
        "title": "Welcome to Ghost",
        "updated_at": "1442509305789",
        "updated_by": "1",
        "uuid": "1c894dab-ae07-4e4a-9c6f-792f6bafb5b8"
    },
    {
        "author_id": "1",
        "created_at": "1442509459706",
        "created_by": "1",
        "featured": "0",
        "html": "<p>Hello All,</p>\n\n<p>I hope you all are well. As you can see there is new interface for this blog which has been powered by Ghost and hosted in Github. For that you will see change in interface of this blog. I hope you will like the new look.</p>\n\n<p>Best regards, <br />\nRuddra</p>",
        "id": "4",
        "image": "",
        "language": "en_US",
        "markdown": "Hello All,\n\nI hope you all are well. As you can see there is new interface for this blog which has been powered by Ghost and hosted in Github. For that you will see change in interface of this blog. I hope you will like the new look.\n\nBest regards,\nRuddra",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442509870557",
        "published_by": "1",
        "slug": "mi",
        "status": "published",
        "title": "Migrating To Ghost",
        "updated_at": "1519486039928",
        "updated_by": "1",
        "uuid": "5c065b57-53f2-4c38-bb3b-f00b65380f97"
    },
    {
        "author_id": "1",
        "created_at": "1442509977107",
        "created_by": "1",
        "featured": "0",
        "html": "<p>When comes to using multiple languages in one single site, <em>Django</em> is very handy. You can use .po file to do your translation for you. </p>\n\n<p>Process is very simple: First create .po file. To make .po file I would suggest to use <strong>poedit</strong> or <strong>Rosetta</strong>. Here is another option that is using django's very own Localisation. Second create a folder name locale within tour django project and add the language named (for example: <strong>ru<em>_RU</strong> for Russian language) within locale. Within <strong>ru</em><em>_RU</strong> folder, create another folder named 'LC</em>_MESSAGES'. There save the <strong>.po</strong> file you have created. Save the <strong>.po</strong> file in name <strong>django.po</strong>. File Map:</p>\n\n<pre><code>Project\n  |\n  locale\n    |\n    ru_RU\n      |\n      LC_MESSAGES\n        |\n        django.po\n</code></pre>\n\n<p>Now run this command: <code>django-admin.py compilemessages</code> to generate <strong>.mo</strong> file(django.mo). Third comes to final touch. in Language settings in your <strong>settings.py</strong> add <strong>ru_RU</strong> like this:</p>\n\n<pre><code>LANGUAGES = (\n    ('en-us', 'English'),\n    ('ru_RU', 'Russian'),\n)\n\n\nLANGUAGE_CODE = 'en-us' 'ru_RU' \n</code></pre>\n\n<p>Add locale path :</p>\n\n<pre><code>LOCALE_PATHS = (\n    os.path.join(PROJECT_PATH, '../locale'),\n)\n</code></pre>\n\n<p>and finally add a middleware in in <strong>MIDDLEWARE_CLASSES</strong>.</p>\n\n<pre><code>'django.middleware.locale.LocaleMiddleware'\n</code></pre>\n\n<p>That should the trick.</p>",
        "id": "5",
        "image": "",
        "language": "en_US",
        "markdown": "When comes to using multiple languages in one single site, *Django* is very handy. You can use .po file to do your translation for you. \n\nProcess is very simple: First create .po file. To make .po file I would suggest to use **poedit** or **Rosetta**. Here is another option that is using django's very own Localisation. Second create a folder name locale within tour django project and add the language named (for example: **ru__RU** for Russian language) within locale. Within **ru___RU** folder, create another folder named 'LC__MESSAGES'. There save the **.po** file you have created. Save the **.po** file in name **django.po**. File Map:\n\n\n    Project\n      |\n      locale\n        |\n        ru_RU\n          |\n          LC_MESSAGES\n            |\n            django.po\n    \n\nNow run this command: `django-admin.py compilemessages` to generate **.mo** file(django.mo). Third comes to final touch. in Language settings in your **settings.py** add **ru_RU** like this:\n\n    LANGUAGES = (\n        ('en-us', 'English'),\n        ('ru_RU', 'Russian'),\n    )\n\n\n    LANGUAGE_CODE = 'en-us' 'ru_RU' \n\n\nAdd locale path :\n\n\n    LOCALE_PATHS = (\n        os.path.join(PROJECT_PATH, '../locale'),\n    )\n\nand finally add a middleware in in **MIDDLEWARE_CLASSES**.\n\n    'django.middleware.locale.LocaleMiddleware'\n\nThat should the trick.",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442510334653",
        "published_by": "1",
        "slug": "django-translation-using-po-file",
        "status": "published",
        "title": "Django Translation Using .po File",
        "updated_at": "1519486056272",
        "updated_by": "1",
        "uuid": "1f93405a-8727-4fdc-a8f1-19c7ce63513c"
    },
    {
        "author_id": "1",
        "created_at": "1442510404738",
        "created_by": "1",
        "featured": "0",
        "html": "<p>I wanted to add a rich text editor within <em>django</em> administrator. Its not that hard to add a rich text editor, as there are editors like <a href=\"ckeditor.com\">ckeditor</a>, <a href=\"http://www.tinymce.com/\">tinymce</a>. </p>\n\n<p>There are multiple plugins for django like <a href=\"https://github.com/dwaiter/django-ckeditor\">django-ckeditor</a> or <a href=\"https://github.com/aljosa/django-tinymce\">django-tinymce</a> etc. It seemed very complicated to use for me. So what I did here is that I have downloaded <a href=\"http://ckeditor.com/\">ckeditor</a> stadard edition and extracted it in my Static folder and loaded the js file within  <strong>templates>admin>base.html</strong>.</p>\n\n<p>Now, using firebug, I retrieved the textarea <em>name/id/class</em> in which I wanted to add ckeditor using firebug (or from chrome/firefox: inspect elements). This process is simple, just load the page where your textarea(or any type of field) resides, open firebug and inspect that place.For example: lets say the model field I want to modify is named <code>blogbody</code>. So the element's name in admin site was <code>id_blogbody</code>(auto generated). In case of using a form, the input will be like following:</p>\n\n<h2 id=\"formspy\">forms.py</h2>\n\n<pre><code>blogbody= forms.CharField(widget=       forms.TextInput(attrs={'id': 'id_blogbody'}))\n</code></pre>\n\n<h2 id=\"generatedtext\">generated text</h2>\n\n<pre><code>&lt;input id='id_blogbody' ...&gt;\n</code></pre>\n\n<p>Then go to base.html and add this script:</p>\n\n<pre><code>&lt;script&gt;\n  CKEDITOR.replace(    'name_or_id_or_class_of_the_textfield' ); #in   this example CKEDITOR.replace( '#id_blogbody' )\n &lt;/script&gt;\n</code></pre>\n\n<p>Now reload the page from admin site and a textfield with rich text editor will be generated!</p>",
        "id": "6",
        "image": "",
        "language": "en_US",
        "markdown": "I wanted to add a rich text editor within *django* administrator. Its not that hard to add a rich text editor, as there are editors like <a href=\"ckeditor.com\">ckeditor</a>, <a href=\"http://www.tinymce.com/\">tinymce</a>. \n\nThere are multiple plugins for django like <a href=\"https://github.com/dwaiter/django-ckeditor\">django-ckeditor</a> or <a href=\"https://github.com/aljosa/django-tinymce\">django-tinymce</a> etc. It seemed very complicated to use for me. So what I did here is that I have downloaded <a href=\"http://ckeditor.com/\">ckeditor</a> stadard edition and extracted it in my Static folder and loaded the js file within  **templates>admin>base.html**.\n\nNow, using firebug, I retrieved the textarea *name/id/class* in which I wanted to add ckeditor using firebug (or from chrome/firefox: inspect elements). This process is simple, just load the page where your textarea(or any type of field) resides, open firebug and inspect that place.For example: lets say the model field I want to modify is named `blogbody`. So the element's name in admin site was `id_blogbody`(auto generated). In case of using a form, the input will be like following:\n\n\n##forms.py\n\n    blogbody= forms.CharField(widget=       forms.TextInput(attrs={'id': 'id_blogbody'}))\n\n##generated text\n\n    <input id='id_blogbody' ...>\n\nThen go to base.html and add this script:\n\n    <script>\n      CKEDITOR.replace(    'name_or_id_or_class_of_the_textfield' ); #in   this example CKEDITOR.replace( '#id_blogbody' )\n     </script>\n\n\nNow reload the page from admin site and a textfield with rich text editor will be generated!",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442510649481",
        "published_by": "1",
        "slug": "richtext-editor-in-admin-site",
        "status": "published",
        "title": "RichText Editor in Django Admin Site",
        "updated_at": "1519483870187",
        "updated_by": "1",
        "uuid": "530f251e-3d0d-4ffb-b8f2-ec367e9b47c5"
    },
    {
        "author_id": "1",
        "created_at": "1442510692845",
        "created_by": "1",
        "featured": "0",
        "html": "<p>To add a virtual environment to <strong>Intellij Idea</strong>, You have added <em>virtualenv</em> folder's python to project SDK. Which means that <em>virtualenv</em> directory's python( for example <strong>venv/bin/python2.7</strong>) needs to be added to Intellij Idea project path. Here is a demonstration: </p>\n\n<h3 id=\"forolderversions\">For Older versions:</h3>\n\n<p>The virtualenv directory's python( for example venv/bin/python2.7) needs to be added to IntelliJ Idea project path. Example: need to go to file>project structure (IntelliJ Idea)</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/virtualenv/1.jpg\"></p>\n\n<p>press (new) in Project SDK, and add new path to virtualenv's python directory like this:</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/virtualenv/2.jpg\"></p>\n\n<p>Go to Modules>Dependencies and set your module SDK to Python SDK which is marked on this picture: </p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/virtualenv/3.png\"></p>\n\n<p>Click on Django (option marked in next the image) and set Django project root, Settings, Manage Script like this:</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/virtualenv/4.jpg\"></p>\n\n<p>Now press ok and final look of the Project settings: </p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/virtualenv/5.jpg\"></p>\n\n<p>Now need to run the project.</p>\n\n<h3 id=\"forpycharm2016andlater\">For Pycharm 2016 and later</h3>\n\n<p>To add an existing virtual environment to the list of available interpreters</p>\n\n<p>In the Project Interpreter page,</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/I226A.png\"> <br />\nIn the drop-down list, choose to Add local. <br />\nadd environment option</p>\n\n<p>In the Select Python Interpreter dialog box that opens, choose the desired Python executable, located inside the virtual environment folder, and click OK. <br />\nGo to this link for more information. <br />\nNow need to run the project.</p>\n\n<p>My Stackoverflow Answer is here: <a href=\"http://stackoverflow.com/questions/20877106/using-intellijidea-within-an-existing-virtualenv/20879661#20879661\">http://stackoverflow.com/questions/20877106/using-intellijidea-within-an-existing-virtualenv/20879661#20879661</a></p>",
        "id": "7",
        "image": "",
        "language": "en_US",
        "markdown": "To add a virtual environment to **Intellij Idea**, You have added *virtualenv* folder's python to project SDK. Which means that *virtualenv* directory's python( for example **venv/bin/python2.7**) needs to be added to Intellij Idea project path. Here is a demonstration: \n\n###For Older versions:\n\nThe virtualenv directory's python( for example venv/bin/python2.7) needs to be added to IntelliJ Idea project path. Example: need to go to file>project structure (IntelliJ Idea)\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/virtualenv/1.jpg\">\n\npress (new) in Project SDK, and add new path to virtualenv's python directory like this:\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/virtualenv/2.jpg\">\n\nGo to Modules>Dependencies and set your module SDK to Python SDK which is marked on this picture: \n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/virtualenv/3.png\">\n\nClick on Django (option marked in next the image) and set Django project root, Settings, Manage Script like this:\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/virtualenv/4.jpg\">\n\nNow press ok and final look of the Project settings: \n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/virtualenv/5.jpg\">\n\nNow need to run the project.\n\n###For Pycharm 2016 and later\n\nTo add an existing virtual environment to the list of available interpreters\n\nIn the Project Interpreter page,\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/I226A.png\">\nIn the drop-down list, choose to Add local.\nadd environment option\n\nIn the Select Python Interpreter dialog box that opens, choose the desired Python executable, located inside the virtual environment folder, and click OK.\nGo to this link for more information.\nNow need to run the project.\n\nMy Stackoverflow Answer is here: http://stackoverflow.com/questions/20877106/using-intellijidea-within-an-existing-virtualenv/20879661#20879661",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442510886637",
        "published_by": "1",
        "slug": "using-intellijidea-within-an-exisiting-virtualenv",
        "status": "published",
        "title": "Using IntellijIdea Within An Exisiting Virtualenv",
        "updated_at": "1519483922878",
        "updated_by": "1",
        "uuid": "bdef16ea-3cbc-456d-8a4f-c17494a121f0"
    },
    {
        "author_id": "1",
        "created_at": "1442510985672",
        "created_by": "1",
        "featured": "0",
        "html": "<p>Let us make a test scenario here: <br />\n<strong>A dropdown field which on change we are going to send a Get/Post request to Django and return response.</strong></p>\n\n<p>Let us start coding....</p>\n\n<pre><code>&lt;select id=\"select_dropdown\"&gt;\n&lt;option value='joshua'&gt;joshua&lt;/option&gt;\n&lt;option value='peter'&gt;peter&lt;/option&gt;\n....\n....\n&lt;/select&gt;\n</code></pre>\n\n<p>Let's make an <code>Ajax</code> request after the change in the dropdown field.</p>\n\n<pre><code>$(document).ready(function(){\n\n$('#select_dropdown').change(function(){\nvar e = document.getElementById(\"select_dropdown\");\nvar value = e.options[e.selectedIndex].value;\n\n$.ajax({\n    url: \"your-url\",\n    type: \"post\", // or \"get\"\n    data: value,\n    success: function(data) {\n\n      alert(data.result);\n    }});\n\n});\n</code></pre>\n\n<p>Here on change of a post request is called. Now let's handle the view.</p>\n\n<pre><code>import json\ndef post(request):\nif request.POST(): #os request.GET()\n    get_value= request.body\n    # Do your logic here coz you got data in `get_value`\n    data = {}\n    data['result'] = 'you made a request'\n    return HttpResponse(json.dumps(data), content_type=\"application/json\")\n</code></pre>\n\n<p>Thats all.</p>",
        "id": "8",
        "image": "",
        "language": "en_US",
        "markdown": "Let us make a test scenario here:\n**A dropdown field which on change we are going to send a Get/Post request to Django and return response.**\n\nLet us start coding....\n    \n    <select id=\"select_dropdown\">\n    <option value='joshua'>joshua</option>\n    <option value='peter'>peter</option>\n    ....\n    ....\n    </select>\n\nLet's make an `Ajax` request after the change in the dropdown field.\n\n\n    $(document).ready(function(){\n\n    $('#select_dropdown').change(function(){\n    var e = document.getElementById(\"select_dropdown\");\n    var value = e.options[e.selectedIndex].value;\n\n    $.ajax({\n        url: \"your-url\",\n        type: \"post\", // or \"get\"\n        data: value,\n        success: function(data) {\n\n          alert(data.result);\n        }});\n\n    });\n\n\nHere on change of a post request is called. Now let's handle the view.\n\n    import json\n    def post(request):\n\tif request.POST(): #os request.GET()\n    \tget_value= request.body\n    \t# Do your logic here coz you got data in `get_value`\n    \tdata = {}\n    \tdata['result'] = 'you made a request'\n\t\treturn HttpResponse(json.dumps(data), content_type=\"application/json\")\n\n\nThats all.",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442511138668",
        "published_by": "1",
        "slug": "sample-ajax-get-post-request-in-django",
        "status": "published",
        "title": "Sample Ajax GET/POST Request in Django",
        "updated_at": "1497690315531",
        "updated_by": "1",
        "uuid": "ac963772-b127-4afc-b210-694c664fafd1"
    },
    {
        "author_id": "1",
        "created_at": "1442511240713",
        "created_by": "1",
        "featured": "0",
        "html": "<p>While surfing through <a href=\"stackoverflow.com\">stackoverflow</a>, I find a common question among Django users that, database not working properly; fields attribute changed, yet not working etc. Clearly because most of them used syncdb after altering fields. Well, lets make some things clear here about django <strong>syncdb</strong> and <strong>migration</strong>.</p>\n\n<h2 id=\"whatissyncdb\">What is <code>syncdb</code>?</h2>\n\n<p><strong>syncdb</strong> is a command which is executed in django shell to create tables for first time for apps which are added to <strong>INSTALLED_APPS</strong> of <em>settings.py</em>. Need to keep in mind about two key words: 'First Time' and 'Newly Added Apps'. Because <strong>syncdb</strong> only works on models of those apps for first time to create initial tables in database. So once <strong>syncdb</strong> is executed, not model field altering, because if anyone does that, it will not work. Its clearly mentioned in <a href=\"https://docs.djangoproject.com/en/1.6/ref/django-admin/#syncdb\">documentation</a>:</p>\n\n<blockquote>syncdb will only create tables for models which have not yet been installed. It will never issue ALTER TABLE statements to match changes made to a model class after installation. Changes to model classes and database schemas often involve some form of ambiguity and, in those cases, Django would have to guess at the correct changes to make. There is a risk that critical data would be lost in the process.\n\nIf you have made changes to a model and wish to alter the database tables to match, use the sql command to display the new SQL structure and compare that to your existing table schema to work out the changes.</blockquote>\n\n<p>So what if you need to change model field? No worries, migration is here to save you.</p>\n\n<h2 id=\"whatismigration\">What is <code>migration</code>?</h2>\n\n<p>Migration is a process to reconstruct database schema according to altered model fields. From Django 1.7(under development) <a href=\"https://docs.djangoproject.com/en/dev/topics/migrations/\">documentation</a>: </p>\n\n<blockquote>Migrations are Django’s way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema. They’re designed to be mostly automatic, but you’ll need to know when to make migrations, when to run them, and the common problems you might run into.</blockquote>\n\n<p>So, after using <strong>syncdb</strong>, if you need to alter model fields, then go ahead, and after that you have to migrate database. If you are using django &lt;=1.6, then you can use <a href=\"http://south.aeracode.org/\">South</a>. If django is above 1.6, it has its own <a href=\"https://docs.djangoproject.com/en/dev/topics/migrations/\">migration</a> process.</p>\n\n<p>And of course, if you use <strong>South</strong> to migrate, you have to use <strong>syncdb</strong> before executing migration, because if you don't, initial database tables(including auth, auth<em>group</em>permission, django<em>admin</em>log etc) will not be created.</p>\n\n<h2 id=\"whatifyoumessupinproductionserverwithsyncdbandmigration\">What if you mess-up in production server with syncdb and migration?</h2>\n\n<p>If you end up doing <strong>syncdb</strong> initially but need to change database, what should be done?</p>\n\n<p>Easy solution, keep the models in same state as it was during initial <strong>syncdb</strong> command. Then run <code>python manage.py schemamigration your_app_label --initial</code><strong>(in django &lt;=1.6)</strong> or <code>python manage.py makemigration your_app_label</code><strong>(django >=1.7)</strong>.</p>\n\n<p>After that, run <code>python manage.py migrate your_app_label --fake</code><strong>(in django &lt;=1.6)</strong> or <code>python manage.py migrate your_app_label --fake-initial</code> <strong>(django >=1.7)</strong>. It will put a fake migration in the database which will occur no change in tables.</p>\n\n<p>Then change models and run <code>python manage.py migrate your_app_label</code></p>\n\n<h3 id=\"pssyncdbisdepricatedfromdjango17whichwillreducethehassleofusingsyncdbandmigrationseparately\">PS: <em>syncdb is depricated from django 1.7, which will reduce the hassle of using syncdb and migration separately.</em></h3>",
        "id": "9",
        "image": "",
        "language": "en_US",
        "markdown": "While surfing through <a href=\"stackoverflow.com\">stackoverflow</a>, I find a common question among Django users that, database not working properly; fields attribute changed, yet not working etc. Clearly because most of them used syncdb after altering fields. Well, lets make some things clear here about django **syncdb** and **migration**.\n\n##What is `syncdb`?\n\n**syncdb** is a command which is executed in django shell to create tables for first time for apps which are added to **INSTALLED_APPS** of *settings.py*. Need to keep in mind about two key words: 'First Time' and 'Newly Added Apps'. Because **syncdb** only works on models of those apps for first time to create initial tables in database. So once **syncdb** is executed, not model field altering, because if anyone does that, it will not work. Its clearly mentioned in <a href=\"https://docs.djangoproject.com/en/1.6/ref/django-admin/#syncdb\">documentation</a>:\n\n<blockquote>syncdb will only create tables for models which have not yet been installed. It will never issue ALTER TABLE statements to match changes made to a model class after installation. Changes to model classes and database schemas often involve some form of ambiguity and, in those cases, Django would have to guess at the correct changes to make. There is a risk that critical data would be lost in the process.\n\nIf you have made changes to a model and wish to alter the database tables to match, use the sql command to display the new SQL structure and compare that to your existing table schema to work out the changes.</blockquote>\n\nSo what if you need to change model field? No worries, migration is here to save you.\n\n##What is `migration`?\n\nMigration is a process to reconstruct database schema according to altered model fields. From Django 1.7(under development) <a href=\"https://docs.djangoproject.com/en/dev/topics/migrations/\">documentation</a>: \n\n<blockquote>Migrations are Django’s way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema. They’re designed to be mostly automatic, but you’ll need to know when to make migrations, when to run them, and the common problems you might run into.</blockquote>\n\nSo, after using **syncdb**, if you need to alter model fields, then go ahead, and after that you have to migrate database. If you are using django <=1.6, then you can use <a href=\"http://south.aeracode.org/\">South</a>. If django is above 1.6, it has its own <a href=\"https://docs.djangoproject.com/en/dev/topics/migrations/\">migration</a> process.\n\nAnd of course, if you use **South** to migrate, you have to use **syncdb** before executing migration, because if you don't, initial database tables(including auth, auth_group_permission, django_admin_log etc) will not be created.\n\n##What if you mess-up in production server with syncdb and migration?\n\nIf you end up doing **syncdb** initially but need to change database, what should be done?\n\nEasy solution, keep the models in same state as it was during initial **syncdb** command. Then run `python manage.py schemamigration your_app_label --initial`**(in django <=1.6)** or `python manage.py makemigration your_app_label`**(django >=1.7)**.\n\nAfter that, run `python manage.py migrate your_app_label --fake`**(in django <=1.6)** or `python manage.py migrate your_app_label --fake-initial` **(django >=1.7)**. It will put a fake migration in the database which will occur no change in tables.\n\nThen change models and run `python manage.py migrate your_app_label`\n\n\n\n###PS: *syncdb is depricated from django 1.7, which will reduce the hassle of using syncdb and migration separately.*\n",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442512157472",
        "published_by": "1",
        "slug": "syncdb-vs-migration",
        "status": "published",
        "title": "Syncdb vs Migration",
        "updated_at": "1442589060929",
        "updated_by": "1",
        "uuid": "3f633981-a1d5-4ca3-b92f-a524e3e60dfd"
    },
    {
        "author_id": "1",
        "created_at": "1442512198717",
        "created_by": "1",
        "featured": "0",
        "html": "<p>As <a href=\"https://docs.djangoproject.com/en/dev/topics/forms/formsets/\">documentation</a> says: <blockquote> A formset is a layer of abstraction to work with multiple forms on the same page. It can be best compared to a data grid</blockquote>.</p>\n\n<p>So here I am going to show a very simple django formset implementation example.<!--more--></p>\n\n<p>Here we are going to use the following model, form, template, view:</p>\n\n<h2 id=\"model\">Model</h2>\n\n<pre><code>class Product(models.Model):\n    name = models.CharField(max_length=50)\n    quantity = models.IntegerField()\n    price = models.IntegerField()\n\nclass Distributor(models.Model):\n    name = models.CharField(max_length=100)\n    products= models.ManyToManyField(Product)\n</code></pre>\n\n<p>These fairly simple models, where product is related to distributor model by a many-to-many relation.</p>\n\n<h2 id=\"form\">Form</h2>\n\n<p>First we declare productform, then using formset factory helps to create multiple instances of product. Then we add this to distributor form like below:</p>\n\n<pre><code>from django import forms\nfrom django.forms.formsets import formset_factory\nclass ProductForm(forms.Form):\n    name = forms.CharField()\n    quantity = forms.IntegerField()\n    price = forms.IntegerField()\n\nProductFormset= formset_factory(ProductForm)\n\nclass DistributorForm(forms.Form):\n   name= forms.CharField()\n   products= ProductFormset()\n</code></pre>\n\n<p>Now we use this form in template.</p>\n\n<h2 id=\"template\">Template</h2>\n\n<pre><code>  &lt;form action=\"\" method=\"post\" class=\"\"&gt;\n  {% csrf_token %}\n  &lt;h2&gt; Distributors :&lt;/h2&gt;\n  {% for field in form %}\n    {{ field.errors }}\n    {{ field.label_tag }} : {{ field }}\n  {% endfor %}\n  {{ form.products.management_form }}\n\n  &lt;h3&gt; Product Instance(s)&lt;/h3&gt;\n  &lt;table id=\"table-product\"&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;name&lt;/th&gt;\n        &lt;th&gt;quantity&lt;/th&gt;   \n        &lt;th&gt;price&lt;/th&gt;\n      &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody class=\"product-instances\"&gt;\n      &lt;tr&gt;\n        &lt;td&gt;{{ form.product }}&lt;/td&gt;\n        &lt;td&gt;{{ form.product }}&lt;/td&gt;   \n        &lt;td&gt;{{ form.product }}&lt;/td&gt;\n        &lt;td&gt; &lt;input id=\"input_add\" type=\"button\" name=\"add\" value=\" Add More \" class=\"tr_clone_add btn data_input\"&gt; &lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;/tbody&gt;\n  {% endfor %}\n  &lt;/table&gt;\n              &lt;input type=\"submit\" name=\"submit\" class=\"button\" value=\"Save\"/&gt;\n  &lt;/form&gt;\n\n&lt;script&gt;\n        var i = 1;\n        $(\"#input_add\").click(function() {\n            $(\"tbody tr:first\").clone().find(\".data_input\").each(function() {\n                if ($(this).attr('class')== 'tr_clone_add btn data_input'){\n                    $(this).attr({\n                        'id': function(_, id) { return \"remove_button\" },\n                        'name': function(_, name) { return \"name_remove\" +i },\n                        'value': 'Remove'\n                    }).on(\"click\", function(){\n                        var a = $(this).parent();\n                        var b= a.parent();\n                        i=i-1\n                        $('#id_form-TOTAL_FORMS').val(i);\n                        b.remove();\n\n                        $('.product-instances tr').each(function(index, value){\n                            $(this).find('.data_input').each(function(){\n                                $(this).attr({\n                                    'id': function (_, id) {\n                                        var idData= id;\n                                        var splitV= String(idData).split('-');\n                                        var fData= splitV[0];\n                                        var tData= splitV[2];\n                                        return fData+ \"-\" +index + \"-\" + tData\n                                    },\n                                    'name': function (_, name) {\n                                        var nameData= name;\n                                        var splitV= String(nameData).split('-');\n                                        var fData= splitV[0];\n                                        var tData= splitV[2];\n                                        return fData+ \"-\" +index + \"-\" + tData\n                                    }\n                                });\n                            })\n                        })\n                    })\n                }\n                else{\n                    $(this).attr({\n                        'id': function (_, id) {\n                            var idData= id;\n                            var splitV= String(idData).split('-');\n                            var fData= splitV[0];\n                            var tData= splitV[2];\n                            return fData+ \"-\" +i + \"-\" + tData\n                        },\n                        'name': function (_, name) {\n                            var nameData= name;\n                            var splitV= String(nameData).split('-');\n                            var fData= splitV[0];\n                            var tData= splitV[2];\n                            return fData+ \"-\" +i + \"-\" + tData\n                        }\n                    });\n\n                }\n            }).end().appendTo(\"tbody\");\n            $('#id_form-TOTAL_FORMS').val(1+i);\n            i++;\n\n        });\n    &lt;/script&gt;\n</code></pre>\n\n<p>The html part is fairly simple, like using form in template. Then the JS is being used so that multiple instances of product form can be generated like: </p>\n\n<pre><code>&lt;!-- First row of the table --&gt;\n\n&lt;tr&gt;&lt;td&gt;&lt;input type=\"text\" name=\"form-0-name\" id=\"id_form-0-name\" /&gt;&lt;/td&gt;\n&lt;td&gt;&lt;input type=\"number\" name=\"form-0-quantity\" id=\"id_form-0-quantity\" /&gt;&lt;/td&gt;\n&lt;td&gt;&lt;input type=\"number\" name=\"form-0-price\" id=\"id_form-0-price\" /&gt;&lt;/td&gt;\n&lt;td&gt; &lt;input id=\"input_add\" type=\"button\" name=\"add\" value=\" Add More \" class=\"tr_clone_add btn data_input\"&gt; &lt;/td&gt; &lt;/tr&gt;\n\n&lt;!-- Second row of the table --&gt;\n\n&lt;tr&gt;&lt;td&gt;&lt;input type=\"text\" name=\"form-1-name\" id=\"id_form-1-name\" /&gt;&lt;/td&gt;\n&lt;td&gt;&lt;input type=\"number\" name=\"form-1-quantity\" id=\"id_form-1-quantity\" /&gt;&lt;/td&gt;\n&lt;td&gt;&lt;input type=\"number\" name=\"form-1-price\" id=\"id_form-1-price\" /&gt;&lt;/td&gt;\n&lt;td&gt; &lt;input id=\"remove_button\" type=\"button\" name=\"remove_button1\" value=\" Remove \" class=\"tr_clone_add btn data_input\"&gt; &lt;/td&gt; &lt;/tr&gt;\n\n&lt;!-- more inline formset are going to rendered here --&gt;\n</code></pre>\n\n<h2 id=\"view\">View</h2>\n\n<p>Here values from the form are being saved to database.</p>\n\n<pre><code>    def post(request):\n            form = DistributorForm(request.POST)\n            form.product_instances = ProductFormset(request.POST)\n            if form.is_valid():\n                distributor= Distributor() #model class\n                distributor.name= form.cleaned_data('name')\n                distributor.save()\n                if form.product_instances.cleaned_data is not None:\n                    for items in form.product_instances.cleaned_data:\n                        product = Product() #Product model class\n                        product.name= item['name']\n                        product.quantity= item['quantity']\n                        product.price= item['price']\n                        product.save()\n                        distributor.products.add(product)\n                return redirect('/success')\n            return redirect('/failure')\n</code></pre>\n\n<p>Output should look like this:</p>\n\n<p><img src=\"https://dl.dropboxusercontent.com/u/235131545/myblog/formset.JPG\"></p>\n\n<p><b>Notes to keep in mind:</b></p>\n\n<p>First, need to be careful about things like:</p>\n\n<pre><code>&lt;input type=\"hidden\" name=\"form-TOTAL_FORMS\" value=\"1\" id=\"id_form-TOTAL_FORMS\" /&gt;\n&lt;input type=\"hidden\" name=\"form-INITIAL_FORMS\" value=\"0\" id=\"id_form-INITIAL_FORMS\" /&gt;\n&lt;input type=\"hidden\" name=\"form-MAX_NUM_FORMS\" id=\"id_form-MAX_NUM_FORMS\" /&gt;\n</code></pre>\n\n<p>Here <strong>form-TOTAL_FORMS</strong> 's value should be equal to number of rows in table. The code above must exist in order to formset to work.</p>\n\n<p>Second, in <strong>views.py</strong>, formset form class needs to be called, else cleaned data within the formset can't be found.</p>\n\n<pre><code>form.product_instances = ProductFormset(request.POST)\n</code></pre>\n\n<p>Thats all.</p>",
        "id": "10",
        "image": "",
        "language": "en_US",
        "markdown": "As <a href=\"https://docs.djangoproject.com/en/dev/topics/forms/formsets/\">documentation</a> says: <blockquote> A formset is a layer of abstraction to work with multiple forms on the same page. It can be best compared to a data grid</blockquote>.\n\nSo here I am going to show a very simple django formset implementation example.<!--more-->\n\nHere we are going to use the following model, form, template, view:\n\n##Model\n\n\n    class Product(models.Model):\n        name = models.CharField(max_length=50)\n        quantity = models.IntegerField()\n        price = models.IntegerField()\n\n    class Distributor(models.Model):\n        name = models.CharField(max_length=100)\n        products= models.ManyToManyField(Product)\n\nThese fairly simple models, where product is related to distributor model by a many-to-many relation.\n\n##Form\n\nFirst we declare productform, then using formset factory helps to create multiple instances of product. Then we add this to distributor form like below:\n\n\n    from django import forms\n    from django.forms.formsets import formset_factory\n    class ProductForm(forms.Form):\n        name = forms.CharField()\n        quantity = forms.IntegerField()\n        price = forms.IntegerField()\n\n    ProductFormset= formset_factory(ProductForm)\n\n    class DistributorForm(forms.Form):\n       name= forms.CharField()\n       products= ProductFormset()\n\nNow we use this form in template.\n\n##Template\n\n      <form action=\"\" method=\"post\" class=\"\">\n      {% csrf_token %}\n      <h2> Distributors :</h2>\n      {% for field in form %}\n        {{ field.errors }}\n        {{ field.label_tag }} : {{ field }}\n      {% endfor %}\n      {{ form.products.management_form }}\n\n      <h3> Product Instance(s)</h3>\n      <table id=\"table-product\">\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>quantity</th>   \n            <th>price</th>\n          </tr>\n          </thead>\n          <tbody class=\"product-instances\">\n          <tr>\n            <td>{{ form.product }}</td>\n            <td>{{ form.product }}</td>   \n            <td>{{ form.product }}</td>\n            <td> <input id=\"input_add\" type=\"button\" name=\"add\" value=\" Add More \" class=\"tr_clone_add btn data_input\"> </td>\n          </tr>\n          </tbody>\n      {% endfor %}\n      </table>\n                  <input type=\"submit\" name=\"submit\" class=\"button\" value=\"Save\"/>\n      </form>\n\n    <script>\n            var i = 1;\n            $(\"#input_add\").click(function() {\n                $(\"tbody tr:first\").clone().find(\".data_input\").each(function() {\n                    if ($(this).attr('class')== 'tr_clone_add btn data_input'){\n                        $(this).attr({\n                            'id': function(_, id) { return \"remove_button\" },\n                            'name': function(_, name) { return \"name_remove\" +i },\n                            'value': 'Remove'\n                        }).on(\"click\", function(){\n                            var a = $(this).parent();\n                            var b= a.parent();\n                            i=i-1\n                            $('#id_form-TOTAL_FORMS').val(i);\n                            b.remove();\n\n                            $('.product-instances tr').each(function(index, value){\n                                $(this).find('.data_input').each(function(){\n                                    $(this).attr({\n                                        'id': function (_, id) {\n                                            var idData= id;\n                                            var splitV= String(idData).split('-');\n                                            var fData= splitV[0];\n                                            var tData= splitV[2];\n                                            return fData+ \"-\" +index + \"-\" + tData\n                                        },\n                                        'name': function (_, name) {\n                                            var nameData= name;\n                                            var splitV= String(nameData).split('-');\n                                            var fData= splitV[0];\n                                            var tData= splitV[2];\n                                            return fData+ \"-\" +index + \"-\" + tData\n                                        }\n                                    });\n                                })\n                            })\n                        })\n                    }\n                    else{\n                        $(this).attr({\n                            'id': function (_, id) {\n                                var idData= id;\n                                var splitV= String(idData).split('-');\n                                var fData= splitV[0];\n                                var tData= splitV[2];\n                                return fData+ \"-\" +i + \"-\" + tData\n                            },\n                            'name': function (_, name) {\n                                var nameData= name;\n                                var splitV= String(nameData).split('-');\n                                var fData= splitV[0];\n                                var tData= splitV[2];\n                                return fData+ \"-\" +i + \"-\" + tData\n                            }\n                        });\n\n                    }\n                }).end().appendTo(\"tbody\");\n                $('#id_form-TOTAL_FORMS').val(1+i);\n                i++;\n\n            });\n        </script>\n\nThe html part is fairly simple, like using form in template. Then the JS is being used so that multiple instances of product form can be generated like: \n\n    <!-- First row of the table -->\n\n    <tr><td><input type=\"text\" name=\"form-0-name\" id=\"id_form-0-name\" /></td>\n    <td><input type=\"number\" name=\"form-0-quantity\" id=\"id_form-0-quantity\" /></td>\n    <td><input type=\"number\" name=\"form-0-price\" id=\"id_form-0-price\" /></td>\n    <td> <input id=\"input_add\" type=\"button\" name=\"add\" value=\" Add More \" class=\"tr_clone_add btn data_input\"> </td> </tr>\n\n    <!-- Second row of the table -->\n\n    <tr><td><input type=\"text\" name=\"form-1-name\" id=\"id_form-1-name\" /></td>\n    <td><input type=\"number\" name=\"form-1-quantity\" id=\"id_form-1-quantity\" /></td>\n    <td><input type=\"number\" name=\"form-1-price\" id=\"id_form-1-price\" /></td>\n    <td> <input id=\"remove_button\" type=\"button\" name=\"remove_button1\" value=\" Remove \" class=\"tr_clone_add btn data_input\"> </td> </tr>\n\n    <!-- more inline formset are going to rendered here -->\n\n\n##View\n\nHere values from the form are being saved to database.\n\n        def post(request):\n                form = DistributorForm(request.POST)\n                form.product_instances = ProductFormset(request.POST)\n                if form.is_valid():\n                    distributor= Distributor() #model class\n                    distributor.name= form.cleaned_data('name')\n                    distributor.save()\n                    if form.product_instances.cleaned_data is not None:\n                        for items in form.product_instances.cleaned_data:\n                            product = Product() #Product model class\n                            product.name= item['name']\n                            product.quantity= item['quantity']\n                            product.price= item['price']\n                            product.save()\n                            distributor.products.add(product)\n                    return redirect('/success')\n                return redirect('/failure')\n\n\n\nOutput should look like this:\n\n<img src=\"https://dl.dropboxusercontent.com/u/235131545/myblog/formset.JPG\">\n\n<b>Notes to keep in mind:</b>\n\nFirst, need to be careful about things like:\n\n\n    <input type=\"hidden\" name=\"form-TOTAL_FORMS\" value=\"1\" id=\"id_form-TOTAL_FORMS\" />\n    <input type=\"hidden\" name=\"form-INITIAL_FORMS\" value=\"0\" id=\"id_form-INITIAL_FORMS\" />\n    <input type=\"hidden\" name=\"form-MAX_NUM_FORMS\" id=\"id_form-MAX_NUM_FORMS\" />\n\n\nHere **form-TOTAL_FORMS** 's value should be equal to number of rows in table. The code above must exist in order to formset to work.\n\nSecond, in **views.py**, formset form class needs to be called, else cleaned data within the formset can't be found.\n\n    form.product_instances = ProductFormset(request.POST)\n\nThats all.",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442512883603",
        "published_by": "1",
        "slug": "working-with-formset",
        "status": "published",
        "title": "Working with Formset",
        "updated_at": "1442524034435",
        "updated_by": "1",
        "uuid": "f385d6ea-b59a-4329-b26b-e4854723803b"
    },
    {
        "author_id": "1",
        "created_at": "1442512987400",
        "created_by": "1",
        "featured": "0",
        "html": "<h3 id=\"iamassumingyouhavereadcelerydocsfromahrefhttpceleryreadthedocsorgenlatestindexhtmlcelerydocumentationa\">I am assuming you have read celery docs from <a href=\"http://celery.readthedocs.org/en/latest/index.html\">Celery Documentation</a></h3>\n\n<p>As we know, celery can be used as a scheduler for executing asynchronous tasks in periodic cycles. Here I am going to share to do that with a code example. But I am going to avoid theoretical knowledge here because you can read them in celery documentation. </p>\n\n<p>First install celery: <code>pip install django-celery</code>.</p>\n\n<h2 id=\"configuringbrokers\">Configuring Brokers</h2>\n\n<p>We are using django database as Broker. For detail understanding, check here: <a href=\"http://celery.readthedocs.org/en/latest/getting-started/brokers/django.html\">http://celery.readthedocs.org/en/latest/getting-started/brokers/django.html</a></p>\n\n<h2 id=\"makingperiodictask\">Making Periodic Task</h2>\n\n<p>Here is the project structure we are going to use:-</p>\n\n<pre><code>project\n -settings.py\n -manage.py\n -app1\n  -views.py\n  -models.py\n -app2\n  -views.py\n  -models.py\n</code></pre>\n\n<p>Lets say, we want to add periodic task to <strong>app1</strong>. So structure of the project will be like this:-</p>\n\n<pre><code>project\n -settings.py\n -manage.py\n -app1\n  -__init__py\n  -celery.py\n  -tasks.py\n  -views.py\n  -models.py\n -app2\n  -views.py\n  -models.py\n</code></pre>\n\n<p>No need to panic to see two new .py files. They will be created in time. :)</p>\n\n<p>Now, we need to add celery configuration in:</p>\n\n<p><strong>settings.py</strong>:-</p>\n\n<pre><code>from __future__ import absolute_import\nBROKER_URL = 'pyamqp://guest:guest@wlocalhost:5672//' #read docs\nCELERY_IMPORTS = ('app1.tasks', )\nfrom celery.schedules import crontab\nfrom datetime import timedelta\n\nCELERYBEAT_SCHEDULE = {\n  'schedule-name': { \n                      'task': 'app1.tasks.email_sending_method',  # We are going to create a email_sending_method later in this post.\n                      'schedule': timedelta(seconds=30),\n                      },\n  }\n</code></pre>\n\n<p>As you can see, <strong>task</strong> in <strong>CELERYBEAT<em>_SCHEDULE</strong> is name as <strong>app1.tasks.email</em><em>_sending</em><em>_method</strong> because in next section we are making a <strong>email</em><em>_sending</em>_method</strong> method which going to send an email every 30 seconds.</p>\n\n<p>And in installed apps, we need to add <strong>djcelery</strong> :-</p>\n\n<pre><code>INSTALLED_APPS = (\n  ...\n 'djcelery'\n)\n</code></pre>\n\n<p>Now we shall add a <strong>celery.py</strong> file in <strong>app1</strong> directory:-</p>\n\n<pre><code>  from __future__ import absolute_import\n  import os\n  from celery import Celery\n  import django\n  from django.conf import settings\n  os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n  app = Celery('app1.email_sending_method')\n  app.config_from_object('django.conf:settings')\n  app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n\n  app.conf.update(\n      CELERY_RESULT_BACKEND='djcelery.backends.database:DatabaseBackend',\n      )\n  @app.task(bind=True)\n  def debug_task(self):\n      print('Request: {0!r}'.format(self.request))\n</code></pre>\n\n<p>and update the <code>__init__.py</code> file within the directory:-</p>\n\n<pre><code>from __future__ import absolute_import\nfrom celery import app as celery_app\n</code></pre>\n\n<p>Now we are going to add a <strong>tasks.py</strong> which is actually going to be executed while running celery.</p>\n\n<pre><code>from __future__ import absolute_import\nimport datetime\nfrom celery.task.base import periodic_task\nfrom django.core.mail import send_mail\n\n@periodic_task(run_every=datetime.timedelta(seconds=30))\ndef email_sending_method():\n    send_mail('subject', 'body', 'from_me@admin.com' , ['to_me@admin.com'], fail_silently=False) \n</code></pre>\n\n<p>Add respective credentials/configurations for sending mail, and then run this piece of code in command prompt:-</p>\n\n<p><code>celery -A app1 worker -B -l info</code></p>\n\n<p>And that should do the trick, we will get mails after every 30 seconds. </p>\n\n<h4 id=\"psalthoughtheremightakeyerrorbutitwontoccuranyproblems\">PS: Although there might a key-error, but it won't occur any problems.</h4>",
        "id": "11",
        "image": "",
        "language": "en_US",
        "markdown": "###I am assuming you have read celery docs from <a href=\"http://celery.readthedocs.org/en/latest/index.html\">Celery Documentation</a>\n\nAs we know, celery can be used as a scheduler for executing asynchronous tasks in periodic cycles. Here I am going to share to do that with a code example. But I am going to avoid theoretical knowledge here because you can read them in celery documentation. \n\nFirst install celery: `pip install django-celery`.\n\n##Configuring Brokers\n\nWe are using django database as Broker. For detail understanding, check here: http://celery.readthedocs.org/en/latest/getting-started/brokers/django.html\n\n##Making Periodic Task\n\nHere is the project structure we are going to use:-\n\n\n    project\n     -settings.py\n     -manage.py\n     -app1\n      -views.py\n      -models.py\n     -app2\n      -views.py\n      -models.py\n\nLets say, we want to add periodic task to **app1**. So structure of the project will be like this:-\n\n    project\n     -settings.py\n     -manage.py\n     -app1\n      -__init__py\n      -celery.py\n      -tasks.py\n      -views.py\n      -models.py\n     -app2\n      -views.py\n      -models.py\n\n\nNo need to panic to see two new .py files. They will be created in time. :)\n\nNow, we need to add celery configuration in:\n\n **settings.py**:-\n\n\n    from __future__ import absolute_import\n    BROKER_URL = 'pyamqp://guest:guest@wlocalhost:5672//' #read docs\n    CELERY_IMPORTS = ('app1.tasks', )\n    from celery.schedules import crontab\n    from datetime import timedelta\n\n    CELERYBEAT_SCHEDULE = {\n      'schedule-name': { \n                          'task': 'app1.tasks.email_sending_method',  # We are going to create a email_sending_method later in this post.\n                          'schedule': timedelta(seconds=30),\n                          },\n      }\n    \nAs you can see, **task** in **CELERYBEAT__SCHEDULE** is name as **app1.tasks.email___sending___method** because in next section we are making a **email___sending__method** method which going to send an email every 30 seconds.\n\nAnd in installed apps, we need to add **djcelery** :-\n\n\n    INSTALLED_APPS = (\n      ...\n     'djcelery'\n    )\n\nNow we shall add a **celery.py** file in **app1** directory:-\n\n      from __future__ import absolute_import\n      import os\n      from celery import Celery\n      import django\n      from django.conf import settings\n      os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n      app = Celery('app1.email_sending_method')\n      app.config_from_object('django.conf:settings')\n      app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n\n      app.conf.update(\n          CELERY_RESULT_BACKEND='djcelery.backends.database:DatabaseBackend',\n          )\n      @app.task(bind=True)\n      def debug_task(self):\n          print('Request: {0!r}'.format(self.request))\n\n\nand update the `__init__.py` file within the directory:-\n\n\n    from __future__ import absolute_import\n    from celery import app as celery_app\n\n\nNow we are going to add a **tasks.py** which is actually going to be executed while running celery.\n\n\n    from __future__ import absolute_import\n    import datetime\n    from celery.task.base import periodic_task\n    from django.core.mail import send_mail\n\n    @periodic_task(run_every=datetime.timedelta(seconds=30))\n    def email_sending_method():\n        send_mail('subject', 'body', 'from_me@admin.com' , ['to_me@admin.com'], fail_silently=False) \n\nAdd respective credentials/configurations for sending mail, and then run this piece of code in command prompt:-\n\n`celery -A app1 worker -B -l info`\n\nAnd that should do the trick, we will get mails after every 30 seconds. \n\n\n####PS: Although there might a key-error, but it won't occur any problems.",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442513552622",
        "published_by": "1",
        "slug": "perodic-tasks-by-celery-3-1-example",
        "status": "published",
        "title": "Perodic Tasks By Celery 3.1 Example",
        "updated_at": "1442524017499",
        "updated_by": "1",
        "uuid": "9ad28ee8-b6e6-41ff-a4cb-5e4fb40b3e08"
    },
    {
        "author_id": "1",
        "created_at": "1442513585726",
        "created_by": "1",
        "featured": "0",
        "html": "<p>Django has its own implementation for <strong>reset/forgot password</strong> for its admin site. We are going to use that piece of code as reference to implement similar feature for a non admin-site authentication page. Although there are tons of good packages which will allow user to use their password reseting system. But if the system isn't too complex and doesn't need such authentication plugins, then reusing the django's very own implementation can be a good option.</p>\n\n<p>Class based view is going to be used instead of method based view(for no particular reason, so using either of them is alright.). And please read the comments of the example codes for better understanding of implementation.</p>\n\n<p>This implementation is going to divided into two parts. First part is sending an email with reset url, and the Second part is clicking the reset url attached in email and entering new password for reset completion.</p>\n\n<p>Before starting anything, lets look at the django's reset/forgot password's implementation in <em>django/contrib/auth/forms.py</em> (<a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/forms.py'>source</a>) and <em>django/contrib/auth/views.py</em> (<a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/views.py'>source</a>).</p>\n\n<h2 id=\"implemetationofsendinganemailforforgotpasswordwithreseturl\">Implemetation of sending an email for forgot password with reset url</h2>\n\n<p>First need to configure smtp/email configuration so the system can send email. Gmail's SMTP service is going to be used here.</p>\n\n<pre><code>EMAIL_USE_TLS = True\nDEFAULT_FROM_EMAIL = 'test@gmail.com'\nSERVER_EMAIL = 'test@gmail.com'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'test@gmail.com'\nEMAIL_HOST_PASSWORD = 'test123##'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n</code></pre>\n\n<p>Now we are going to make a <b>reset password form</b> where we are going to add an text field which will take either username or email address associated with the corresponding user.</p>\n\n<pre><code>from django import forms\n\nclass PasswordResetRequestForm(forms.Form):\n    email_or_username = forms.CharField(label=(\"Email Or Username\"), max_length=254)\n</code></pre>\n\n<p>We are going to make a <b>view</b> which will check the input email/username and send an email to user's email address(implementation reference: <a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/forms.py#L235'>source</a>).</p>\n\n<pre><code>    from django.contrib.auth.tokens import default_token_generator\n    from django.utils.encoding import force_bytes\n    from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode\n    from django.template import loader\n    from django.core.validators import validate_email\n    from django.core.exceptions import ValidationError\n    from django.core.mail import send_mail\n    from settings import DEFAULT_FROM_EMAIL\n    from django.views.generic import *\n    from utils.forms.reset_password_form import PasswordResetRequestForm\n    from django.contrib import messages\n    from django.contrib.auth.models import User\n    from django.db.models.query_utils import Q\n\n    class ResetPasswordRequestView(FormView):\n        template_name = \"account/test_template.html\"    #code for template is given below the view's code\n        success_url = '/account/login'\n        form_class = PasswordResetRequestForm\n\n        @staticmethod\n        def validate_email_address(email):\n        '''\n        This method here validates the if the input is an email address or not. Its return type is boolean, True if the input is a email address or False if its not.\n        '''\n            try:\n                validate_email(email)\n                return True\n            except ValidationError:\n                return False\n\n        def post(self, request, *args, **kwargs):\n        '''\n        A normal post request which takes input from field \"email_or_username\" (in ResetPasswordRequestForm). \n        '''\n            form = self.form_class(request.POST)\n            if form.is_valid():\n                data= form.cleaned_data[\"email_or_username\"]\n            if self.validate_email_address(data) is True:                 #uses the method written above\n                '''\n                If the input is an valid email address, then the following code will lookup for users associated with that email address. If found then an email will be sent to the address, else an error message will be printed on the screen.\n                '''\n                associated_users= User.objects.filter(Q(email=data)|Q(username=data))\n                if associated_users.exists():\n                    for user in associated_users:\n                            c = {\n                                'email': user.email,\n                                'domain': request.META['HTTP_HOST'],\n                                'site_name': 'your site',\n                                'uid': urlsafe_base64_encode(force_bytes(user.pk)),\n                                'user': user,\n                                'token': default_token_generator.make_token(user),\n                                'protocol': 'http',\n                                }\n                            subject_template_name='registration/password_reset_subject.txt' \n                            # copied from django/contrib/admin/templates/registration/password_reset_subject.txt to templates directory\n                            email_template_name='registration/password_reset_email.html'    \n                            # copied from django/contrib/admin/templates/registration/password_reset_email.html to templates directory\n                            subject = loader.render_to_string(subject_template_name, c)\n                            # Email subject *must not* contain newlines\n                            subject = ''.join(subject.splitlines())\n                            email = loader.render_to_string(email_template_name, c)\n                            send_mail(subject, email, DEFAULT_FROM_EMAIL , [user.email], fail_silently=False)\n                    result = self.form_valid(form)\n                    messages.success(request, 'An email has been sent to ' + data +\". Please check its inbox to continue reseting password.\")\n                    return result\n                result = self.form_invalid(form)\n                messages.error(request, 'No user is associated with this email address')\n                return result\n            else:\n                '''\n                If the input is an username, then the following code will lookup for users associated with that user. If found then an email will be sent to the user's address, else an error message will be printed on the screen.\n                '''\n                associated_users= User.objects.filter(username=data)\n                if associated_users.exists():\n                    for user in associated_users:\n                        c = {\n                            'email': user.email,\n                            'domain': 'example.com', #or your domain\n                            'site_name': 'example',\n                            'uid': urlsafe_base64_encode(force_bytes(user.pk)),\n                            'user': user,\n                            'token': default_token_generator.make_token(user),\n                            'protocol': 'http',\n                            }\n                        subject_template_name='registration/password_reset_subject.txt'\n                        email_template_name='registration/password_reset_email.html'\n                        subject = loader.render_to_string(subject_template_name, c)\n                        # Email subject *must not* contain newlines\n                        subject = ''.join(subject.splitlines())\n                        email = loader.render_to_string(email_template_name, c)\n                        send_mail(subject, email, DEFAULT_FROM_EMAIL , [user.email], fail_silently=False)\n                    result = self.form_valid(form)\n                    messages.success(request, 'Email has been sent to ' + data +\"'s email address. Please check its inbox to continue reseting password.\")\n                    return result\n                result = self.form_invalid(form)\n                messages.error(request, 'This username does not exist in the system.')\n                return result\n            messages.error(request, 'Invalid Input')\n            return self.form_invalid(form)\n</code></pre>\n\n<p>As you see above, the code is fairly simple(although it looks long). An encoded user id has been generated here using <strong>urlsafe<em>_base64</em><em>_encode(force</em><em>_bytes(user.pk))</strong> and a token by using <strong>default</em><em>_token</em><em>_generator.make</em>__token(user)</strong>. This user id is going to be used later to get the user, the token will be used for checking validity of the url for that user and both the token and the user id is going to be used as unique reference for reset password url. <strong>c</strong> is a dictionary which has user id, token and other related data etc. This dictionary is going to be blent with the template <code>registration/password_reset_email.html</code> and send to the user's email address.</p>\n\n<p>For displaying messages(if you are using messages framework of django-1.7, details: <a href='https://docs.djangoproject.com/en/dev/ref/contrib/messages/#displaying-messages'>source</a>), add this piece of code in your template:</p>\n\n<pre><code>    {# test template #}\n    &lt;!-- code for displaying success or error message in template --&gt;\n    {% if messages %}\n    &lt;ul class=\"messages\"&gt;\n        {% for message in messages %}\n        &lt;li&gt;{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}&gt;{{ message }}&lt;/li&gt;\n        {% endfor %}\n        {% endif %}\n    &lt;/ul&gt;\n\n    &lt;!-- Form rendering code for template --&gt;\n    &lt;form action=\"\" method=\"post\"&gt;\n\n        {% csrf_token %}\n        {{ form.as_p }}\n\n        &lt;input type=\"submit\" value=\"Submit\" /&gt;\n    &lt;/form&gt;\n</code></pre>\n\n<p>Two more things before wrapping up sending email part. One, making a <b>url</b> for using this view.</p>\n\n<pre><code>urlpatterns = patterns('',\n                       url(r'^admin/', include(admin.site.urls)),\n                       # url(r'^account/reset_password_confirm/(?P&lt;uidb64&gt;[0-9A-Za-z]+)-(?P&lt;token&gt;.+)/$', PasswordResetConfirmView.as_view(),name='reset_password_confirm'), \n                       # PS: url above is going to used for next section of implementation.\n                       url(r'^account/reset_password', ResetPasswordRequestView.as_view(), name=\"reset_password\"),  \n                       )\n</code></pre>\n\n<p>Two, editing the template of <strong>registration/password<em>reset</em>email.html</strong> or else you will get errors.</p>\n\n<pre><code>{% load i18n %}{% autoescape off %}\n{% blocktrans %}You're receiving this email because you requested a password reset for your user account at {{ site_name }}.{% endblocktrans %}\n\n{% trans \"Please go to the following page and choose a new password:\" %}\n    {% block reset_link %}\n        {{ domain }}{% url 'reset_password_confirm' uidb64=uid token=token %} \n        &lt;!--This is the only change from ` django/contrib/admin/templates/registration/password_reset_subject.html`. the url name is commented out in urls.py section. The view associated with the url is going to described later in this post. --&gt;\n    {% endblock %}\n{% trans \"Your username, in case you've forgotten:\" %} {{ user.get_username }}\n\n{% trans \"Thanks for using our site!\" %}\n\n{% blocktrans %}The {{ site_name }} team{% endblocktrans %}\n\n{% endautoescape %}\n</code></pre>\n\n<p>Now run the server and you will see forms like the screen shots below: (This screenshots look cool because django adminsite's js/css have been used here.) <br />\n(**Image sequence is according the implementation flow)</p>\n\n<h3 id=\"renderedtemplatefrompasswordresetrequestformform\">Rendered template from PasswordResetRequestForm form</h3>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/reset-password.png\"></p>\n\n<h3 id=\"renderedtemplatefrompasswordresetrequestformformwitherrormessages\">Rendered template from PasswordResetRequestForm form with error messages</h3>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/invalid-username.png\"></p>\n\n<h3 id=\"renderedtemplateofloginformwithsentemailconfirmationmessage\">Rendered template of login form with sent email confirmation message</h3>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/reset-mail-sent.png\"></p>\n\n<h3 id=\"sentemaillook\">Sent Email look</h3>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/reset-email.png\"></p>\n\n<h2 id=\"implemetationofclickingthereseturlandenteringnewpasswordforresetcompletation\">Implemetation of clicking the reset url and entering new password for reset completation.</h2>\n\n<p>First, lets write a <b>form</b> which will have two fields new password and retype password field. </p>\n\n<pre><code>class SetPasswordForm(forms.Form):\n    \"\"\"\n    A form that lets a user change set their password without entering the old\n    password\n    \"\"\"\n    error_messages = {\n        'password_mismatch': (\"The two password fields didn't match.\"),\n        }\n    new_password1 = forms.CharField(label=(\"New password\"),\n                                    widget=forms.PasswordInput)\n    new_password2 = forms.CharField(label=(\"New password confirmation\"),\n                                    widget=forms.PasswordInput)\n\n    def clean_new_password2(self):\n        password1 = self.cleaned_data.get('new_password1')\n        password2 = self.cleaned_data.get('new_password2')\n        if password1 and password2:\n            if password1 != password2:\n                raise forms.ValidationError(\n                    self.error_messages['password_mismatch'],\n                    code='password_mismatch',\n                    )\n        return password2\n</code></pre>\n\n<p>It will take two password input and verify if they match, if those inputs match(in clean method), it will return password. Now using that form, we are going to write a <b>view</b>(reference for implementation:(<a href=\"https://github.com/django/django/blob/731f313d604a6cc141f36d8a1ba9a75790c70154/django/contrib/auth/views.py#L192\">source</a>)).</p>\n\n<pre><code>class PasswordResetConfirmView(FormView):\n    template_name = \"account/test_template.html\"\n    success_url = '/admin/'\n    form_class = SetPasswordForm\n\n    def post(self, request, uidb64=None, token=None, *arg, **kwargs):\n        \"\"\"\n        View that checks the hash in a password reset link and presents a\n        form for entering a new password.\n        \"\"\"\n        UserModel = get_user_model()\n        form = self.form_class(request.POST)\n        assert uidb64 is not None and token is not None  # checked by URLconf\n        try:\n            uid = urlsafe_base64_decode(uidb64)\n            user = UserModel._default_manager.get(pk=uid)\n        except (TypeError, ValueError, OverflowError, UserModel.DoesNotExist):\n            user = None\n\n        if user is not None and default_token_generator.check_token(user, token):\n            if form.is_valid():\n                new_password= form.cleaned_data['new_password2']\n                user.set_password(new_password)\n                user.save()\n                messages.success(request, 'Password has been reset.')\n                return self.form_valid(form)\n            else:\n                messages.error(request, 'Password reset has not been unsuccessful.')\n                return self.form_invalid(form)\n        else:\n            messages.error(request,'The reset password link is no longer valid.')\n            return self.form_invalid(form)\n</code></pre>\n\n<p>URL for this view:</p>\n\n<pre><code>urlpatterns += patterns('',\n                       url(r'^admin/', include(admin.site.urls)),\n                       url(r'^account/reset_password_confirm/(?P&lt;uidb64&gt;[0-9A-Za-z]+)-(?P&lt;token&gt;.+)/$', PasswordResetConfirmView.as_view(),name='reset_password_confirm'),\n                   )\n</code></pre>\n\n<p>Well <strong>PasswordResetConfirmView</strong> takes two parameter from urls, uidb64 and token, those were sent within email generated by <strong>ResetPasswordRequestView</strong>. We got user id hence the user by decoding <strong>uid64</strong> by using <strong>urlsafe<em>_base64</em><em>decode</strong>, and function <strong>default</em><em>_token</em><em>_generator.check</em><em>token</strong> checks the token against the user. If they are valid and the form is valid, we set new password for the user using <strong>.set</em>_password('password')</strong> function. If they are not valid, it will show an error message saying the url is no longer valid.</p>\n\n<p>More screenshots:(sequencial to implementation)  </p>\n\n<h3 id=\"renderedtemplateforsetpasswordformform\">Rendered template for SetPasswordForm form</h3>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/reset-password-prompt.png\"></p>\n\n<h3 id=\"resetsuccessful\">Reset successful</h3>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/reset-success.png\"></p>\n\n<p>Thus you implement your very own forgot or reset the password.</p>\n\n<h3><b>For full project/implementation, please check/fork this <a href=\"https://github.com/skyrudy/django-reset-password/tree/master\">repository</a>. This code has been tested for Python3 and django 1.7/1.10 .</b> </h3>",
        "id": "12",
        "image": "",
        "language": "en_US",
        "markdown": "Django has its own implementation for **reset/forgot password** for its admin site. We are going to use that piece of code as reference to implement similar feature for a non admin-site authentication page. Although there are tons of good packages which will allow user to use their password reseting system. But if the system isn't too complex and doesn't need such authentication plugins, then reusing the django's very own implementation can be a good option.\n\nClass based view is going to be used instead of method based view(for no particular reason, so using either of them is alright.). And please read the comments of the example codes for better understanding of implementation.\n\n\nThis implementation is going to divided into two parts. First part is sending an email with reset url, and the Second part is clicking the reset url attached in email and entering new password for reset completion.\n\nBefore starting anything, lets look at the django's reset/forgot password's implementation in *django/contrib/auth/forms.py* (<a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/forms.py'>source</a>) and *django/contrib/auth/views.py* (<a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/views.py'>source</a>).\n\n##Implemetation of sending an email for forgot password with reset url\n\nFirst need to configure smtp/email configuration so the system can send email. Gmail's SMTP service is going to be used here.\n\n    EMAIL_USE_TLS = True\n    DEFAULT_FROM_EMAIL = 'test@gmail.com'\n    SERVER_EMAIL = 'test@gmail.com'\n    EMAIL_HOST = 'smtp.gmail.com'\n    EMAIL_PORT = 587\n    EMAIL_HOST_USER = 'test@gmail.com'\n    EMAIL_HOST_PASSWORD = 'test123##'\n    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n\nNow we are going to make a <b>reset password form</b> where we are going to add an text field which will take either username or email address associated with the corresponding user.\n\n    from django import forms\n\n    class PasswordResetRequestForm(forms.Form):\n        email_or_username = forms.CharField(label=(\"Email Or Username\"), max_length=254)\n\n\nWe are going to make a <b>view</b> which will check the input email/username and send an email to user's email address(implementation reference: <a href='https://github.com/django/django/blob/89559bcfb096ccc625e0e9ab41e2136fcb32a514/django/contrib/auth/forms.py#L235'>source</a>).\n\n\n        from django.contrib.auth.tokens import default_token_generator\n        from django.utils.encoding import force_bytes\n        from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode\n        from django.template import loader\n        from django.core.validators import validate_email\n        from django.core.exceptions import ValidationError\n        from django.core.mail import send_mail\n        from settings import DEFAULT_FROM_EMAIL\n        from django.views.generic import *\n        from utils.forms.reset_password_form import PasswordResetRequestForm\n        from django.contrib import messages\n        from django.contrib.auth.models import User\n        from django.db.models.query_utils import Q\n\n        class ResetPasswordRequestView(FormView):\n            template_name = \"account/test_template.html\"    #code for template is given below the view's code\n            success_url = '/account/login'\n            form_class = PasswordResetRequestForm\n\n            @staticmethod\n            def validate_email_address(email):\n            '''\n            This method here validates the if the input is an email address or not. Its return type is boolean, True if the input is a email address or False if its not.\n            '''\n                try:\n                    validate_email(email)\n                    return True\n                except ValidationError:\n                    return False\n\n            def post(self, request, *args, **kwargs):\n            '''\n            A normal post request which takes input from field \"email_or_username\" (in ResetPasswordRequestForm). \n            '''\n                form = self.form_class(request.POST)\n                if form.is_valid():\n                    data= form.cleaned_data[\"email_or_username\"]\n                if self.validate_email_address(data) is True:                 #uses the method written above\n                    '''\n                    If the input is an valid email address, then the following code will lookup for users associated with that email address. If found then an email will be sent to the address, else an error message will be printed on the screen.\n                    '''\n                    associated_users= User.objects.filter(Q(email=data)|Q(username=data))\n                    if associated_users.exists():\n                        for user in associated_users:\n                                c = {\n                                    'email': user.email,\n                                    'domain': request.META['HTTP_HOST'],\n                                    'site_name': 'your site',\n                                    'uid': urlsafe_base64_encode(force_bytes(user.pk)),\n                                    'user': user,\n                                    'token': default_token_generator.make_token(user),\n                                    'protocol': 'http',\n                                    }\n                                subject_template_name='registration/password_reset_subject.txt' \n                                # copied from django/contrib/admin/templates/registration/password_reset_subject.txt to templates directory\n                                email_template_name='registration/password_reset_email.html'    \n                                # copied from django/contrib/admin/templates/registration/password_reset_email.html to templates directory\n                                subject = loader.render_to_string(subject_template_name, c)\n                                # Email subject *must not* contain newlines\n                                subject = ''.join(subject.splitlines())\n                                email = loader.render_to_string(email_template_name, c)\n                                send_mail(subject, email, DEFAULT_FROM_EMAIL , [user.email], fail_silently=False)\n                        result = self.form_valid(form)\n                        messages.success(request, 'An email has been sent to ' + data +\". Please check its inbox to continue reseting password.\")\n                        return result\n                    result = self.form_invalid(form)\n                    messages.error(request, 'No user is associated with this email address')\n                    return result\n                else:\n                    '''\n                    If the input is an username, then the following code will lookup for users associated with that user. If found then an email will be sent to the user's address, else an error message will be printed on the screen.\n                    '''\n                    associated_users= User.objects.filter(username=data)\n                    if associated_users.exists():\n                        for user in associated_users:\n                            c = {\n                                'email': user.email,\n                                'domain': 'example.com', #or your domain\n                                'site_name': 'example',\n                                'uid': urlsafe_base64_encode(force_bytes(user.pk)),\n                                'user': user,\n                                'token': default_token_generator.make_token(user),\n                                'protocol': 'http',\n                                }\n                            subject_template_name='registration/password_reset_subject.txt'\n                            email_template_name='registration/password_reset_email.html'\n                            subject = loader.render_to_string(subject_template_name, c)\n                            # Email subject *must not* contain newlines\n                            subject = ''.join(subject.splitlines())\n                            email = loader.render_to_string(email_template_name, c)\n                            send_mail(subject, email, DEFAULT_FROM_EMAIL , [user.email], fail_silently=False)\n                        result = self.form_valid(form)\n                        messages.success(request, 'Email has been sent to ' + data +\"'s email address. Please check its inbox to continue reseting password.\")\n                        return result\n                    result = self.form_invalid(form)\n                    messages.error(request, 'This username does not exist in the system.')\n                    return result\n                messages.error(request, 'Invalid Input')\n                return self.form_invalid(form)\n\nAs you see above, the code is fairly simple(although it looks long). An encoded user id has been generated here using **urlsafe__base64___encode(force___bytes(user.pk))** and a token by using **default___token___generator.make___token(user)**. This user id is going to be used later to get the user, the token will be used for checking validity of the url for that user and both the token and the user id is going to be used as unique reference for reset password url. **c** is a dictionary which has user id, token and other related data etc. This dictionary is going to be blent with the template `registration/password_reset_email.html` and send to the user's email address.\n\nFor displaying messages(if you are using messages framework of django-1.7, details: <a href='https://docs.djangoproject.com/en/dev/ref/contrib/messages/#displaying-messages'>source</a>), add this piece of code in your template:\n\n\n        {# test template #}\n        <!-- code for displaying success or error message in template -->\n        {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n            <li>{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n            {% endif %}\n        </ul>\n\n        <!-- Form rendering code for template -->\n        <form action=\"\" method=\"post\">\n\n            {% csrf_token %}\n            {{ form.as_p }}\n\n            <input type=\"submit\" value=\"Submit\" />\n        </form>\n\nTwo more things before wrapping up sending email part. One, making a <b>url</b> for using this view.\n\n\n    urlpatterns = patterns('',\n                           url(r'^admin/', include(admin.site.urls)),\n                           # url(r'^account/reset_password_confirm/(?P<uidb64>[0-9A-Za-z]+)-(?P<token>.+)/$', PasswordResetConfirmView.as_view(),name='reset_password_confirm'), \n                           # PS: url above is going to used for next section of implementation.\n                           url(r'^account/reset_password', ResetPasswordRequestView.as_view(), name=\"reset_password\"),  \n                           )\n\n\nTwo, editing the template of **registration/password_reset_email.html** or else you will get errors.\n\n\n    {% load i18n %}{% autoescape off %}\n    {% blocktrans %}You're receiving this email because you requested a password reset for your user account at {{ site_name }}.{% endblocktrans %}\n\n    {% trans \"Please go to the following page and choose a new password:\" %}\n        {% block reset_link %}\n            {{ domain }}{% url 'reset_password_confirm' uidb64=uid token=token %} \n            <!--This is the only change from ` django/contrib/admin/templates/registration/password_reset_subject.html`. the url name is commented out in urls.py section. The view associated with the url is going to described later in this post. -->\n        {% endblock %}\n    {% trans \"Your username, in case you've forgotten:\" %} {{ user.get_username }}\n\n    {% trans \"Thanks for using our site!\" %}\n\n    {% blocktrans %}The {{ site_name }} team{% endblocktrans %}\n\n    {% endautoescape %}\n\nNow run the server and you will see forms like the screen shots below: (This screenshots look cool because django adminsite's js/css have been used here.)\n(**Image sequence is according the implementation flow)\n\n###Rendered template from PasswordResetRequestForm form\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/reset-password.png\">\n\n###Rendered template from PasswordResetRequestForm form with error messages\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/invalid-username.png\">\n\n\n###Rendered template of login form with sent email confirmation message\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/reset-mail-sent.png\">\n\n###Sent Email look\n<img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/reset-email.png\">\n\n\n##Implemetation of clicking the reset url and entering new password for reset completation.\n\nFirst, lets write a <b>form</b> which will have two fields new password and retype password field. \n\n\n    class SetPasswordForm(forms.Form):\n        \"\"\"\n        A form that lets a user change set their password without entering the old\n        password\n        \"\"\"\n        error_messages = {\n            'password_mismatch': (\"The two password fields didn't match.\"),\n            }\n        new_password1 = forms.CharField(label=(\"New password\"),\n                                        widget=forms.PasswordInput)\n        new_password2 = forms.CharField(label=(\"New password confirmation\"),\n                                        widget=forms.PasswordInput)\n\n        def clean_new_password2(self):\n            password1 = self.cleaned_data.get('new_password1')\n            password2 = self.cleaned_data.get('new_password2')\n            if password1 and password2:\n                if password1 != password2:\n                    raise forms.ValidationError(\n                        self.error_messages['password_mismatch'],\n                        code='password_mismatch',\n                        )\n            return password2\n\n\nIt will take two password input and verify if they match, if those inputs match(in clean method), it will return password. Now using that form, we are going to write a <b>view</b>(reference for implementation:(<a href=\"https://github.com/django/django/blob/731f313d604a6cc141f36d8a1ba9a75790c70154/django/contrib/auth/views.py#L192\">source</a>)).\n\n\n    class PasswordResetConfirmView(FormView):\n        template_name = \"account/test_template.html\"\n        success_url = '/admin/'\n        form_class = SetPasswordForm\n\n        def post(self, request, uidb64=None, token=None, *arg, **kwargs):\n            \"\"\"\n            View that checks the hash in a password reset link and presents a\n            form for entering a new password.\n            \"\"\"\n            UserModel = get_user_model()\n            form = self.form_class(request.POST)\n            assert uidb64 is not None and token is not None  # checked by URLconf\n            try:\n                uid = urlsafe_base64_decode(uidb64)\n                user = UserModel._default_manager.get(pk=uid)\n            except (TypeError, ValueError, OverflowError, UserModel.DoesNotExist):\n                user = None\n        \n            if user is not None and default_token_generator.check_token(user, token):\n                if form.is_valid():\n                    new_password= form.cleaned_data['new_password2']\n                    user.set_password(new_password)\n                    user.save()\n                    messages.success(request, 'Password has been reset.')\n                    return self.form_valid(form)\n                else:\n                    messages.error(request, 'Password reset has not been unsuccessful.')\n                    return self.form_invalid(form)\n            else:\n                messages.error(request,'The reset password link is no longer valid.')\n                return self.form_invalid(form)\n\n\nURL for this view:\n\n\n    urlpatterns += patterns('',\n                           url(r'^admin/', include(admin.site.urls)),\n                           url(r'^account/reset_password_confirm/(?P<uidb64>[0-9A-Za-z]+)-(?P<token>.+)/$', PasswordResetConfirmView.as_view(),name='reset_password_confirm'),\n                       )\n\n\n\nWell **PasswordResetConfirmView** takes two parameter from urls, uidb64 and token, those were sent within email generated by **ResetPasswordRequestView**. We got user id hence the user by decoding **uid64** by using **urlsafe__base64__decode**, and function **default___token___generator.check__token** checks the token against the user. If they are valid and the form is valid, we set new password for the user using **.set__password('password')** function. If they are not valid, it will show an error message saying the url is no longer valid.\n\nMore screenshots:(sequencial to implementation)\n###Rendered template for SetPasswordForm form\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/reset-password-prompt.png\">\n\n### Reset successful\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/django-reset-password/reset-success.png\">\n\nThus you implement your very own forgot or reset the password.\n\n<h3><b>For full project/implementation, please check/fork this <a href=\"https://github.com/skyrudy/django-reset-password/tree/master\">repository</a>. This code has been tested for Python3 and django 1.7/1.10 .</b> </h3>",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442522977197",
        "published_by": "1",
        "slug": "implementation-of-forgot-reset-password-feature-in-django",
        "status": "published",
        "title": "Implementation of 'Forgot/Reset Password' feature in Django",
        "updated_at": "1497690038864",
        "updated_by": "1",
        "uuid": "515bb8ea-0713-4587-96b9-b43290f5b883"
    },
    {
        "author_id": "1",
        "created_at": "1442523414503",
        "created_by": "1",
        "featured": "0",
        "html": "<p>I am going to share some useful <strong>Django</strong> tools/functions which are very useful(were for me atleast) to get things done.</p>\n\n<h3 id=\"returnanymodelclassanditsproperties\">Return any model class and its properties</h3>\n\n<p>This method will return any model class if you have the name of the class. </p>\n\n<pre><code>from django.db import models\n\ndef get_model_description(model_name=None, return_property_list=True):\n    for item in models.get_models(include_auto_created=True):\n        if item.__name__ == model_name:\n            if return_property_list is True:\n                return item.get_trigger_properties()\n            else:\n                return item\n    return []\n</code></pre>\n\n<p>For usage, let us think of an example. Let us think, we have a class name 'X', we will get the class instance using it like this:</p>\n\n<pre><code>from usefultools import get_model_descriptor\n\nmodel_x = get_model_descriptor(model_name='X')   #will get class\nmodel_x_objects = get_model_descriptor(model_name='X').objects.all() #will get all the objects of this class\n</code></pre>\n\n<p>And for its property:</p>\n\n<pre><code>from usefultools import get_model_descriptor\n\nmodel_x = get_model_descriptor(model_name='X', return_property_list=True)   #will get a list of properties like ['a_property','b_property']\n</code></pre>\n\n<h3 id=\"distancecalculator\">Distance Calculator</h3>\n\n<p>If you input latitude and longitude of two places, this function will return the distance in between them. Got help from here: <a href=\"http://code.activestate.com/recipes/576779-calculating-distance-between-two-geographic-points/\">http://code.activestate.com/recipes/576779-calculating-distance-between-two-geographic-points/</a></p>\n\n<pre><code>import math\n\ndef distance_calculator(lat1, long1, lat2, long2):\n\n    lat1, long1, lat2, long2 = float(lat1), float(long1), float(lat2), float(long2)\n\n    degrees_to_radians = math.pi/180.0\n\n    phi1 = (90.0 - lat1)*degrees_to_radians\n    phi2 = (90.0 - lat2)*degrees_to_radians\n\n\n    theta1 = long1*degrees_to_radians\n    theta2 = long2*degrees_to_radians\n\n    cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) +\n           math.cos(phi1)*math.cos(phi2))\n    arc = math.acos( cos )\n    distance = arc*6378.1\n\n    return distance\n</code></pre>\n\n<p>It will return the distance in KM.</p>\n\n<h3 id=\"dynamicrelationaloperations\">Dynamic Relational Operations</h3>\n\n<p>Suppose we have a sentence like: <code>'5 is greater than 9'</code> and check if its true. We could use <code>eval</code> to dynamically converty string to python but its highly not recommended. So I tried like this:</p>\n\n<pre><code>def calculate_relational_operation(lhs, rhs, operator):\n    get_type = type(lhs).__name__\n    if get_type == 'str':\n        rhs = str(rhs)\n    elif get_type == 'float':\n        rhs = float(rhs)\n    elif get_type == 'int':\n        rhs = int(rhs)\n\n    if operator == \"==\":\n        if lhs == rhs:\n            return True\n        return False\n    elif operator == \"!=\":\n        if lhs != rhs:\n                return True\n        return False\n    elif operator == \"&gt;\":\n        if lhs &gt; rhs:\n                return True\n        return False\n    elif operator == \"&lt;\":\n        if lhs &lt; rhs:\n                return True\n        return False\n    elif operator == \"&gt;=\":\n        if lhs &gt;= rhs:\n            return True\n        return False\n    elif operator == \"&lt;=\":\n        if lhs == rhs:\n                return True\n        return False\n    elif operator == \"Is\":\n        if lhs is rhs:\n            return True\n        return False\n    return False\n</code></pre>\n\n<p>It will return <strong>True</strong> or <strong>False</strong> depending on the statement/input.</p>\n\n<h3 id=\"getweeklist\">Get Week List</h3>\n\n<p>It will return all the weeks list from last 1 year (extendable).</p>\n\n<pre><code>from isoweek import Week\n\ndef generate_week():\n    max_week = datetime.datetime.combine(Week.thisweek().thursday(), datetime.time(0,0))\n    min_week = max_week - datetime.timedelta(days=365)\n    _weeks = list()\n    while True:\n        _weeks.append('Week'+str(max_week.isocalendar()[1])+ ' ' +str(max_week.isocalendar()[0])))\n        max_week -= datetime.timedelta(days=7)\n        if max_week &lt;= min_week:\n        break\n\n    return _weeks\n\n#Output&gt;&gt; ['Week2 2015', 'Week1 2015', 'Week52 2014' ....]\n</code></pre>\n\n<h3 id=\"getmonthlist\">Get Month List</h3>\n\n<p>It will return last 12 month's year and month number. Constructed using this SO answer: <a href=\"http://stackoverflow.com/a/6576603/2696165\">http://stackoverflow.com/a/6576603/2696165</a></p>\n\n<pre><code>x = 12\nnow = time.localtime()\nprint([time.localtime(time.mktime((now.tm_year, now.tm_mon - n, 1, 0, 0, 0, 0, 0, 0)))[:2] for n in range(x)])\n\n#Output&gt;&gt; [(2015, 2), (2015, 1), (2014, 12), (2014, 11), (2014, 10), (2014, 9), (2014, 8), (2014, 7), (2014, 6), (2014, 5), (2014, 4), (2014, 3)]\n</code></pre>",
        "id": "13",
        "image": "",
        "language": "en_US",
        "markdown": "I am going to share some useful **Django** tools/functions which are very useful(were for me atleast) to get things done.\n\n###Return any model class and its properties\n\nThis method will return any model class if you have the name of the class. \n\n\n    from django.db import models\n\n    def get_model_description(model_name=None, return_property_list=True):\n        for item in models.get_models(include_auto_created=True):\n            if item.__name__ == model_name:\n                if return_property_list is True:\n                    return item.get_trigger_properties()\n                else:\n                    return item\n        return []\n\n\n\nFor usage, let us think of an example. Let us think, we have a class name 'X', we will get the class instance using it like this:\n\n\n    from usefultools import get_model_descriptor\n\n    model_x = get_model_descriptor(model_name='X')   #will get class\n    model_x_objects = get_model_descriptor(model_name='X').objects.all() #will get all the objects of this class\n\n\n\nAnd for its property:\n\n    from usefultools import get_model_descriptor\n\n    model_x = get_model_descriptor(model_name='X', return_property_list=True)   #will get a list of properties like ['a_property','b_property']\n\n###Distance Calculator\n\nIf you input latitude and longitude of two places, this function will return the distance in between them. Got help from here: http://code.activestate.com/recipes/576779-calculating-distance-between-two-geographic-points/\n\n\n\n    import math\n\n    def distance_calculator(lat1, long1, lat2, long2):\n\n        lat1, long1, lat2, long2 = float(lat1), float(long1), float(lat2), float(long2)\n\n        degrees_to_radians = math.pi/180.0\n\n        phi1 = (90.0 - lat1)*degrees_to_radians\n        phi2 = (90.0 - lat2)*degrees_to_radians\n\n\n        theta1 = long1*degrees_to_radians\n        theta2 = long2*degrees_to_radians\n\n        cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) +\n               math.cos(phi1)*math.cos(phi2))\n        arc = math.acos( cos )\n        distance = arc*6378.1\n          \n        return distance\n\n\nIt will return the distance in KM.\n\n###Dynamic Relational Operations\n\nSuppose we have a sentence like: `'5 is greater than 9'` and check if its true. We could use `eval` to dynamically converty string to python but its highly not recommended. So I tried like this:\n\n\n    def calculate_relational_operation(lhs, rhs, operator):\n        get_type = type(lhs).__name__\n        if get_type == 'str':\n            rhs = str(rhs)\n        elif get_type == 'float':\n            rhs = float(rhs)\n        elif get_type == 'int':\n            rhs = int(rhs)\n\n        if operator == \"==\":\n            if lhs == rhs:\n                return True\n            return False\n        elif operator == \"!=\":\n            if lhs != rhs:\n                    return True\n            return False\n        elif operator == \">\":\n            if lhs > rhs:\n                    return True\n            return False\n        elif operator == \"<\":\n            if lhs < rhs:\n                    return True\n            return False\n        elif operator == \">=\":\n            if lhs >= rhs:\n                return True\n            return False\n        elif operator == \"<=\":\n            if lhs == rhs:\n                    return True\n            return False\n        elif operator == \"Is\":\n            if lhs is rhs:\n                return True\n            return False\n        return False\n\nIt will return **True** or **False** depending on the statement/input.\n\n\n###Get Week List\n\nIt will return all the weeks list from last 1 year (extendable).\n\n    from isoweek import Week\n\n    def generate_week():\n        max_week = datetime.datetime.combine(Week.thisweek().thursday(), datetime.time(0,0))\n        min_week = max_week - datetime.timedelta(days=365)\n        _weeks = list()\n        while True:\n            _weeks.append('Week'+str(max_week.isocalendar()[1])+ ' ' +str(max_week.isocalendar()[0])))\n            max_week -= datetime.timedelta(days=7)\n            if max_week <= min_week:\n            break\n\n        return _weeks\n\n    #Output>> ['Week2 2015', 'Week1 2015', 'Week52 2014' ....]\n\n\n###Get Month List\n\nIt will return last 12 month's year and month number. Constructed using this SO answer: http://stackoverflow.com/a/6576603/2696165\n\n\n    x = 12\n    now = time.localtime()\n    print([time.localtime(time.mktime((now.tm_year, now.tm_mon - n, 1, 0, 0, 0, 0, 0, 0)))[:2] for n in range(x)])\n\n    #Output>> [(2015, 2), (2015, 1), (2014, 12), (2014, 11), (2014, 10), (2014, 9), (2014, 8), (2014, 7), (2014, 6), (2014, 5), (2014, 4), (2014, 3)]\n",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442523701593",
        "published_by": "1",
        "slug": "some-useful-tools-function",
        "status": "published",
        "title": "Some Useful Tools/Function for Django",
        "updated_at": "1442526858861",
        "updated_by": "1",
        "uuid": "1d4a0ff7-f18e-4d0f-a75a-1df83b537740"
    },
    {
        "author_id": "1",
        "created_at": "1442524278926",
        "created_by": "1",
        "featured": "0",
        "html": "<p>I think, Pycharm is <b>THE</b> best IDE for developing python. But unfortunately, the professional edition is not free. But community edition is good enough for doing debugging, integrating GIT etc.<!-- more --></p>\n\n<p>Normally its easy to use the community edition for django and tornado's debugging/running if you know how to configure.</p>\n\n<h3 id=\"django\">Django</h3>\n\n<p>For django's configuration, there is 5 easy steps: </p>\n\n<p><b>First:</b> Go to edit configuration and click on it(like the below pictures).<br/> <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/11.jpg\"> <br />\n<br/> <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/22.jpg\"> <br />\n<br/> <br />\n<b>Second:</b> Click on the <code>(+)</code> mark in top-left corner and add python configuration.<br/> <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/33.jpg\"> <br />\n<br/> <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/66.jpg\"> <br />\n<br/> <br />\n<b>Third:</b> Click on the <strong>Script</strong>, and for django select the <strong>manage.py</strong> which resides on the project directory.<br/> <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/44.jpg\"> <br />\n<br/> <br />\n<b>Fourth:</b> Add <code>runserver</code> as Scripts parameter or any other django commands.<br/> <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/55.jpg\"> <br />\n<br/> <br />\n<b>Fifth:</b> Click Apply and if your python interpreter is correctly configured, then clicking on the run command should run the project, and debugging will work as well.<br/> <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/77.jpg\"></p>\n\n<h3 id=\"tornado\">Tornado</h3>\n\n<p>There is only 1 Step:</p>\n\n<p>Just follow the first and second step from above configuration and click the *.py file you want to run for tornado project in the <strong>Script</strong>, i.e. this file should contain lines like below:</p>\n\n<pre><code>if __name__ == \"__main__\":\n    application.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n</code></pre>\n\n<p>And save and run.</p>\n\n<h3 id=\"pycharm2016\">Pycharm 2016</h3>\n\n<p>In 2016 edition, to add an existing virtual environment to the list of available interpreters</p>\n\n<ol>\n<li><p>In the Project Interpreter page, click <img src=\"https://github.com/ruddra/blog-images/raw/master/E7nvm.png\"> icon.</p></li>\n<li><p>In the drop-down list, choose <strong>Add local</strong>. <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/I226A.png\"></p></li>\n<li><p>In the Select Python Interpreter dialog box that opens, choose the desired Python executable, located inside the virtual environment folder, and click OK.</p></li>\n</ol>\n\n<p>Go to this <a shrefrc=\"https://www.jetbrains.com/help/pycharm/2016.1/adding-existing-virtual-environment.html\">link</a> for more information.</p>",
        "id": "14",
        "image": "",
        "language": "en_US",
        "markdown": "I think, Pycharm is <b>THE</b> best IDE for developing python. But unfortunately, the professional edition is not free. But community edition is good enough for doing debugging, integrating GIT etc.<!-- more -->\n\nNormally its easy to use the community edition for django and tornado's debugging/running if you know how to configure.\n\n###Django\nFor django's configuration, there is 5 easy steps: \n\n<b>First:</b> Go to edit configuration and click on it(like the below pictures).<br/>\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/11.jpg\">\n<br/>\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/22.jpg\">\n<br/>\n<b>Second:</b> Click on the `(+)` mark in top-left corner and add python configuration.<br/>\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/33.jpg\">\n<br/>\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/66.jpg\">\n<br/>\n<b>Third:</b> Click on the **Script**, and for django select the **manage.py** which resides on the project directory.<br/>\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/44.jpg\">\n<br/>\n<b>Fourth:</b> Add `runserver` as Scripts parameter or any other django commands.<br/>\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/55.jpg\">\n<br/>\n<b>Fifth:</b> Click Apply and if your python interpreter is correctly configured, then clicking on the run command should run the project, and debugging will work as well.<br/>\n<img src=\"https://github.com/ruddra/blog-images/raw/master/blog_pycharm_conf/77.jpg\">\n\n###Tornado\n\nThere is only 1 Step:\n\nJust follow the first and second step from above configuration and click the *.py file you want to run for tornado project in the **Script**, i.e. this file should contain lines like below:\n\n\n    if __name__ == \"__main__\":\n        application.listen(8888)\n        tornado.ioloop.IOLoop.current().start()\n\nAnd save and run.\n\n###Pycharm 2016\nIn 2016 edition, to add an existing virtual environment to the list of available interpreters\n\n1. In the Project Interpreter page, click <img src=\"https://github.com/ruddra/blog-images/raw/master/E7nvm.png\"> icon.\n\n2. In the drop-down list, choose **Add local**.\n<img src=\"https://github.com/ruddra/blog-images/raw/master/I226A.png\">\n\n3. In the Select Python Interpreter dialog box that opens, choose the desired Python executable, located inside the virtual environment folder, and click OK.\n\nGo to this <a shrefrc=\"https://www.jetbrains.com/help/pycharm/2016.1/adding-existing-virtual-environment.html\">link</a> for more information.",
        "meta_description": "Normally its easy to use the community edition for django and tornado's debugging/running if you know how to configure.",
        "meta_title": "How to configure Django/Tornado in PyCharm Community Edition",
        "page": "0",
        "published_at": "1442524468814",
        "published_by": "1",
        "slug": "how-to-configure-django-tornado-in-pycharm-community-edition",
        "status": "published",
        "title": "How to configure Django/Tornado in PyCharm Community Edition",
        "updated_at": "1497689800457",
        "updated_by": "1",
        "uuid": "f74811b5-b7e0-4bc8-9228-0d284b04e782"
    },
    {
        "author_id": "1",
        "created_at": "1442524504243",
        "created_by": "1",
        "featured": "0",
        "html": "<p>Here I am going to write a dynamic filter. This filter is made for python 3. It will take query or model class and filter condtion as input, It will return filtered query based on those filter condition.<!--more--></p>\n\n<p>This is constructed using this <a href=\"http://stackoverflow.com/questions/14845196/dynamically-constructing-filters-in-sqlalchemy\">SO</a> answer.</p>\n\n<h3 id=\"function\">Function:</h3>\n\n<pre><code>class DynamicFilter(ModelHelper):\n\n\n    def __init__(self, query=None, model_class=None, filter_condition=None):\n        super().__init__(*args, **kwargs)\n        self.query = query\n        self.model_class = model_class\n        self.filter_condition = filter_condition\n\n\n    def get_query(self):\n        '''\n        Returns query with all the objects\n        :return:\n        '''\n        if not self.query:\n            self.query = self.session.query(self.model_class)\n        return self.query\n\n\n    def filter_query(self, query, filter_condition):\n        '''\n        Return filtered queryset based on condition.\n        :param query: takes query\n        :param filter_condition: Its a list, ie: [(key,operator,value)]\n        operator list:\n            eq for ==\n            lt for &lt;\n            ge for &gt;=\n            in for in_\n            like for like\n            value could be list or a string\n        :return: queryset\n\n        '''\n\n        if query is None:\n            query = self.get_query()\n        model_class = self.get_model_class()  # returns the query's Model\n        for raw in filter_condition:\n            try:\n                key, op, value = raw\n            except ValueError:\n                raise Exception('Invalid filter: %s' % raw)\n            column = getattr(model_class, key, None)\n            if not column:\n                raise Exception('Invalid filter column: %s' % key)\n            if op == 'in':\n                if isinstance(value, list):\n                    filt = column.in_(value)\n                else:\n                    filt = column.in_(value.split(','))\n            else:\n                try:\n                    attr = list(filter(\n                        lambda e: hasattr(column, e % op),\n                        ['%s', '%s_', '__%s__']\n                    ))[0] % op\n                except IndexError:\n                    raise Exception('Invalid filter operator: %s' % op)\n                if value == 'null':\n                    value = None\n                filt = getattr(column, attr)(value)\n            query = query.filter(filt)\n        return query\n\n\n    def return_query(self):\n        return self.filter_query(self.get_query(), self.filter_condition)\n</code></pre>\n\n<h3 id=\"usage\">Usage:</h3>\n\n<pre><code>_filter_condition = [('has_attribute', 'eq', 'attribute_value')]\n\ndynamic_filtered_query_class = DynamicFilter(query=None, model_class=models.user.User,\n                                  filter_condition=_filter_condition,\n                                  )\ndynamic_filtered_query = dynamic_filtered_query_class.return_query()\n</code></pre>\n\n<p>\"model_class\" is the model class you want to run the filter upon.</p>\n\n<p>\"filter_condition\" the conditon you want to implement here. This is based on the following operator list:</p>\n\n<pre><code>    eq for ==\n    lt for &lt;\n    ge for &gt;=\n    in for in_\n    like for like\n    value could be list or a string\n</code></pre>",
        "id": "15",
        "image": "",
        "language": "en_US",
        "markdown": "Here I am going to write a dynamic filter. This filter is made for python 3. It will take query or model class and filter condtion as input, It will return filtered query based on those filter condition.<!--more-->\n\nThis is constructed using this <a href=\"http://stackoverflow.com/questions/14845196/dynamically-constructing-filters-in-sqlalchemy\">SO</a> answer.\n\n###Function:\n\n    class DynamicFilter(ModelHelper):\n\n\n        def __init__(self, query=None, model_class=None, filter_condition=None):\n            super().__init__(*args, **kwargs)\n            self.query = query\n            self.model_class = model_class\n            self.filter_condition = filter_condition\n\n\n        def get_query(self):\n            '''\n            Returns query with all the objects\n            :return:\n            '''\n            if not self.query:\n                self.query = self.session.query(self.model_class)\n            return self.query\n\n\n        def filter_query(self, query, filter_condition):\n            '''\n            Return filtered queryset based on condition.\n            :param query: takes query\n            :param filter_condition: Its a list, ie: [(key,operator,value)]\n            operator list:\n                eq for ==\n                lt for <\n                ge for >=\n                in for in_\n                like for like\n                value could be list or a string\n            :return: queryset\n\n            '''\n\n            if query is None:\n                query = self.get_query()\n            model_class = self.get_model_class()  # returns the query's Model\n            for raw in filter_condition:\n                try:\n                    key, op, value = raw\n                except ValueError:\n                    raise Exception('Invalid filter: %s' % raw)\n                column = getattr(model_class, key, None)\n                if not column:\n                    raise Exception('Invalid filter column: %s' % key)\n                if op == 'in':\n                    if isinstance(value, list):\n                        filt = column.in_(value)\n                    else:\n                        filt = column.in_(value.split(','))\n                else:\n                    try:\n                        attr = list(filter(\n                            lambda e: hasattr(column, e % op),\n                            ['%s', '%s_', '__%s__']\n                        ))[0] % op\n                    except IndexError:\n                        raise Exception('Invalid filter operator: %s' % op)\n                    if value == 'null':\n                        value = None\n                    filt = getattr(column, attr)(value)\n                query = query.filter(filt)\n            return query\n\n\n        def return_query(self):\n            return self.filter_query(self.get_query(), self.filter_condition)\n\n###Usage:\n\n    _filter_condition = [('has_attribute', 'eq', 'attribute_value')]\n\n    dynamic_filtered_query_class = DynamicFilter(query=None, model_class=models.user.User,\n                                      filter_condition=_filter_condition,\n                                      )\n    dynamic_filtered_query = dynamic_filtered_query_class.return_query()\n\n\n\"model_class\" is the model class you want to run the filter upon.\n\n\"filter_condition\" the conditon you want to implement here. This is based on the following operator list:\n\n        eq for ==\n        lt for <\n        ge for >=\n        in for in_\n        like for like\n        value could be list or a string\n",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442524663146",
        "published_by": "1",
        "slug": "dynamically-constructing-filters-based-on-string-input-using-sqlalchemy",
        "status": "published",
        "title": "Dynamically constructing filters based on string input using SQLAlchemy",
        "updated_at": "1442526811846",
        "updated_by": "1",
        "uuid": "541c2a92-5978-4031-96a0-88604f9da8e3"
    },
    {
        "author_id": "1",
        "created_at": "1442524683460",
        "created_by": "1",
        "featured": "0",
        "html": "<p><a href=\"https://django-tables2.readthedocs.org/en/latest/\">Django Tables2</a> is a package which displays table directly from queryset. It shows column header based on object's attribute's name. But if someone wants to override it, how can he/she do that? Here is a easy solution.<!--more--></p>\n\n<p>Suppose we have a model class like this:</p>\n\n<pre><code>class SomeModel(models.Model):\n   somevalue = models.CharField()\n</code></pre>\n\n<p>And we want to show table column <strong>somevalue</strong> to <strong>overridenvalue</strong>  </p>\n\n<h2 id=\"tableclass\">Table Class:</h2>\n\n<pre><code>class SomeTable(tables.Table):\n    def __init__(self, *args, _overriden_value=\"\",**kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.base_columns['somevalue'].verbose_name = _overriden_value\n    class Meta:\n         model = models.SomeModel\n             fields = '__all__'\n</code></pre>\n\n<p>And the Class Based View:</p>\n\n<h2 id=\"viewclass\">View Class</h2>\n\n<pre><code>class SomeView(ListView):\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['sometable'] = SomeTable(SomeModel.objects.all(), _overriden_value=\"overriden value\")\n        return context\n</code></pre>\n\n<p>And template should render that table like this:</p>\n\n<pre><code>{% load render_table from django_tables2 %}\n{% render_table sometable %}\n</code></pre>\n\n<p>Thats it, we shall be able to see our override table column header.</p>",
        "id": "16",
        "image": "",
        "language": "en_US",
        "markdown": "<a href=\"https://django-tables2.readthedocs.org/en/latest/\">Django Tables2</a> is a package which displays table directly from queryset. It shows column header based on object's attribute's name. But if someone wants to override it, how can he/she do that? Here is a easy solution.<!--more-->\n\nSuppose we have a model class like this:\n\n\n    class SomeModel(models.Model):\n       somevalue = models.CharField()\n\nAnd we want to show table column **somevalue** to **overridenvalue** \n##Table Class:\n\n\tclass SomeTable(tables.Table):\n\t    def __init__(self, *args, _overriden_value=\"\",**kwargs):\n\t        super().__init__(*args, **kwargs)\n\t            \n            self.base_columns['somevalue'].verbose_name = _overriden_value\n\t    class Meta:\n\t         model = models.SomeModel\n\t             fields = '__all__'\n\n\nAnd the Class Based View:\n\n##View Class\n\n\tclass SomeView(ListView):\n\t    def get_context_data(self, **kwargs):\n\t        context = super().get_context_data(**kwargs)\n\t        context['sometable'] = SomeTable(SomeModel.objects.all(), _overriden_value=\"overriden value\")\n\t        return context\n\n\n And template should render that table like this:\n\n    {% load render_table from django_tables2 %}\n    {% render_table sometable %}\n\n\n Thats it, we shall be able to see our override table column header.",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442525184315",
        "published_by": "1",
        "slug": "make-a-blog-using-django-part-1",
        "status": "published",
        "title": "Change Column Header Dynamically in Django Tables2",
        "updated_at": "1442525234995",
        "updated_by": "1",
        "uuid": "e3eb6a47-a3c0-4550-9153-d7f62fd598cc"
    },
    {
        "author_id": "1",
        "created_at": "1442525348064",
        "created_by": "1",
        "featured": "0",
        "html": "<p>\"Making a blog using django\" is probably the most made tutorial of Django. This post is no different. But I made this in my own way using some of django's built-in  features so that less coding is required and making it more understandable with minimum packages to use. </p>\n\n<blockquote>  \nTo view the working source of this tutorial, check here at: <a href=\"https://github.com/ruddra/myblog\">https://github.com/ruddra/myblog</a>  \n</blockquote>\n\n<p>Before jumping to the main event, see if you have these installed in your pc:</p>\n\n<pre><code>1. Python 3 installed in the computer. (Or python 2.7 if you prefer)\n\n2. Django 1.7 installed in the computer.\n</code></pre>\n\n<p>Django appears to be a MVC framework, but instead of using the name 'Controller', we call it as 'View' and 'View' as 'Template', Also Django is not a CMS. It’s a Web framework; it’s a programming tool that let’s you build Web sites. Check here for details: <a href=\"https://docs.djangoproject.com/en/dev/faq/general\">SOURCE</a>.</p>\n\n<p>So as we stated before, django appears to be a MVC framework. MVC is a framework for building web applications using a MVC (Model View Controller) design:</p>\n\n<pre><code>1. The Model represents the application core (for instance a list of database records).\n\n2. The View displays the data (the database records).(Here it is called \"Template\")\n\n3. The Controller handles the input (to the database records).(Here it is called \"View\")\n**(copied from here http://www.w3schools.com/aspnet/mvc_intro.asp)\n</code></pre>\n\n<p>Django manipulates data in the database using ORM(Object Relational Model). ORM saves you a lot of time by making the structure of the database, running CRUD(Create Read Update Delete) operations etc. Django ORM builds the structure of the database using the structure of the model. It means, the way you define the model, the way your database structure will be. A model is the single, definitive source of data about your data. It contains the essential fields and behaviors of the data you’re storing. Generally, each model maps to a single database table(<a href=\"https://docs.djangoproject.com/en/dev/topics/db/\">more</a>).</p>\n\n<p>Now let’s start a project named <strong>myproject</strong> in desired directory using this command: <code>django-admin.py startproject myproject</code>. Then, create an app inside the myproject directory using <code>python manage.py startapp myblog</code>. So the structure should look like this:</p>\n\n<pre><code>myproject/\n    manage.py\n    myproject/\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n\n    myblog/\n        __init__.py\n        admin.py\n        migrations/\n            __init__.py\n        models.py\n        tests.py\n        views.py\n</code></pre>\n\n<p>This reusable app is going to be used for making the blog. More about <a href=\"https://docs.djangoproject.com/en/1.7/intro/reusable-apps/\">reusable apps</a>. </p>\n\n<p>Append 'myblog' to <strong>myproject>myproject>settings.py</strong>'s INSTALLED_APP like: </p>\n\n<pre><code>INSTALLED_APPS += (\n    'myblog',\n)\n</code></pre>\n\n<p>Now we start by making a blog by making models. In this project, we are going to display Title, Body, Tags in each post. So for each content in a post, database's table is going to need a field. So in our model, we are going to add those fields to <strong>myproject>myblog>models.py</strong> like:</p>\n\n<pre><code>from django.db import models\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.CharField(max_length=255, null=True, default='')\n\n    def __str__(self):\n        return self.name\n\n\nclass MyBlog(models.Model):\n    title = models.CharField(max_length=255)\n    body = models.CharField(max_length=20000)\n    tags = models.ManyToManyField(Tag)\n\n    def __str__(self):\n        return self.title\n</code></pre>\n\n<p>The reason for making these structure is that:</p>\n\n<ul>\n<li><p><b>title:</b> It is a <a href=\"https://docs.djangoproject.com/en/1.7/ref/models/fields/#django.db.models.CharField\">CharField</a>(Character Field) which can take any kind of input.</p></li>\n<li><p><b>body:</b> It is a <a href=\"https://docs.djangoproject.com/en/1.7/ref/models/fields/#django.db.models.CharField\">CharField</a>(Character Field) which can take any kind of input.</p></li>\n<li><p><b>tags:</b> A <a href=\"https://docs.djangoproject.com/en/1.7/ref/models/fields/#django.db.models.ManyToManyField\">ManyToMany</a> relation with Model Tag, because a blog can be related to multiple tags simillarly a tag can be used to different blogs, hence many to many relation.</p></li>\n</ul>\n\n<p>The model class <strong>Tag</strong> is going to be used for making/displaying tags. Now we have made model for blog, need to use ORM for making Database structure and add aditional data(Why migration is necessary? See <a href=\"https://docs.djangoproject.com/en/1.7/topics/migrations/\">here</a>. So for that, go to <strong>myproject</strong> directory where manage.py resides and run:</p>\n\n<pre><code>$python manage.py makemigrations\n\n$python manage.py migrate\n\n$ python manage.py createsuperuser --username=admin --email=me@ruddra.com\n#it will ask for setting a password\n\n$python manage.py runserver\n# for running the server\n</code></pre>\n\n<p>The third command for making a superuser in the system. The fourth command will run your project in this url: 127.0.0.1:8000(if you don't provide any specific ip/port). Or you can run like this <code>python manage.py runserver 0.0.0.0:8000</code> and it will make your project run in 0.0.0.0:8000 and this is accessible from browser. The webpage will look like this when the project runs successfully:</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/myblog/it_worked.png\"></p>\n\n<p>So you have successfully ran the django site.</p>\n\n<p>Now the database has been made and superuser has been created, so we go the next step, creating blogs. We are going to use django's one of the most powerful and popular feature, django's admin site. For making admin site visible and accessible, you need to add this lines to your urls.py (<strong>myproject>myproject>urls.py</strong>):</p>\n\n<pre><code>from django.conf.urls import patterns, include, url\nfrom django.contrib import admin\nadmin.autodiscover() #this line is for making model visible in admin site\n\n\nurlpatterns = patterns('',\n\n    url(r'^admin/', include(admin.site.urls), name='admin-site'),\n\n)\n</code></pre>\n\n<p>This lines will let you access the django's admin site using this url: 127.0.0.1:8000/admin (if you are running this project in localhost).</p>\n\n<p>Now we need to modify the <strong>admin.py</strong> in <em>myblog</em>'s directory to register the app to admin site.</p>\n\n<pre><code># Location myproject&gt;myblog&gt;admin.py\n# Register your models here.\n\nfrom django.contrib import admin\nfrom django import forms\n\nfrom myblog.models import MyBlog, Tag\n\nadmin.site.register(MyBlog)\nadmin.site.register(Tag)\n</code></pre>\n\n<p>Now your admin site will look like this:</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/myblog/admin_init.png\"></p>\n\n<p>So up-to admin site, the making of blog is complete. Next part will be provided in next post. Cheers!!</p>",
        "id": "17",
        "image": "",
        "language": "en_US",
        "markdown": "\"Making a blog using django\" is probably the most made tutorial of Django. This post is no different. But I made this in my own way using some of django's built-in  features so that less coding is required and making it more understandable with minimum packages to use. \n\n<blockquote>\nTo view the working source of this tutorial, check here at: <a href=\"https://github.com/ruddra/myblog\">https://github.com/ruddra/myblog</a>\n</blockquote>\n\nBefore jumping to the main event, see if you have these installed in your pc:\n\n    1. Python 3 installed in the computer. (Or python 2.7 if you prefer)\n\n    2. Django 1.7 installed in the computer.\n\nDjango appears to be a MVC framework, but instead of using the name 'Controller', we call it as 'View' and 'View' as 'Template', Also Django is not a CMS. It’s a Web framework; it’s a programming tool that let’s you build Web sites. Check here for details: <a href=\"https://docs.djangoproject.com/en/dev/faq/general\">SOURCE</a>.\n\nSo as we stated before, django appears to be a MVC framework. MVC is a framework for building web applications using a MVC (Model View Controller) design:\n\n    1. The Model represents the application core (for instance a list of database records).\n\n    2. The View displays the data (the database records).(Here it is called \"Template\")\n\n    3. The Controller handles the input (to the database records).(Here it is called \"View\")\n    **(copied from here http://www.w3schools.com/aspnet/mvc_intro.asp)\n\nDjango manipulates data in the database using ORM(Object Relational Model). ORM saves you a lot of time by making the structure of the database, running CRUD(Create Read Update Delete) operations etc. Django ORM builds the structure of the database using the structure of the model. It means, the way you define the model, the way your database structure will be. A model is the single, definitive source of data about your data. It contains the essential fields and behaviors of the data you’re storing. Generally, each model maps to a single database table(<a href=\"https://docs.djangoproject.com/en/dev/topics/db/\">more</a>).\n\nNow let’s start a project named **myproject** in desired directory using this command: `django-admin.py startproject myproject`. Then, create an app inside the myproject directory using `python manage.py startapp myblog`. So the structure should look like this:\n\n    myproject/\n        manage.py\n        myproject/\n            __init__.py\n            settings.py\n            urls.py\n            wsgi.py\n\n        myblog/\n            __init__.py\n            admin.py\n            migrations/\n                __init__.py\n            models.py\n            tests.py\n            views.py\n\nThis reusable app is going to be used for making the blog. More about <a href=\"https://docs.djangoproject.com/en/1.7/intro/reusable-apps/\">reusable apps</a>. \n\nAppend 'myblog' to **myproject>myproject>settings.py**'s INSTALLED_APP like: \n\n    INSTALLED_APPS += (\n        'myblog',\n    )\n\nNow we start by making a blog by making models. In this project, we are going to display Title, Body, Tags in each post. So for each content in a post, database's table is going to need a field. So in our model, we are going to add those fields to **myproject>myblog>models.py** like:\n\n\tfrom django.db import models\n\n\tclass Tag(models.Model):\n\t    name = models.CharField(max_length=255)\n\t    description = models.CharField(max_length=255, null=True, default='')\n\n\t    def __str__(self):\n\t        return self.name\n\n\n\tclass MyBlog(models.Model):\n\t    title = models.CharField(max_length=255)\n\t    body = models.CharField(max_length=20000)\n\t    tags = models.ManyToManyField(Tag)\n\n\t    def __str__(self):\n\t        return self.title\n\nThe reason for making these structure is that:\n\n+ <b>title:</b> It is a <a href=\"https://docs.djangoproject.com/en/1.7/ref/models/fields/#django.db.models.CharField\">CharField</a>(Character Field) which can take any kind of input.\n\n+ <b>body:</b> It is a <a href=\"https://docs.djangoproject.com/en/1.7/ref/models/fields/#django.db.models.CharField\">CharField</a>(Character Field) which can take any kind of input.\n\n+ <b>tags:</b> A <a href=\"https://docs.djangoproject.com/en/1.7/ref/models/fields/#django.db.models.ManyToManyField\">ManyToMany</a> relation with Model Tag, because a blog can be related to multiple tags simillarly a tag can be used to different blogs, hence many to many relation.\n\nThe model class **Tag** is going to be used for making/displaying tags. Now we have made model for blog, need to use ORM for making Database structure and add aditional data(Why migration is necessary? See <a href=\"https://docs.djangoproject.com/en/1.7/topics/migrations/\">here</a>. So for that, go to **myproject** directory where manage.py resides and run:\n\n\n    $python manage.py makemigrations\n\n    $python manage.py migrate\n\n    $ python manage.py createsuperuser --username=admin --email=me@ruddra.com\n    #it will ask for setting a password\n\n    $python manage.py runserver\n    # for running the server\n\n\nThe third command for making a superuser in the system. The fourth command will run your project in this url: 127.0.0.1:8000(if you don't provide any specific ip/port). Or you can run like this `python manage.py runserver 0.0.0.0:8000` and it will make your project run in 0.0.0.0:8000 and this is accessible from browser. The webpage will look like this when the project runs successfully:\n\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/myblog/it_worked.png\">\n\nSo you have successfully ran the django site.\n\nNow the database has been made and superuser has been created, so we go the next step, creating blogs. We are going to use django's one of the most powerful and popular feature, django's admin site. For making admin site visible and accessible, you need to add this lines to your urls.py (**myproject>myproject>urls.py**):\n\n\tfrom django.conf.urls import patterns, include, url\n\tfrom django.contrib import admin\n\tadmin.autodiscover() #this line is for making model visible in admin site\n\n\n\turlpatterns = patterns('',\n\n\t    url(r'^admin/', include(admin.site.urls), name='admin-site'),\n\n\t)\n\nThis lines will let you access the django's admin site using this url: 127.0.0.1:8000/admin (if you are running this project in localhost).\n\nNow we need to modify the **admin.py** in *myblog*'s directory to register the app to admin site.\n\n\t# Location myproject>myblog>admin.py\n\t# Register your models here.\n\n\tfrom django.contrib import admin\n\tfrom django import forms\n\n\tfrom myblog.models import MyBlog, Tag\n\n\tadmin.site.register(MyBlog)\n\tadmin.site.register(Tag)\n\nNow your admin site will look like this:\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/myblog/admin_init.png\">\n\nSo up-to admin site, the making of blog is complete. Next part will be provided in next post. Cheers!!\n\n\n\n\n\n\n\n\n\n\n",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442526076717",
        "published_by": "1",
        "slug": "make-a-blog-using-django-part-1-2",
        "status": "published",
        "title": "Make a Blog using Django Part 1",
        "updated_at": "1497693354332",
        "updated_by": "1",
        "uuid": "c4ae006f-0567-4d77-bdd7-78bea28668cd"
    },
    {
        "author_id": "1",
        "created_at": "1442526100362",
        "created_by": "1",
        "featured": "0",
        "html": "<p>From <a href=\"/2015/09/18/make-a-blog-using-django-part-1-2/\">previous post</a>, you have configured and ran django, also added admin site to the django.</p>\n\n<blockquote>  \nTo view the working source of this tutorial, check here at: <a href=\"https://github.com/ruddra/myblog\">https://github.com/ruddra/myblog</a>  \n</blockquote>\n\n<p>Now click on the <strong>myblog</strong> section and click <code>add</code> to add new blog. <br />\nYou can create new tags using Tags section of the admin page or clicking the <code>(+)</code> button right beside the Tags section on the new blog creation page, marked with blue circle in the previous image. After successfully adding a new blog, you can see it in list view page.</p>\n\n<p>Creating new tags is easy, just click on the <strong>Tags</strong> section in the admin page and press <code>add tags</code> button.</p>\n\n<p>Now you have created new blogs and tags. Its time for showing them in templates.</p>\n\n<p>For making data visible in templates, you need to use views to send data to them. let’s use <a href=\"https://docs.djangoproject.com/en/1.7/topics/class-based-views/\">Class Based View(CBV)</a> for that. <a href=\"https://docs.djangoproject.com/en/1.7/ref/class-based-views/generic-display/#listview\">ListView</a> is most appropriate for viewing all blogs in one page as it renders a page representing a list of objects. You can directly use this generic CBV in urls like:</p>\n\n<pre><code>urlpatterns = patterns('',\n    url(r'^admin/', include(admin.site.urls), name='admin-site'),\n    url(r'^$', ListView.as_view(model = MyBlog, template_name = 'blog_list.html'), name='blog_list'),\n    )\n</code></pre>\n\n<p>Here, you need to create a template as well to view the data sent from this view:</p>\n\n<pre><code>&lt;ul&gt;\n    {% for blog in object_list %}\n        &lt;li&gt; {{ blog.title }} &lt;br/&gt;\n        &lt;p&gt; {{ blog.body }} &lt;/p&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</code></pre>\n\n<p>So now if you go to URL: 127.0.0.1:8000, you will see a list of Blogs in there.</p>\n\n<p>Voila!! You can see the posts you are creating in admin site on this page.</p>\n\n<p>Now, for accessing each blog post separately, you can use <a href=\"https://docs.djangoproject.com/en/1.7/topics/class-based-views/\">Class Based View (CBV)</a> for that. You can use <a href=\"https://docs.djangoproject.com/en/1.7/ref/class-based-views/generic-display/#detailview\">DetailView</a> for viewing content of one myblog object. For that, you can directly use it in urls like:</p>\n\n<pre><code># ------------- Models ---------------\nfrom myblog.models import Tag, MyBlog\n# ------------- Generic Views --------\nfrom django.views.generic.list import ListView\nfrom django.views.generic.detail import DetailView\n\n\nurlpatterns = patterns('',\n    url(r'^admin/', include(admin.site.urls), name='admin-site'),\n    url(r'^$', ListView.as_view(model = MyBlog, template_name = 'blog_list.html'), name='blog_list'),\n    url(r'^details/(?P&lt;pk&gt;[0-9]+)/', DetailView.as_view(model = MyBlog, template_name = 'blog_details.html'), name='blog_details'),\n    # Why naming the urls? Check below for usage of named urls\n    )\n\n\n&lt;h2&gt;{{ object.title }}&lt;/h2&gt;\n&lt;p&gt;{{ object.body }}&lt;/p&gt;\n\n&lt;b&gt;Tags:&lt;/b&gt;\n    &lt;p&gt;\n    {% for item in object.tags.all %}\n        {{ item }}\n    {% endfor %}\n    &lt;/p&gt;\n</code></pre>\n\n<p>Blog details can visible to this url: 127.0.0.1:8000/details/1/ . There you should see the details of the Blog you have written before.</p>\n\n<p>Now you can see all the posts and tags separately. Will do some tune-ups in next post. Cheers!!!</p>",
        "id": "18",
        "image": "",
        "language": "en_US",
        "markdown": "From <a href=\"/2015/09/18/make-a-blog-using-django-part-1-2/\">previous post</a>, you have configured and ran django, also added admin site to the django.\n\n<blockquote>\nTo view the working source of this tutorial, check here at: <a href=\"https://github.com/ruddra/myblog\">https://github.com/ruddra/myblog</a>\n</blockquote>\n\nNow click on the **myblog** section and click `add` to add new blog.\nYou can create new tags using Tags section of the admin page or clicking the `(+)` button right beside the Tags section on the new blog creation page, marked with blue circle in the previous image. After successfully adding a new blog, you can see it in list view page.\n\nCreating new tags is easy, just click on the **Tags** section in the admin page and press `add tags` button.\n\nNow you have created new blogs and tags. Its time for showing them in templates.\n\nFor making data visible in templates, you need to use views to send data to them. let’s use <a href=\"https://docs.djangoproject.com/en/1.7/topics/class-based-views/\">Class Based View(CBV)</a> for that. <a href=\"https://docs.djangoproject.com/en/1.7/ref/class-based-views/generic-display/#listview\">ListView</a> is most appropriate for viewing all blogs in one page as it renders a page representing a list of objects. You can directly use this generic CBV in urls like:\n\n\turlpatterns = patterns('',\n\t    url(r'^admin/', include(admin.site.urls), name='admin-site'),\n\t    url(r'^$', ListView.as_view(model = MyBlog, template_name = 'blog_list.html'), name='blog_list'),\n\t    )\n\nHere, you need to create a template as well to view the data sent from this view:\n\n\t<ul>\n\t    {% for blog in object_list %}\n\t        <li> {{ blog.title }} <br/>\n\t        <p> {{ blog.body }} </p>\n\t    {% endfor %}\n\t</ul>\n\nSo now if you go to URL: 127.0.0.1:8000, you will see a list of Blogs in there.\n\nVoila!! You can see the posts you are creating in admin site on this page.\n\nNow, for accessing each blog post separately, you can use <a href=\"https://docs.djangoproject.com/en/1.7/topics/class-based-views/\">Class Based View (CBV)</a> for that. You can use <a href=\"https://docs.djangoproject.com/en/1.7/ref/class-based-views/generic-display/#detailview\">DetailView</a> for viewing content of one myblog object. For that, you can directly use it in urls like:\n\n\t# ------------- Models ---------------\n\tfrom myblog.models import Tag, MyBlog\n\t# ------------- Generic Views --------\n\tfrom django.views.generic.list import ListView\n\tfrom django.views.generic.detail import DetailView\n\n\n\turlpatterns = patterns('',\n\t    url(r'^admin/', include(admin.site.urls), name='admin-site'),\n\t    url(r'^$', ListView.as_view(model = MyBlog, template_name = 'blog_list.html'), name='blog_list'),\n\t    url(r'^details/(?P<pk>[0-9]+)/', DetailView.as_view(model = MyBlog, template_name = 'blog_details.html'), name='blog_details'),\n\t    # Why naming the urls? Check below for usage of named urls\n\t    )\n\n\n    <h2>{{ object.title }}</h2>\n    <p>{{ object.body }}</p>\n\n    <b>Tags:</b>\n        <p>\n        {% for item in object.tags.all %}\n            {{ item }}\n        {% endfor %}\n        </p>\n\nBlog details can visible to this url: 127.0.0.1:8000/details/1/ . There you should see the details of the Blog you have written before.\n\nNow you can see all the posts and tags separately. Will do some tune-ups in next post. Cheers!!!\n\n\n",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1442526730698",
        "published_by": "1",
        "slug": "make-a-blog-using-django-part-2",
        "status": "published",
        "title": "Make a Blog using Django Part 2",
        "updated_at": "1497693477018",
        "updated_by": "1",
        "uuid": "285d9ad5-37d4-472b-810b-fc2b1f8bbe0b"
    },
    {
        "author_id": "1",
        "created_at": "1451835951269",
        "created_by": "1",
        "featured": "0",
        "html": "<p>Today I am going to share how to use <a href=\"scrapy.org\">Scrapy</a> and <a href=\"https://www.djangoproject.com/\">Django</a> together to crawl to a website and store scrapped data to Database using Django.</p>\n\n<p>First, let us build a Django application using the following commands.</p>\n\n<pre><code>pip install django==1.7\ndjango-admin.py startproject example_project\ncd example_project\n</code></pre>\n\n<p>Inside the <code>example_project</code> directory, we will create a django app named <code>app</code>:</p>\n\n<pre><code>python manage.py startapp app\n</code></pre>\n\n<p>Then, we will update the <code>models.py</code> like this:</p>\n\n<pre><code>from django.db import models\n\nclass ExampleDotCom(models.Model):\n    title = models.CharField(max_length=255)\n    description = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.title\n</code></pre>\n\n<p>Now we shall update the <code>admin.py</code> inside the <code>app</code> directory:</p>\n\n<pre><code>from django.contrib import admin\nfrom app.models import ExampleDotCom\n\nadmin.site.register(ExampleDotCom)\n</code></pre>\n\n<p>Update <code>INSTALLED_APPS</code> of <code>settings.py</code> like:</p>\n\n<pre><code>INSTALLED_APPS += ('app',)\n</code></pre>\n\n<p>Now, we will run the following commands in project directory:</p>\n\n<pre><code>python manage.py makemigrations\npython manage.py migrate\npython manage.py createsuperuser\n</code></pre>\n\n<p>The last command will prompt to create a super user for the application. Now we will run the following command:</p>\n\n<pre><code>python manage.py runserver\n</code></pre>\n\n<p>It will start the django application.</p>\n\n<p>Django part is complete for now. Lets start the <strong>scrapy</strong> project.</p>\n\n<p>In separate directory, we will create a scrapy project using the following commands:</p>\n\n<pre><code>pip install Scrapy==1.0.3\nscrapy startproject example_bot\n</code></pre>\n\n<p>To use with Django application from scrapy application, we shall update its <code>settings.py</code> inside <code>example_bot</code> project directory:</p>\n\n<pre><code>import os\nimport sys\n\nDJANGO_PROJECT_PATH = 'YOUR/PATH/TO/DJANGO/PROJECT'\nDJANGO_SETTINGS_MODULE = 'example_project.settings'\n\nsys.path.insert(0, DJANGO_PROJECT_PATH)\nos.environ['DJANGO_SETTINGS_MODULE'] = DJANGO_SETTINGS_MODULE\nBOT_NAME = 'example_bot'\n\nSPIDER_MODULES = ['example_bot.spiders']\n</code></pre>\n\n<p>To connect with django model, we need to install <a href=\"http://doc.scrapy.org/en/0.24/topics/djangoitem.html\">DjangoItem</a> like this:</p>\n\n<pre><code>pip install scrapy-djangoitem==1.0.0\n</code></pre>\n\n<p>Inside <code>example_bot</code> directory, we will update the <code>items.py</code> file like this:</p>\n\n<pre><code>from scrapy_djangoitem import DjangoItem\nfrom app.models import ExampleDotCom\n\nclass ExampleDotComItem(DjangoItem):\n    django_model = ExampleDotCom\n</code></pre>\n\n<p>Now we will create a crawl spider named <code>example.py</code> inside <code>spiders</code> directory:</p>\n\n<pre><code>from scrapy.spiders import BaseSpider\nfrom example_bot.items import ExampleDotComItem\n\nclass ExampleSpider(BaseSpider):\n    name = \"example\"\n    allowed_domains = [\"example.com\"]\n    start_urls = ['http://www.example.com/']\n\n    def parse(self, response):\n         title = response.xpath('//title/text()').extract()[0]\n         description = response.xpath('//body/div/p/text()').extract()[0]\n         return ExampleDotComItem(title=title, description=description)\n</code></pre>\n\n<p>Now we shall create an pipeline class like this inside <code>pipelines.py</code>:</p>\n\n<pre><code>class ExPipeline(object):\n    def process_item(self, item, spider):\n        item.save()\n        return item\n</code></pre>\n\n<p>Now we need to update the <code>settings.py</code> with this:</p>\n\n<pre><code>ITEM_PIPELINES = {\n    'example_bot.pipelines.ExPipeline': 1000,\n}\n</code></pre>\n\n<p>Project structure will be like this:</p>\n\n<pre><code>├── django1.7+scrapy\n│   ├── example_bot\n│   │   ├── __init__.py\n│   │   ├── items.py\n│   │   ├── pipelines.py\n│   │   ├── settings.py\n│   │   └── spiders\n│   │       ├── __init__.py\n│   │       └── example.py \n│   └── scrapy.cfg\n└── example_project\n    ├── manage.py\n    ├── app\n    │   ├── __init__.py\n    │   ├── models.py\n    │   ├── admin.py\n    │   └── views.py\n    └── example_project\n        ├── __init__.py\n        ├── settings.py\n        └── urls.py\n</code></pre>\n\n<p>Now we shall run the application using the following command:</p>\n\n<pre><code>scrapy crawl example\n</code></pre>\n\n<p>Now let us return to the running django application. If everything above is done correctly, then we shall see an object of ExampleDotCom class has been created like the below screenshot in this url <code>http://localhost:8000/admin/app/exampledotcom/</code>:</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/scrap_django1.png\" alt=\"All Objects\" height=\"200\"></p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/scrapy_django2.png\" alt=\"Single Object\" height=\"200\"></p>\n\n<p>Thats all. Up and running django 1.7 + Scrapy project.</p>\n\n<p><strong>Drawbacks:</strong> Only implemented using django 1.7</p>\n\n<p><strong>Source:</strong>  <a href=\"https://github.com/ruddra/django1.7-scrapy1.0.3\">https://github.com/ruddra/django1.7-scrapy1.0.3</a></p>\n\n<p>Got help and clues from this <a href=\"http://stackoverflow.com/questions/19068308/access-django-models-with-scrapy-defining-path-to-django-project\">stackoverflow</a> link.</p>",
        "id": "19",
        "image": "",
        "language": "en_US",
        "markdown": "Today I am going to share how to use <a href=\"scrapy.org\">Scrapy</a> and <a href=\"https://www.djangoproject.com/\">Django</a> together to crawl to a website and store scrapped data to Database using Django.\n\nFirst, let us build a Django application using the following commands.\n\n    pip install django==1.7\n    django-admin.py startproject example_project\n    cd example_project\n\nInside the `example_project` directory, we will create a django app named `app`:\n\n    python manage.py startapp app\n\nThen, we will update the `models.py` like this:\n\n    from django.db import models\n\n    class ExampleDotCom(models.Model):\n        title = models.CharField(max_length=255)\n        description = models.CharField(max_length=255)\n\n        def __str__(self):\n            return self.title\n\nNow we shall update the `admin.py` inside the `app` directory:\n\n    from django.contrib import admin\n    from app.models import ExampleDotCom\n    \n    admin.site.register(ExampleDotCom)\n\nUpdate `INSTALLED_APPS` of `settings.py` like:\n   \n    INSTALLED_APPS += ('app',)\n\nNow, we will run the following commands in project directory:\n\n    python manage.py makemigrations\n    python manage.py migrate\n    python manage.py createsuperuser\n\nThe last command will prompt to create a super user for the application. Now we will run the following command:\n\n    python manage.py runserver\n\nIt will start the django application.\n\nDjango part is complete for now. Lets start the **scrapy** project.\n\nIn separate directory, we will create a scrapy project using the following commands:\n\n    pip install Scrapy==1.0.3\n    scrapy startproject example_bot\n\nTo use with Django application from scrapy application, we shall update its `settings.py` inside `example_bot` project directory:\n\n    import os\n    import sys\n\n    DJANGO_PROJECT_PATH = 'YOUR/PATH/TO/DJANGO/PROJECT'\n    DJANGO_SETTINGS_MODULE = 'example_project.settings'\n    \n    sys.path.insert(0, DJANGO_PROJECT_PATH)\n    os.environ['DJANGO_SETTINGS_MODULE'] = DJANGO_SETTINGS_MODULE\n    BOT_NAME = 'example_bot'\n    \n    SPIDER_MODULES = ['example_bot.spiders']\n    \nTo connect with django model, we need to install <a href=\"http://doc.scrapy.org/en/0.24/topics/djangoitem.html\">DjangoItem</a> like this:\n\n    pip install scrapy-djangoitem==1.0.0\n\nInside `example_bot` directory, we will update the `items.py` file like this:\n\n    from scrapy_djangoitem import DjangoItem\n    from app.models import ExampleDotCom\n\n    class ExampleDotComItem(DjangoItem):\n        django_model = ExampleDotCom\n\nNow we will create a crawl spider named `example.py` inside `spiders` directory:\n\n    from scrapy.spiders import BaseSpider\n    from example_bot.items import ExampleDotComItem\n    \n    class ExampleSpider(BaseSpider):\n        name = \"example\"\n        allowed_domains = [\"example.com\"]\n        start_urls = ['http://www.example.com/']\n    \n        def parse(self, response):\n             title = response.xpath('//title/text()').extract()[0]\n             description = response.xpath('//body/div/p/text()').extract()[0]\n             return ExampleDotComItem(title=title, description=description)\n\nNow we shall create an pipeline class like this inside `pipelines.py`:\n\n    class ExPipeline(object):\n        def process_item(self, item, spider):\n            item.save()\n            return item\n\nNow we need to update the `settings.py` with this:\n\n    ITEM_PIPELINES = {\n        'example_bot.pipelines.ExPipeline': 1000,\n    }\n\nProject structure will be like this:\n\n\n    ├── django1.7+scrapy\n    │   ├── example_bot\n    │   │   ├── __init__.py\n    │   │   ├── items.py\n    │   │   ├── pipelines.py\n    │   │   ├── settings.py\n    │   │   └── spiders\n    │   │       ├── __init__.py\n    │   │       └── example.py \n    │   └── scrapy.cfg\n    └── example_project\n        ├── manage.py\n        ├── app\n        │   ├── __init__.py\n        │   ├── models.py\n        │   ├── admin.py\n        │   └── views.py\n        └── example_project\n            ├── __init__.py\n            ├── settings.py\n            └── urls.py\n\nNow we shall run the application using the following command:\n\n    scrapy crawl example\n\nNow let us return to the running django application. If everything above is done correctly, then we shall see an object of ExampleDotCom class has been created like the below screenshot in this url `http://localhost:8000/admin/app/exampledotcom/`:\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/scrap_django1.png\" alt=\"All Objects\" height=\"200\">\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/scrapy_django2.png\" alt=\"Single Object\" height=\"200\">\n\n\nThats all. Up and running django 1.7 + Scrapy project.\n\n**Drawbacks:** Only implemented using django 1.7\n\n**Source:**  https://github.com/ruddra/django1.7-scrapy1.0.3\n\nGot help and clues from this <a href=\"http://stackoverflow.com/questions/19068308/access-django-models-with-scrapy-defining-path-to-django-project\">stackoverflow</a> link.\n",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1451843546871",
        "published_by": "1",
        "slug": "django-1-7-scrapy",
        "status": "published",
        "title": "Django 1.7 + Scrapy",
        "updated_at": "1497689441268",
        "updated_by": "1",
        "uuid": "3849f4ca-e44a-4bb6-86e9-ff1f9bf908d6"
    },
    {
        "author_id": "1",
        "created_at": "1452439302188",
        "created_by": "1",
        "featured": "0",
        "html": "<p>In this blog, I am going to show how to develop an application by which we can make <strong>.csv</strong> files from MySQL database using Python.</p>\n\n<p>Now, let us start by getting data from Database. Lets say we have a DB names <code>csv_test</code> and it contains a table named <code>test</code> with fields <code>id</code> and <code>name</code>, and for testing purpose let us have some values inserted into it like this:</p>\n\n<pre><code>+------+--------+\n| id   | name   |\n+------+--------+\n|    1 | test_1 |\n|    2 | test_2 |\n|    3 | test_3 |\n+------+--------+\n</code></pre>\n\n<p>Now, to get all data from this table, the SQL command should be: </p>\n\n<pre><code>SELECT * FROM csv_test.test;\n</code></pre>\n\n<p>We shall run this vary command using python like this:</p>\n\n<pre><code>import subprocess\n\ntry:\n    sql_cmd = \"mysql -uroot -proot -e SELECT * FROM csv_test.test;\"\n    results = subprocess.check_output(\n            [sql_cmd], shell=True)\n    print(results)\nexcept Exception as e:\n      print(e)\n</code></pre>\n\n<p>If we run the above command, we shell find a binary string like this:</p>\n\n<pre><code>id    name\n 1    test_1\n 2    test_2\n 3    test_3\n</code></pre>\n\n<p>Actual output will be something like this:</p>\n\n<pre><code>b'id\\tname\\n1\\t\\test_1\\n2\\ttest_2\\n3\\ttest_3'\n</code></pre>\n\n<p>Now we will convert this binary string to unicode string by running this command:</p>\n\n<pre><code>data = results.decode('utf-8')\n</code></pre>\n\n<p>And the <code>data</code> will be like this:</p>\n\n<pre><code>'id\\tname\\n1\\t\\test_1\\n2\\ttest_2\\n3\\ttest_3'\n</code></pre>\n\n<p>So, now we have the MySQL data as string. Now we shall start making <strong>.csv</strong> file out of it.</p>\n\n<p>First, lets make an empty <strong>.csv</strong> file, ie:</p>\n\n<pre><code>filename = 'report_{0}.csv'.format(datetime.datetime.now().strftime('%d-%m-%Y:%H:%M'))\ncsv_out = open(filename, 'w')\n</code></pre>\n\n<p>From the <code>data</code> string, we will start making <strong>.csv</strong> file's contents. Let us split the string in new lines(<code>\\n</code>) and loop through that list, also replace tabs(<code>\\t</code>) with comma(<code>,</code>):</p>\n\n<pre><code>csv_data = ''\nfor item in data.split(`\\n`):\n    csv_data += '{0}\\r\\n'.format(item.replace('\\t', ','))\n</code></pre>\n\n<p>Now we write that <code>csv_data</code> variable to <code>csv_out</code>(empty <strong>.csv</strong> file) like this:</p>\n\n<pre><code>csv_out.write(csv_data)\ncsv_out.close()\n</code></pre>\n\n<p>Thats it, our work is done. We shall see a <strong>.csv</strong> file named <code>REPORT_DD-MM-YYYY:HH:MM:SS.csv</code> in the project directory.</p>\n\n<p><strong>Special Thanks</strong> to this post:  <a href=\"https://redmoses.me/flask-and-shell/\">https://redmoses.me/flask-and-shell/</a> about using MySQL and Flask togather</p>\n\n<p><strong>Source</strong> is here: <a href=\"https://github.com/ruddra/mysql-python-csv\">https://github.com/ruddra/mysql-python-csv</a></p>",
        "id": "20",
        "image": "",
        "language": "en_US",
        "markdown": "In this blog, I am going to show how to develop an application by which we can make **.csv** files from MySQL database using Python.\n\nNow, let us start by getting data from Database. Lets say we have a DB names `csv_test` and it contains a table named `test` with fields `id` and `name`, and for testing purpose let us have some values inserted into it like this:\n    \n    +------+--------+\n    | id   | name   |\n    +------+--------+\n    |    1 | test_1 |\n    |    2 | test_2 |\n    |    3 | test_3 |\n    +------+--------+\n\nNow, to get all data from this table, the SQL command should be: \n\n    SELECT * FROM csv_test.test;\n\nWe shall run this vary command using python like this:\n\n    import subprocess\n\n    try:\n        sql_cmd = \"mysql -uroot -proot -e SELECT * FROM csv_test.test;\"\n        results = subprocess.check_output(\n                [sql_cmd], shell=True)\n        print(results)\n    except Exception as e:\n          print(e)\n\nIf we run the above command, we shell find a binary string like this:\n\n    id\tname\n     1\ttest_1\n     2\ttest_2\n     3\ttest_3\n\nActual output will be something like this:\n\n    b'id\\tname\\n1\\t\\test_1\\n2\\ttest_2\\n3\\ttest_3'\n\nNow we will convert this binary string to unicode string by running this command:\n\n    data = results.decode('utf-8')\n\nAnd the `data` will be like this:\n\n    'id\\tname\\n1\\t\\test_1\\n2\\ttest_2\\n3\\ttest_3'\n\nSo, now we have the MySQL data as string. Now we shall start making **.csv** file out of it.\n\nFirst, lets make an empty **.csv** file, ie:\n\n    filename = 'report_{0}.csv'.format(datetime.datetime.now().strftime('%d-%m-%Y:%H:%M'))\n    csv_out = open(filename, 'w')\n\nFrom the `data` string, we will start making **.csv** file's contents. Let us split the string in new lines(`\\n`) and loop through that list, also replace tabs(`\\t`) with comma(`,`):\n\n\n    csv_data = ''\n    for item in data.split(`\\n`):\n        csv_data += '{0}\\r\\n'.format(item.replace('\\t', ','))\n\n\nNow we write that `csv_data` variable to `csv_out`(empty **.csv** file) like this:\n\n    csv_out.write(csv_data)\n    csv_out.close()\n\nThats it, our work is done. We shall see a **.csv** file named `REPORT_DD-MM-YYYY:HH:MM:SS.csv` in the project directory.\n\n**Special Thanks** to this post:  https://redmoses.me/flask-and-shell/ about using MySQL and Flask togather\n\n**Source** is here: https://github.com/ruddra/mysql-python-csv\n",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1452457409084",
        "published_by": "1",
        "slug": "make-csv-file-using-mysql-and-python",
        "status": "published",
        "title": "Make .CSV file using MySQL and Python",
        "updated_at": "1452457681899",
        "updated_by": "1",
        "uuid": "4b03a7b1-127f-4e44-98a4-fb84ac8b22a5"
    },
    {
        "author_id": "1",
        "created_at": "1453816604469",
        "created_by": "1",
        "featured": "0",
        "html": "<p>Today we are going to see how make OSX notifications from RSS Feed of any website using Python.</p>\n\n<p>So first of all, let us see how to make a simple notification. We are going to use <a href=\"https://en.wikipedia.org/wiki/AppleScript\">AppleScript</a> for this. <br />\nGo to terminal and Type:</p>\n\n<pre><code>&gt;&gt;osascript -e 'display notification \"Lorem ipsum dolor sit amet\" with title \"Title\"'\n</code></pre>\n\n<p>We shall see a notification popping up in right up corner like this: </p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/notification_SS.png\"></p>\n\n<p>Now, we will use this command to pop up notifications using python from rss feeds.</p>\n\n<p>Now, we are going to use <a href=\"https://pypi.python.org/pypi/feedparser\">feedparser</a> library to get feed from a url. For example:</p>\n\n<pre><code>import feedparser \nfeeds = feedparser.parse('https://feedity.com/ruddra-com/VFZQWlFU.rss')  \n\nprint([(x.title, x.id) for x in feeds.entries])\n</code></pre>\n\n<p>It will return a list of tuples containing urls and titles from the feed.</p>\n\n<p>Now we will make an infinite loop and inside the loop we will continuously call the rss feed (will also pause for few moments, no worries) and show notifications:</p>\n\n<pre><code>while True:\n    d = feedparser.parse(rss_url)\n    for ds in d.entries:\n       print (d.id, d.title)\n       time.sleep(5)\n</code></pre>\n\n<p>Now lets build the command for applescript which will put pop ups.</p>\n\n<pre><code>apple_cmd = \"osascript -e '{0}'\"\n\nfor ds in d.entries:\n    base_cmd = 'display notification \"{0}\" with title \"{1}\"'.format(ds.title, \"Foobar\")\n    apple_cmd.format(base_cmd)\n</code></pre>\n\n<p>Thats all we need. Now if we print the <code>apple_cmd</code>, we shall see commands like this:</p>\n\n<pre><code>osascript -e 'display notification \"Foobar Title\" with title \"Foobar\"'\n</code></pre>\n\n<p>Now using python's <code>subprocessor</code> module, we will call these commands:</p>\n\n<pre><code>import subprocessor\n\nsubprocessor.Popen([apple_cmd], shell=True)\n</code></pre>\n\n<p>Also there is one more thing, we need to remove duplicate entries from feed, we don't want to see same notifications twice, or see old notifications on and on and on. So, we will check if the feed is updated like this:</p>\n\n<pre><code>update_time = d.feed.updated\n</code></pre>\n\n<p>We will verify if <code>update_time</code> is greater than previous iteration in while loop. Also, we will store <code>feed id</code> in a list so that we can check if new feed has ids which was already stored in previous iteration.</p>\n\n<p>Finally, the code will look like this:</p>\n\n<pre><code>last_updated_time = None\nwhile True:\n    d = feedparser.parse(rss_url)\n    updated_time = d.feed.updated\n    if updated_time == last_updated_time:\n        print('No new feed')\n    else:\n        last_updated_time = updated_time\n        for entry in d.entries:\n            _id = entry.id\n            if _id in dup_ids:\n                print('Entry already exists')\n            else:\n                dup_ids.append(_id)\n                base_cmd = 'display notification \"{0}\" with title \"{1}\"'.format(_notification, rss_title)\n                cmd = apple_cmd.format(base_cmd)\n                subprocess.Popen([cmd], shell=True)\n            time.sleep(5)\ntime.sleep(5)\n</code></pre>\n\n<p>Thats it, we will see popups of new notifications if feed is updated.</p>\n\n<p>The full working code is here: <a href=\"https://github.com/ruddra/AppleFeedNotifier\">https://github.com/ruddra/AppleFeedNotifier</a></p>\n\n<p>Cheers!</p>",
        "id": "21",
        "image": "",
        "language": "en_US",
        "markdown": "Today we are going to see how make OSX notifications from RSS Feed of any website using Python.\n\nSo first of all, let us see how to make a simple notification. We are going to use <a href=\"https://en.wikipedia.org/wiki/AppleScript\">AppleScript</a> for this.\nGo to terminal and Type:\n\n    >>osascript -e 'display notification \"Lorem ipsum dolor sit amet\" with title \"Title\"'\n\nWe shall see a notification popping up in right up corner like this: \n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/notification_SS.png\">\n\nNow, we will use this command to pop up notifications using python from rss feeds.\n\nNow, we are going to use <a href=\"https://pypi.python.org/pypi/feedparser\">feedparser</a> library to get feed from a url. For example:\n\n    import feedparser \n    feeds = feedparser.parse('https://feedity.com/ruddra-com/VFZQWlFU.rss')  \n\n    print([(x.title, x.id) for x in feeds.entries])\n\n\nIt will return a list of tuples containing urls and titles from the feed.\n\nNow we will make an infinite loop and inside the loop we will continuously call the rss feed (will also pause for few moments, no worries) and show notifications:\n\n\n    while True:\n        d = feedparser.parse(rss_url)\n        for ds in d.entries:\n           print (d.id, d.title)\n           time.sleep(5)\n\nNow lets build the command for applescript which will put pop ups.\n\n    apple_cmd = \"osascript -e '{0}'\"\n\n    for ds in d.entries:\n        base_cmd = 'display notification \"{0}\" with title \"{1}\"'.format(ds.title, \"Foobar\")\n        apple_cmd.format(base_cmd)\n\nThats all we need. Now if we print the `apple_cmd`, we shall see commands like this:\n\n    osascript -e 'display notification \"Foobar Title\" with title \"Foobar\"'\n\n\nNow using python's `subprocessor` module, we will call these commands:\n\n    import subprocessor\n\n    subprocessor.Popen([apple_cmd], shell=True)\n\n\nAlso there is one more thing, we need to remove duplicate entries from feed, we don't want to see same notifications twice, or see old notifications on and on and on. So, we will check if the feed is updated like this:\n\n    update_time = d.feed.updated\n\nWe will verify if `update_time` is greater than previous iteration in while loop. Also, we will store `feed id` in a list so that we can check if new feed has ids which was already stored in previous iteration.\n\nFinally, the code will look like this:\n\n    last_updated_time = None\n    while True:\n        d = feedparser.parse(rss_url)\n        updated_time = d.feed.updated\n        if updated_time == last_updated_time:\n            print('No new feed')\n        else:\n            last_updated_time = updated_time\n            for entry in d.entries:\n                _id = entry.id\n                if _id in dup_ids:\n                    print('Entry already exists')\n                else:\n                    dup_ids.append(_id)\n                    base_cmd = 'display notification \"{0}\" with title \"{1}\"'.format(_notification, rss_title)\n                    cmd = apple_cmd.format(base_cmd)\n                    subprocess.Popen([cmd], shell=True)\n                time.sleep(5)\n    time.sleep(5)\n\nThats it, we will see popups of new notifications if feed is updated.\n\nThe full working code is here: https://github.com/ruddra/AppleFeedNotifier\n\nCheers!\n",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1453818478187",
        "published_by": "1",
        "slug": "make-apple-notifications-from-rss-feed-using-python",
        "status": "published",
        "title": "Make OSX Notifications From RSS Feed Using Python",
        "updated_at": "1497689329634",
        "updated_by": "1",
        "uuid": "192b1c46-408b-421b-847d-a0b90bc82c55"
    },
    {
        "author_id": "1",
        "created_at": "1470750442206",
        "created_by": "1",
        "featured": "1",
        "html": "<p>This post mainly based on this blog: <a href=\"https://docs.docker.com/compose/django/\">https://docs.docker.com/compose/django/</a>.</p>\n\n<p>I will be extending this post by serving django+gunicorn using Nginx, also I will using Postgresql docker container to use it as database.</p>\n\n<p>Lets not waste time and go to the following steps.</p>\n\n<p><strong>1.</strong> Let's make an empty directory named <strong>myproject</strong> and add another folder inside name it <strong>src</strong>. <strong>src</strong> should contain the django project. For testing purpose lets put a simple django project inside named <strong>mydjango</strong>.</p>\n\n<p><strong>2.</strong> Let's create a subdirectory inside <strong>myproject</strong> and name it <strong>config</strong>. Lets put a <code>requirement.pip</code> file inside <strong>config</strong> and write these line in it:</p>\n\n<pre><code>Django==1.10  \ngunicorn==19.6.0  \npsycopg2==2.6.2  \n</code></pre>\n\n<p><strong>3.</strong> Now let's make a <code>Dockerfile</code> inside the <strong>myproject</strong>. This should contain the following lines:</p>\n\n<pre><code>FROM python:3.5  \nENV PYTHONUNBUFFERED 1  \nRUN mkdir /config  \nADD /config/requirements.pip /config/  \nRUN pip install -r /config/requirements.pip  \nRUN mkdir /src;  \nWORKDIR /src  \n</code></pre>\n\n<p>So this Dockerfile starts with a Python 3.5 based image. Then the container is modified by adding the <code>requirement.pip</code> file in <strong>/config</strong> directory within the container and installing the packages from it.</p>\n\n<p><strong>4.</strong> Let's create a file called <code>docker-compose.yml</code> in <strong>myproject</strong> directory.</p>\n\n<p>The <code>docker-compose.yml</code> file describes the services that make your app. Here we need a web service(Django+Gunicorn), A database(Postgres), and Proxy Server(Nginx). It also describes which Docker images these services will use, how they will link together, any volumes they might need mounted inside the containers. Finally, the <code>docker-compose.yml</code> file describes which ports these services expose. See the <a href=\"https://docs.docker.com/compose/compose-file/\">docker-compose.yml</a> reference for more information on how this file works. Don't forget to add <strong>docker-compose</strong> <br />\n to your python environment by running <code>pip install docker-compose</code>.</p>\n\n<p><strong>5.</strong> Let's add the following configuration to the <code>docker-compose.yml</code> file:</p>\n\n<pre><code>version: '2'  \nservices:  \n  nginx:\n    image: nginx:latest\n    container_name: ng01\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./src:/src\n      - ./config/nginx:/etc/nginx/conf.d\n    depends_on:\n      - web\n  web:\n    build: .\n    container_name: dg01\n    command: bash -c \"python manage.py makemigrations &amp;&amp; python manage.py migrate &amp;&amp; gunicorn mydjango.wsgi -b 0.0.0.0:8000\"\n    depends_on:\n      - db\n    volumes:\n      - ./src:/src\n    expose:\n      - \"8000\"\n\n  db:\n    image: postgres:latest\n    container_name: ps01\n</code></pre>\n\n<p>It says that there are three services for this project: <em>nginx, web, db</em>. nginx depends on web, web depends on db. <em>db</em> container uses <a href=\"https://hub.docker.com/_/postgres/\">postgres's latest image</a> from dockerhub. Default username for <em>db</em> is <code>postgres</code> and password is <code>postgres</code> <br />\n<em>web</em> container is build using project's <code>Dockerfile</code>. It mounts <strong>src</strong> directory into it and exposes port 8000. <code>version</code> is being used for <a href=\"https://medium.com/@giorgioto/docker-compose-yml-from-v1-to-v2-3c0f8bb7a48e#.asnbe1ob5\">which format to use to compose</a> the docker file.</p>\n\n<p><em>nginx</em> uses <a href=\"https://hub.docker.com/_/nginx/\">nginx's latest image</a> from dockerhub. This proxy server is accessible from port 8000. It mounts <strong>src</strong> and <strong>config</strong> directory.</p>\n\n<p><strong>6.</strong> Now let's write a <a href=\"http://nginx.org/en/docs/beginners_guide.html\">nginx configuration</a> config file named <code>mydjango.conf</code> inside <strong>myproject</strong>'s config folder and put it in a subdirectory named <strong>nginx</strong>. </p>\n\n<pre><code>upstream web {  \n  ip_hash;\n  server web:8000;\n}\n\n# portal\nserver {  \n  location / {\n        proxy_pass http://web/;\n    }\n  listen 8000;\n  server_name localhost;\n}\n</code></pre>\n\n<p>So what it does that, nginx acts as a reverse proxy for any connections going to django server and all connections goes through nginx to reach django server.</p>\n\n<p>Project Directory should look like this:</p>\n\n<pre><code>── myproject\n    ├── src\n    │   ├── mydjango\n    │   ├── manage.py\n    ├── config\n    │   ├── requirements.pip\n    │   ├── nginx\n    │      ├── mydjango.conf\n    ├── Dockerfile\n    └── docker-compose.yml\n</code></pre>\n\n<p><strong>7.</strong> To communicate from django to postgres, we need to put database configuration in django applications settings file. It should look like this:</p>\n\n<pre><code>DATABASES = {  \n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME': 'postgres',\n        'USER': 'postgres',\n        'HOST': 'db',\n        'PORT': 5432,\n    }\n} \n</code></pre>\n\n<p>\n<strong>8.</strong> All is done. Now lets run <code>docker-compose build</code> in terminal within the project directory. It will build/rebuild(if necessary) all the containers. For first time running the containers, run <code>docker-compose up -d</code>. Lets go to browser and type: <code>localhost:8000</code>. We should see the django application up and running. </p>\n\n<p><strong>9.</strong> For stopping the docker, run <code>docker-compose stop</code>. Re-running docker, use <code>docker-compose start</code>.</p>\n\n<p><strong>10.</strong> For shell accessing.</p>\n\n<pre><code>#Nginx\ndocker exec -ti nginx bash\n\n#Web\ndocker exec -ti web bash\n\n#Database\ndocker exec -ti db bash  \n</code></pre>\n\n<p>For logs:</p>\n\n<pre><code>#Nginx\ndocker-compose logs nginx  \n#Web\ndocker-compose logs web  \n#DB\ndocker-compose logs db  \n</code></pre>\n\n<p>Thats it. You can see an working example here in my repo: <a href=\"https://github.com/ruddra/docker-django\">https://github.com/ruddra/docker-django</a></p>\n\n<p>Also another deployment example for Ruby on rails here: <a href=\"https://github.com/ruddra/deploy-notebook\">https://github.com/ruddra/deploy-notebook</a> <br />\n(Thanks to <a href=\"https://github.com/akimul\">Akimul Islam</a> for the source)</p>\n\n<p><strong>Cheers!!</strong></p>\n\n<h3 id=\"update\">Update:</h3>\n\n<p>Serving django with gunicorn won't allow you to serve static files with it. You need to serve static files seperately. You can follow this post: <a href=\"http://ruddra.com/2016/11/02/serve-static-files-by-nginx-from-django-using-docker/\">http://ruddra.com/2016/11/02/serve-static-files-by-nginx-from-django-using-docker/</a> for how to do serve static files using Nginx from docker.</p>",
        "id": "22",
        "image": "",
        "language": "en_US",
        "markdown": "This post mainly based on this blog: https://docs.docker.com/compose/django/.\n\nI will be extending this post by serving django+gunicorn using Nginx, also I will using Postgresql docker container to use it as database.\n\nLets not waste time and go to the following steps.\n\n**1.** Let's make an empty directory named **myproject** and add another folder inside name it **src**. **src** should contain the django project. For testing purpose lets put a simple django project inside named **mydjango**.\n\n**2.** Let's create a subdirectory inside **myproject** and name it **config**. Lets put a `requirement.pip` file inside **config** and write these line in it:\n\n```\nDjango==1.10\ngunicorn==19.6.0\npsycopg2==2.6.2\n```\n\n**3.** Now let's make a `Dockerfile` inside the **myproject**. This should contain the following lines:\n\n```\nFROM python:3.5\nENV PYTHONUNBUFFERED 1\nRUN mkdir /config\nADD /config/requirements.pip /config/\nRUN pip install -r /config/requirements.pip\nRUN mkdir /src;\nWORKDIR /src\n```\n\nSo this Dockerfile starts with a Python 3.5 based image. Then the container is modified by adding the `requirement.pip` file in **/config** directory within the container and installing the packages from it.\n\n**4.** Let's create a file called `docker-compose.yml` in **myproject** directory.\n\nThe `docker-compose.yml` file describes the services that make your app. Here we need a web service(Django+Gunicorn), A database(Postgres), and Proxy Server(Nginx). It also describes which Docker images these services will use, how they will link together, any volumes they might need mounted inside the containers. Finally, the `docker-compose.yml` file describes which ports these services expose. See the [docker-compose.yml](https://docs.docker.com/compose/compose-file/) reference for more information on how this file works. Don't forget to add **docker-compose**\n to your python environment by running `pip install docker-compose`.\n\n**5.** Let's add the following configuration to the `docker-compose.yml` file:\n\n```\nversion: '2'\nservices:\n  nginx:\n    image: nginx:latest\n    container_name: ng01\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./src:/src\n      - ./config/nginx:/etc/nginx/conf.d\n    depends_on:\n      - web\n  web:\n    build: .\n    container_name: dg01\n    command: bash -c \"python manage.py makemigrations && python manage.py migrate && gunicorn mydjango.wsgi -b 0.0.0.0:8000\"\n    depends_on:\n      - db\n    volumes:\n      - ./src:/src\n    expose:\n      - \"8000\"\n    \n  db:\n    image: postgres:latest\n    container_name: ps01\n```\n\nIt says that there are three services for this project: *nginx, web, db*. nginx depends on web, web depends on db. *db* container uses [postgres's latest image](https://hub.docker.com/_/postgres/) from dockerhub. Default username for *db* is `postgres` and password is `postgres` \n*web* container is build using project's `Dockerfile`. It mounts **src** directory into it and exposes port 8000. `version` is being used for [which format to use to compose](https://medium.com/@giorgioto/docker-compose-yml-from-v1-to-v2-3c0f8bb7a48e#.asnbe1ob5) the docker file.\n\n*nginx* uses [nginx's latest image](https://hub.docker.com/_/nginx/) from dockerhub. This proxy server is accessible from port 8000. It mounts **src** and **config** directory.\n\n**6.** Now let's write a [nginx configuration](http://nginx.org/en/docs/beginners_guide.html) config file named `mydjango.conf` inside **myproject**'s config folder and put it in a subdirectory named **nginx**. \n\n```\nupstream web {\n  ip_hash;\n  server web:8000;\n}\n\n# portal\nserver {\n  location / {\n        proxy_pass http://web/;\n    }\n  listen 8000;\n  server_name localhost;\n}\n```\n\nSo what it does that, nginx acts as a reverse proxy for any connections going to django server and all connections goes through nginx to reach django server.\n\nProject Directory should look like this:\n\n```\n── myproject\n    ├── src\n    │   ├── mydjango\n    │   ├── manage.py\n    ├── config\n    │   ├── requirements.pip\n    │   ├── nginx\n    │      ├── mydjango.conf\n    ├── Dockerfile\n    └── docker-compose.yml\n```\n\n**7.** To communicate from django to postgres, we need to put database configuration in django applications settings file. It should look like this:\n\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME': 'postgres',\n        'USER': 'postgres',\n        'HOST': 'db',\n        'PORT': 5432,\n    }\n} \n\n``` \n**8.** All is done. Now lets run `docker-compose build` in terminal within the project directory. It will build/rebuild(if necessary) all the containers. For first time running the containers, run `docker-compose up -d`. Lets go to browser and type: `localhost:8000`. We should see the django application up and running. \n\n**9.** For stopping the docker, run `docker-compose stop`. Re-running docker, use `docker-compose start`.\n\n**10.** For shell accessing.\n\n```\n#Nginx\ndocker exec -ti nginx bash\n\n#Web\ndocker exec -ti web bash\n\n#Database\ndocker exec -ti db bash\n```\n\nFor logs:\n\n```\n#Nginx\ndocker-compose logs nginx\n#Web\ndocker-compose logs web\n#DB\ndocker-compose logs db\n```\n\nThats it. You can see an working example here in my repo: https://github.com/ruddra/docker-django\n\nAlso another deployment example for Ruby on rails here: https://github.com/ruddra/deploy-notebook\n(Thanks to [Akimul Islam](https://github.com/akimul) for the source)\n\n\n**Cheers!!**\n\n###Update:\nServing django with gunicorn won't allow you to serve static files with it. You need to serve static files seperately. You can follow this post: http://ruddra.com/2016/11/02/serve-static-files-by-nginx-from-django-using-docker/ for how to do serve static files using Nginx from docker.\n\n",
        "meta_description": "Deploy using Docker: Serve Django application using Gunicorn and Nginx and use Postgresql as database.",
        "meta_title": "Django+Gunicorn+NGINX+Postgres Using Docker",
        "page": "0",
        "published_at": "1471163559124",
        "published_by": "1",
        "slug": "docker-django-nginx-postgres",
        "status": "published",
        "title": "Deploy Django, Gunicorn, NGINX, Postgresql using Docker",
        "updated_at": "1479741944741",
        "updated_by": "1",
        "uuid": "3f3f045f-b3b5-47cd-b23e-fd110109bd17"
    },
    {
        "author_id": "1",
        "created_at": "1472293184202",
        "created_by": "1",
        "featured": "0",
        "html": "<p><center> </p>\n\n<p><strong>YO!</strong></p>\n\n<p>I am Arnab Kumar Shil(Ruddra), a developer living in Dhaka, Bangladesh.</p>\n\n<p>Currently I am working as a Software Engineer at <a href=\"http://cefalo.com\">Cefalo Bangladesh Ltd</a>.</p>\n\n<p>I love coding and learning. So I intend to try out stuff which I find interesting.</p>\n\n<p>Python and Javascript are my preferred languages. I have developed apps using frameworks like Django, Tornado, Flask, SQLAlchemy, AngularJs, ReactJs, React Native, Redux etc. I am also into devops stuff as well. Lately, I have tried out Openshift :). Love dockerizing projects.</p>\n\n<p>I am an open source enthusiast. Also, I contribute to StackOverflow and I have more than 6000 reputations.</p>\n\n<p>Love traveling, anime, cycling, ping pong, biking and humour. Ameture Photographer.</p>\n\n<p>Email me with any query at me@ruddra.com</p>\n\n<p></center></p>",
        "id": "23",
        "image": "",
        "language": "en_US",
        "markdown": "<center> \n\n<strong>YO!</strong>\n \nI am Arnab Kumar Shil(Ruddra), a developer living in Dhaka, Bangladesh.\n\nCurrently I am working as a Software Engineer at [Cefalo Bangladesh Ltd](http://cefalo.com).\n\nI love coding and learning. So I intend to try out stuff which I find interesting.\n\nPython and Javascript are my preferred languages. I have developed apps using frameworks like Django, Tornado, Flask, SQLAlchemy, AngularJs, ReactJs, React Native, Redux etc. I am also into devops stuff as well. Lately, I have tried out Openshift :). Love dockerizing projects.\n\nI am an open source enthusiast. Also, I contribute to StackOverflow and I have more than 6000 reputations.\n\nLove traveling, anime, cycling, ping pong, biking and humour. Ameture Photographer.\n\nEmail me with any query at me@ruddra.com\n\n</center>",
        "meta_description": "",
        "meta_title": "",
        "page": "1",
        "published_at": "1472293295799",
        "published_by": "1",
        "slug": "about-me",
        "status": "published",
        "title": "About Me...",
        "updated_at": "1519485628539",
        "updated_by": "1",
        "uuid": "e4ac7c2e-1262-4d62-831f-baaba8439ee9"
    },
    {
        "author_id": "1",
        "created_at": "1478107496393",
        "created_by": "1",
        "featured": "0",
        "html": "<p>This is more of a followup post of my previous <a href=\"http://ruddra.com/2016/08/14/docker-django-nginx-postgres/\">blog</a>. </p>\n\n<p>Before I start, I am assuming you have successfully deployed django using docker &amp; nginx, but having some problems serving static files.</p>\n\n<p>No worries, its easy. Just follow these steps:</p>\n\n<p><strong>1.</strong> In your django <strong>settings.py</strong> file, add static file directory i.e. <code>STATIC_ROOT=/static</code>. So what it will do is, when you run <code>collectstatic</code> command(<code>python manage.py collectstatic</code>), it will store the static files in your <strong>/static</strong> directory of OS.</p>\n\n<p><strong>2.</strong> Now in <code>docker-compose.yml</code> folder, lets add a configuration like this:</p>\n\n<pre><code>version: '2'  \nservices:  \n  nginx:\n    image: nginx:latest\n    container_name: NGINXDOCKERNAME\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./src:/src\n      - ./config/nginx:/etc/nginx/conf.d\n      - /static:/static  &lt;--- HERE\n    depends_on:\n      - web\n  web:\n    build: .\n    container_name: DJANGOXDOCKERNAME\n    command: bash -c \"python manage.py makemigrations &amp;&amp; python manage.py migrate &amp;&amp; gunicorn mydjango.wsgi -b 0.0.0.0:8000\"\n    depends_on:\n      - db\n    volumes:\n      - ./src:/src\n      - /static:/static    &lt;---- HERE\n    expose:\n      - \"8000\"\n\n  db:\n    image: postgres:latest\n    container_name: PSQLDOCKERNAME\n</code></pre>\n\n<p>What it will do is that, two containers <em>web</em> and <em>nginx</em> will share a directory named <strong>/static</strong>.</p>\n\n<p><strong>3.</strong> Now lets add few lines in nginx's config file, i.e <code>mydjango.conf</code>: </p>\n\n<pre><code>upstream web {  \n  ip_hash;\n  server web:8000;\n}\n\nserver {\n\n    location /static/ {    \n        autoindex on;    \n        alias /static/; \n    }\n\n    location / {\n        proxy_pass http://web/;\n    }\n    listen 8001;\n    server_name localhost;\n}\n</code></pre>\n\n<p>So what it will do is, any request to url like <code>yourhost:yourport/static/*</code> this comes to nginx, it will serve data from <code>/static</code> directory.</p>\n\n<p><strong>4.</strong> Now lets run the following command:</p>\n\n<pre><code>docker exec DOCKERNAME /bin/sh -c \"python manage.py collectstatic --noinput\"  \n</code></pre>\n\n<p>It will put static files in <code>/static</code> directory and thats should do the trick. Whenever you hit url with <code>/static</code> will serve static files from that folder. Similarly you can serve media files too. <br />\nCodes have been updated here at: <a href=\"https://github.com/ruddra/docker-django\">https://github.com/ruddra/docker-django</a> <br />\nCheers!!</p>",
        "id": "24",
        "image": "",
        "language": "en_US",
        "markdown": "This is more of a followup post of my previous <a href=\"http://ruddra.com/2016/08/14/docker-django-nginx-postgres/\">blog</a>. \n\nBefore I start, I am assuming you have successfully deployed django using docker & nginx, but having some problems serving static files.\n\nNo worries, its easy. Just follow these steps:\n\n**1.** In your django **settings.py** file, add static file directory i.e. `STATIC_ROOT=/static`. So what it will do is, when you run `collectstatic` command(`python manage.py collectstatic`), it will store the static files in your **/static** directory of OS.\n\n**2.** Now in `docker-compose.yml` folder, lets add a configuration like this:\n\n```\nversion: '2'  \nservices:  \n  nginx:\n    image: nginx:latest\n    container_name: NGINXDOCKERNAME\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./src:/src\n      - ./config/nginx:/etc/nginx/conf.d\n      - /static:/static  <--- HERE\n    depends_on:\n      - web\n  web:\n    build: .\n    container_name: DJANGOXDOCKERNAME\n    command: bash -c \"python manage.py makemigrations && python manage.py migrate && gunicorn mydjango.wsgi -b 0.0.0.0:8000\"\n    depends_on:\n      - db\n    volumes:\n      - ./src:/src\n      - /static:/static    <---- HERE\n    expose:\n      - \"8000\"\n\n  db:\n    image: postgres:latest\n    container_name: PSQLDOCKERNAME\n\n```\n\nWhat it will do is that, two containers *web* and *nginx* will share a directory named **/static**.\n\n**3.** Now lets add few lines in nginx's config file, i.e `mydjango.conf`: \n\n```\nupstream web {  \n  ip_hash;\n  server web:8000;\n}\n\nserver {\n\n    location /static/ {    \n        autoindex on;    \n        alias /static/; \n    }\n\n    location / {\n        proxy_pass http://web/;\n    }\n    listen 8001;\n    server_name localhost;\n}\n```\nSo what it will do is, any request to url like `yourhost:yourport/static/*` this comes to nginx, it will serve data from `/static` directory.\n\n**4.** Now lets run the following command:\n```\ndocker exec DOCKERNAME /bin/sh -c \"python manage.py collectstatic --noinput\"\n```\nIt will put static files in `/static` directory and thats should do the trick. Whenever you hit url with `/static` will serve static files from that folder. Similarly you can serve media files too.\nCodes have been updated here at: https://github.com/ruddra/docker-django \nCheers!!",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1478108967325",
        "published_by": "1",
        "slug": "serve-static-files-by-nginx-from-django-using-docker",
        "status": "published",
        "title": "Serve Static Files by Nginx from Django using Docker",
        "updated_at": "1478109580619",
        "updated_by": "1",
        "uuid": "90da4b0a-2934-4781-814c-60e62406cb42"
    },
    {
        "author_id": "1",
        "created_at": "1479138211336",
        "created_by": "1",
        "featured": "0",
        "html": "<p>In previous two posts, we have deployed Django with Postgres, Nginx, now its time to do some async stuff using Celery. In this post, I will do the magic tricks first, explain them later.</p>\n\n<h3 id=\"addcelerytodjango\">Add Celery to Django</h3>\n\n<p>To add celery, we need make a container for celery. We can re-use the <code>Dockerfile</code> of django for making celery's container like this:  </p>\n\n<pre><code>FROM python:latest  \nENV PYTHONUNBUFFERED 1\n\n#ENV C_FORCE_ROOT true # intentionally kept it commented\n\nENV APP_USER user  \nENV APP_ROOT /src\n\nRUN groupadd -r ${APP_USER} \\  \n    &amp;&amp; useradd -r -m \\\n    --home-dir ${APP_ROOT} \\\n    -s /usr/sbin/nologin \\\n    -g ${APP_USER} ${APP_USER}\n\nWORKDIR ${APP_ROOT}\n\nRUN mkdir /config  \nADD config/requirements.txt /config/  \nRUN pip install -r /config/requirements.txt\n\nUSER ${APP_USER}  \nADD . ${APP_ROOT}\n</code></pre>\n\n<p>Now lets update the <code>docker-compose.yml</code> file to link django with celery, also link redis container to celery.</p>\n\n<pre><code>version: '2'  \nservices:  \n  nginx:\n    image: nginx:latest\n    container_name: nx01\n    ports:\n      - \"8001:8001\"\n    volumes:\n      - ../src:/src\n      - ./static:/static\n      - ./media:/media/\n      - ./config/nginx:/etc/nginx/conf.d\n    depends_on:\n      - web\n  web:\n    build: .\n    container_name: dg01\n    command: gunicorn mydjango.wsgi 0.0.0.0:8000\n\n    depends_on:\n      - db\n    links:\n      - redis\n    volumes:\n      - ../src:/src\n      - ./static:/static\n      - ./media:/media/\n    expose:\n      - \"8001\"\n  db:\n    image: postgres:latest\n    container_name: pq01\n    ports:\n     - \"5432:5432\"\n\n  redis:\n    image: redis:latest\n    container_name: rd01\n    ports:\n     - '6379:6379'\n\n  celery:\n    build: .\n    container_name: cl01\n    command: celery worker --app=app.tasks\n    volumes:\n      - ..:/src\n    links:\n      - db\n      - redis\n</code></pre>\n\n<p>Now in django project, lets add broker url for celery in <code>settings.py</code>:</p>\n\n<pre><code>CELERY_BROKER_URL = 'redis://redis:6379/0'  \nCELERY_RESULT_BACKEND = 'redis://redis:6379/0'  \n</code></pre>\n\n<p>Integration with celery from django is complete. You don't need to read the next section if you already have celery tasks.</p>\n\n<h3 id=\"makeasimpleasynctask\">Make a Simple Async Task</h3>\n\n<p>How to use celery from django? There is an amazing <a href=\"http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html.\">documentation</a> about that on celery's own documentation page.</p>\n\n<p>To make this post post short, I will not get to details, but do basic stuff for making a simple async task using celery.</p>\n\n<p>Lets add a <code>celery.py</code> inside <strong>mydjango>mydjango</strong> directory.</p>\n\n<pre><code>from __future__ import absolute_import, unicode_literals  \nimport os  \nfrom celery import Celery  \nimport logging  \nlogger = logging.getLogger(\"Celery\")\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mydjango.settings')\n\napp = Celery('mydjango')\n\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\napp.autodiscover_tasks()\n\n\n@app.task(bind=True)\ndef debug_task(self):  \n    print('Request: {0!r}'.format(self.request))\n</code></pre>\n\n<p>And create a new app named <code>myapp</code>, add it to django settings:  </p>\n\n<pre><code>INSTALLED_APPS = [  \n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp.apps.MyappConfig',\n    'celery', # Don't forget to add celery\n]\n</code></pre>\n\n<p>Now we need to install <code>celery</code> and <code>redis</code> by using:  </p>\n\n<pre><code>pip install celery  \npip install redis  \n</code></pre>\n\n<p>or we can add them to <strong>config>requirements.pip</strong>.</p>\n\n<p>Now lets add a simple email sending task in <strong>src>mydjango>myapp>tasks.py</strong></p>\n\n<pre><code>from __future__ import absolute_import, unicode_literals\n\nfrom django.conf import settings  \nfrom django.core.mail import EmailMultiAlternatives  \nfrom mydjango.celery import app\n\n\n@app.task\ndef send_email(recipient_list, subject, body, from_address):  \n    if not isinstance(recipient_list, list):\n        recipient_list = [recipient_list]\n    if not from_address:\n        from_address = getattr(settings, 'EMAIL_FROM_ADDRESS')\n\n    msg = EmailMultiAlternatives(subject, body, from_address, recipient_list)\n    msg.send()\n</code></pre>\n\n<p>Also add smtp configuration in your django settings.</p>\n\n<p>Thats it, that should do the trick. Now just run <code>docker-compose build</code> and <code>docker-compose run</code> to make the project running.</p>\n\n<h3 id=\"explanations\">Explanations</h3>\n\n<p>In first step, we have updated <code>Dockerfile</code> which was responsible for building django application's environment. </p>\n\n<pre><code>ENV APP_USER user  \nENV APP_ROOT /src\n\nRUN groupadd -r ${APP_USER} \\  \n    &amp;&amp; useradd -r -m \\\n    --home-dir ${APP_ROOT} \\\n    -s /usr/sbin/nologin \\\n    -g ${APP_USER} ${APP_USER}\n</code></pre>\n\n<p>The above lines have added APP_USER to user group in the environment and <code>APP_ROOT</code> will be home directory and <code>APP_USER</code> doesn't require login. This step is necessary for Celery.</p>\n\n<p>Rest of the file is about creating a directory named <code>src</code> and make it working directory. make <code>config</code> directory, put <code>requirements.pip</code> file in it and install the packages using pip. And Of course, we are pulling from latest python image.</p>\n\n<p>In <code>docker-compose.yml</code>, we have newly added a container named <strong>celery(cl01)</strong>, and it will be built from <code>Dockerfile</code> which resides with <code>docker-compose.yml</code> in same directory. <strong>redis</strong> container will be linked to <strong>celery</strong>, <strong>redis</strong> can be communicable from port 6379.</p>\n\n<p>Now the new <strong>celery</strong> container will be linked to the old <strong>django</strong> container.</p>\n\n<p>celery will run this command: <code>celery worker --app=myapp.tasks</code>, which will execute tasks within an app named myapp.</p>\n\n<h3 id=\"needproofthatthisworks\">Need proof that this works?</h3>\n\n<p>Go to this github <a href=\"https://github.com/ruddra/docker-django\">link</a> and pull and build. Don't forget to update email configurations inside the settings of django.</p>\n\n<p>Checkout previous posts about docker: <br />\n1. <a href=\"http://ruddra.com/2016/08/14/docker-django-nginx-postgres/\">Deploy Django, Gunicorn, NGINX, Postgresql using Docker</a> <br />\n2. <a href=\"http://ruddra.com/2016/11/02/serve-static-files-by-nginx-from-django-using-docker/\">Serve Static Files by Nginx from Django using Docker</a></p>",
        "id": "25",
        "image": "",
        "language": "en_US",
        "markdown": "In previous two posts, we have deployed Django with Postgres, Nginx, now its time to do some async stuff using Celery. In this post, I will do the magic tricks first, explain them later.\n\n###Add Celery to Django\n\nTo add celery, we need make a container for celery. We can re-use the `Dockerfile` of django for making celery's container like this:\n```\nFROM python:latest\nENV PYTHONUNBUFFERED 1\n\n#ENV C_FORCE_ROOT true # intentionally kept it commented\n\nENV APP_USER user\nENV APP_ROOT /src\n\nRUN groupadd -r ${APP_USER} \\\n    && useradd -r -m \\\n    --home-dir ${APP_ROOT} \\\n    -s /usr/sbin/nologin \\\n    -g ${APP_USER} ${APP_USER}\n\nWORKDIR ${APP_ROOT}\n\nRUN mkdir /config\nADD config/requirements.txt /config/\nRUN pip install -r /config/requirements.txt\n\nUSER ${APP_USER}\nADD . ${APP_ROOT}\n\n```\n\nNow lets update the `docker-compose.yml` file to link django with celery, also link redis container to celery.\n\n```\nversion: '2'  \nservices:  \n  nginx:\n    image: nginx:latest\n    container_name: nx01\n    ports:\n      - \"8001:8001\"\n    volumes:\n      - ../src:/src\n      - ./static:/static\n      - ./media:/media/\n      - ./config/nginx:/etc/nginx/conf.d\n    depends_on:\n      - web\n  web:\n    build: .\n    container_name: dg01\n    command: gunicorn mydjango.wsgi 0.0.0.0:8000\n\n    depends_on:\n      - db\n    links:\n      - redis\n    volumes:\n      - ../src:/src\n      - ./static:/static\n      - ./media:/media/\n    expose:\n      - \"8001\"\n  db:\n    image: postgres:latest\n    container_name: pq01\n    ports:\n     - \"5432:5432\"\n\n  redis:\n    image: redis:latest\n    container_name: rd01\n    ports:\n     - '6379:6379'\n\n  celery:\n    build: .\n    container_name: cl01\n    command: celery worker --app=app.tasks\n    volumes:\n      - ..:/src\n    links:\n      - db\n      - redis\n```\n\nNow in django project, lets add broker url for celery in `settings.py`:\n\n```\nCELERY_BROKER_URL = 'redis://redis:6379/0'\nCELERY_RESULT_BACKEND = 'redis://redis:6379/0'\n```\n\nIntegration with celery from django is complete. You don't need to read the next section if you already have celery tasks.\n\n###Make a Simple Async Task\nHow to use celery from django? There is an amazing <a href=\"http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html.\">documentation</a> about that on celery's own documentation page.\n\nTo make this post post short, I will not get to details, but do basic stuff for making a simple async task using celery.\n\nLets add a `celery.py` inside **mydjango>mydjango** directory.\n\n```\nfrom __future__ import absolute_import, unicode_literals\nimport os\nfrom celery import Celery\nimport logging\nlogger = logging.getLogger(\"Celery\")\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mydjango.settings')\n\napp = Celery('mydjango')\n\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\napp.autodiscover_tasks()\n\n\n@app.task(bind=True)\ndef debug_task(self):\n    print('Request: {0!r}'.format(self.request))\n\n```\n\nAnd create a new app named `myapp`, add it to django settings: \n```\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp.apps.MyappConfig',\n    'celery', # Don't forget to add celery\n]\n```\nNow we need to install `celery` and `redis` by using: \n```\npip install celery\npip install redis\n```\nor we can add them to **config>requirements.pip**.\n\nNow lets add a simple email sending task in **src>mydjango>myapp>tasks.py**\n\n```\nfrom __future__ import absolute_import, unicode_literals\n\nfrom django.conf import settings\nfrom django.core.mail import EmailMultiAlternatives\nfrom mydjango.celery import app\n\n\n@app.task\ndef send_email(recipient_list, subject, body, from_address):\n    if not isinstance(recipient_list, list):\n        recipient_list = [recipient_list]\n    if not from_address:\n        from_address = getattr(settings, 'EMAIL_FROM_ADDRESS')\n\n    msg = EmailMultiAlternatives(subject, body, from_address, recipient_list)\n    msg.send()\n```\nAlso add smtp configuration in your django settings.\n\nThats it, that should do the trick. Now just run `docker-compose build` and `docker-compose run` to make the project running.\n\n###Explanations\n\nIn first step, we have updated `Dockerfile` which was responsible for building django application's environment. \n\n```\nENV APP_USER user\nENV APP_ROOT /src\n\nRUN groupadd -r ${APP_USER} \\\n    && useradd -r -m \\\n    --home-dir ${APP_ROOT} \\\n    -s /usr/sbin/nologin \\\n    -g ${APP_USER} ${APP_USER}\n```\n\nThe above lines have added APP_USER to user group in the environment and `APP_ROOT` will be home directory and `APP_USER` doesn't require login. This step is necessary for Celery.\n\nRest of the file is about creating a directory named `src` and make it working directory. make `config` directory, put `requirements.pip` file in it and install the packages using pip. And Of course, we are pulling from latest python image.\n\nIn `docker-compose.yml`, we have newly added a container named **celery(cl01)**, and it will be built from `Dockerfile` which resides with `docker-compose.yml` in same directory. **redis** container will be linked to **celery**, **redis** can be communicable from port 6379.\n\nNow the new **celery** container will be linked to the old **django** container.\n\ncelery will run this command: `celery worker --app=myapp.tasks`, which will execute tasks within an app named myapp.\n\n###Need proof that this works?\nGo to this github <a href=\"https://github.com/ruddra/docker-django\">link</a> and pull and build. Don't forget to update email configurations inside the settings of django.\n\nCheckout previous posts about docker:\n1. <a href=\"http://ruddra.com/2016/08/14/docker-django-nginx-postgres/\">Deploy Django, Gunicorn, NGINX, Postgresql using Docker</a>\n2. <a href=\"http://ruddra.com/2016/11/02/serve-static-files-by-nginx-from-django-using-docker/\">Serve Static Files by Nginx from Django using Docker</a>\n\n",
        "meta_description": "Use Django with Celery in Docker",
        "meta_title": "Docker: Use celery in Django(Redis as Broker)",
        "page": "0",
        "published_at": "1479143414216",
        "published_by": "1",
        "slug": "docker-do-stuff-using-celery-using-redis-as-broker",
        "status": "published",
        "title": "Docker: Use Celery in Django(Redis as Broker)",
        "updated_at": "1487966791431",
        "updated_by": "1",
        "uuid": "4bb517ba-114b-45e5-bd80-77cc921be68e"
    },
    {
        "author_id": "1",
        "created_at": "1487962340652",
        "created_by": "1",
        "featured": "0",
        "html": "<p><a href='https://github.com/ruddra/django-encrypt-file'>Django Encrypt File</a> is a simple Library which can be used to encrypt uploaded files and store them.</p>\n\n<h3 id=\"installation\">Installation</h3>\n\n<p>Use pip to install it:  </p>\n\n<pre><code>pip install djangoencryptfile  \n</code></pre>\n\n<p>Or  </p>\n\n<pre><code>pip install https://github.com/ruddra/django-encrypt-file/tarball/0.7  \n</code></pre>\n\n<h3 id=\"basicusage\">Basic Usage</h3>\n\n<pre><code>from djangoencryptfile import EncryptionService  \nfrom django.core.files import File\n\npassword = '1234'  \nservice = EncryptionService(raise_exception=False)\n\nopen('readme.md', 'rb') as inputfile:  \n    usefile = File(inputfile, name='readme.md')\n    encrypted_file = service.encrypt_file(useFile, password, extension='enc')  # it will save readme.md.enc\n    decrypt_file = service.decrypt_file(encrypted_file, password, extension='.enc') # it will remove .enc extension\n</code></pre>\n\n<h3 id=\"usingintheview\">Using in the View</h3>\n\n<pre><code>from django_encrypt_file import EncryptionService, ValidationError\n\n\ndef some_view(request):  \n   try:\n       myfile = request.FILES.get('myfile', None)\n       password = request.POST.get('password', None)\n       encrypted_file = EncryptionService().encrypt_file(myfile, password, extension='enc')\n       decrypt_file = service.decrypt_file(encrypted_file, password, extension='enc') # it will remove .enc extension\n   except ValidationError as e:\n       print(e)\n</code></pre>\n\n<h3 id=\"advanceexamplewithmodels\">Advance Example(With Models)</h3>\n\n<p>Model defination:  </p>\n\n<pre><code>class MyModel(models.Model):  \n    upload_file = models.FileField(\n        upload_to='tuploaded_file/%Y/%m/%d'\n    )\n</code></pre>\n\n<p>Encrypt View:  </p>\n\n<pre><code>from django_encrypt_file import EncryptionService, ValidationError\n\n\ndef encrypt_view(request):  \n   try:\n       myfile = request.FILES.get('myfile', None)\n       password = request.POST.get('password', None)\n       encrypted_file = EncryptionService().encrypt_file(myfile, password, extension='enc')\n       mymodel = MyModel.objects.create(uploaded_file=encrypted_file)\n   except ValidationError as e:\n       print(e)\n</code></pre>\n\n<p>Decrypt View:  </p>\n\n<pre><code>from django_encrypt_file import EncryptionService, ValidationError\n\n\ndef decrypt_view(request):  \n   try:\n       my_object = MyModel.objects.get(pk=1)\n       myfile = my_object.uploaded_file\n       password = request.POST.get('password', None)\n\n       decrypt_file = service.decrypt_file(encrypted_file, password, extension='enc')\n       my_object.uploaded_file = decrypt_file\n       my_object.save()\n   except ValidationError as e:\n       print(e)\n</code></pre>\n\n<h3 id=\"notes\">Notes</h3>\n\n<p>Input file here can be any kind of Django File Object like <code>models.FileField</code> or <code>forms.FileFiled</code>. <code>raise_exception = True</code> will throw ValidationError error which can be imported from <code>django_encrypt_file import ValidationError</code>.</p>",
        "id": "26",
        "image": "",
        "language": "en_US",
        "markdown": "<a href='https://github.com/ruddra/django-encrypt-file'>Django Encrypt File</a> is a simple Library which can be used to encrypt uploaded files and store them.\n\n###Installation\n\nUse pip to install it:\n```\npip install djangoencryptfile\n```\nOr\n```\npip install https://github.com/ruddra/django-encrypt-file/tarball/0.7\n```\n\n###Basic Usage\n```\nfrom djangoencryptfile import EncryptionService\nfrom django.core.files import File\n\npassword = '1234'\nservice = EncryptionService(raise_exception=False)\n\nopen('readme.md', 'rb') as inputfile:\n    usefile = File(inputfile, name='readme.md')\n    encrypted_file = service.encrypt_file(useFile, password, extension='enc')  # it will save readme.md.enc\n    decrypt_file = service.decrypt_file(encrypted_file, password, extension='.enc') # it will remove .enc extension\n```\n###Using in the View\n```\nfrom django_encrypt_file import EncryptionService, ValidationError\n\n\ndef some_view(request):\n   try:\n       myfile = request.FILES.get('myfile', None)\n       password = request.POST.get('password', None)\n       encrypted_file = EncryptionService().encrypt_file(myfile, password, extension='enc')\n       decrypt_file = service.decrypt_file(encrypted_file, password, extension='enc') # it will remove .enc extension\n   except ValidationError as e:\n       print(e)\n```\n\n###Advance Example(With Models)\n\nModel defination:\n```\nclass MyModel(models.Model):\n    upload_file = models.FileField(\n        upload_to='tuploaded_file/%Y/%m/%d'\n    )\n```\n\nEncrypt View:\n```\nfrom django_encrypt_file import EncryptionService, ValidationError\n\n\ndef encrypt_view(request):\n   try:\n       myfile = request.FILES.get('myfile', None)\n       password = request.POST.get('password', None)\n       encrypted_file = EncryptionService().encrypt_file(myfile, password, extension='enc')\n       mymodel = MyModel.objects.create(uploaded_file=encrypted_file)\n   except ValidationError as e:\n       print(e)\n\n```\n\nDecrypt View:\n```\nfrom django_encrypt_file import EncryptionService, ValidationError\n\n\ndef decrypt_view(request):\n   try:\n       my_object = MyModel.objects.get(pk=1)\n       myfile = my_object.uploaded_file\n       password = request.POST.get('password', None)\n      \n       decrypt_file = service.decrypt_file(encrypted_file, password, extension='enc')\n       my_object.uploaded_file = decrypt_file\n       my_object.save()\n   except ValidationError as e:\n       print(e)\n```\n\n###Notes\nInput file here can be any kind of Django File Object like `models.FileField` or `forms.FileFiled`. `raise_exception = True` will throw ValidationError error which can be imported from `django_encrypt_file import ValidationError`.",
        "meta_description": "<a href='https://github.com/ruddra/django-encrypt-file'>Django Encrypt File</a> is a simple Library which can be used to encrypt uploaded files and store them.",
        "meta_title": "Documentation: Django Encrypt File",
        "page": "0",
        "published_at": "1487963353218",
        "published_by": "1",
        "slug": "documentation-of-django-encrypt-file",
        "status": "published",
        "title": "Documentation Of Django Encrypt File",
        "updated_at": "1487966656408",
        "updated_by": "1",
        "uuid": "5728931f-49af-4c0f-a753-f8b76bf4aadd"
    },
    {
        "author_id": "1",
        "created_at": "1487965180724",
        "created_by": "1",
        "featured": "1",
        "html": "<p>Django and Angular Js, a popular combination for developing web applications. Today I am going to make an example how to use AngularJs with Django. With no further ado, let's jump into it.</p>\n\n<p>Here, we will use Django as the backend system, it will use RESTful APIs to communicate with AngularJs. We will use CSRF TOKENs for Cross-Site Scripting Protection.</p>\n\n<p>We will be building a Movie Database System, and in the process of building, we will learn how to configure Django and angular together.</p>\n\n<h3 id=\"django\">Django</h3>\n\n<p>First, we need to setup Django Application. Let us do that by:  </p>\n\n<pre><code>pip install django  \ndjango-admin.py startproject MovieDatabase  \n</code></pre>\n\n<p>As we have said before, we will use Django only for providing data using RESTful API. We won't be using Django's templating system.</p>\n\n<h4 id=\"djangorestframework\">Django Rest Framework</h4>\n\n<p>For RESTful APIs, we will install Django Rest Framework.  </p>\n\n<pre><code>pip install djangorestframework  \n</code></pre>\n\n<p>And add <code>rest_framework</code> in <code>INSTALLED_APP</code> section of the settings.py:</p>\n\n<pre><code>INSTALLED_APPS = [  \n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.sites',\n    'rest_framework',\n]\n</code></pre>\n\n<p>We will also be using Django Rest Framework's Basic Authentication and Session Authentication.</p>\n\n<pre><code>REST_FRAMEWORK = {  \n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    )\n}\n</code></pre>\n\n<p>DRF configuration is done!! Now we will start working on creating new models for Movie Database System.</p>\n\n<h4 id=\"auths\">Auths</h4>\n\n<p>We need a user app which will contain User model, view, URL and RESTful API related codes. FYI: we will be using our own user model instead of Django's.</p>\n\n<pre><code>django-admin.py startapp auths  \n</code></pre>\n\n<p>Inside <code>auths</code> directory, there should be a <code>models.py</code> file. Let's update it:</p>\n\n<pre><code># models.py\nfrom django.db import models  \nfrom django.contrib.auth.base_user import BaseUserManager, AbstractBaseUser\n\n\nclass User(AbstractBaseUser, models.Model):  \n    email = models.EmailField(\n        verbose_name='email address',\n        max_length=255,\n        unique=True,\n    )\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    is_superuser = models.BooleanField(default=False)\n    first_name = models.CharField(\n        verbose_name=\"First Name\",\n        max_length=14,\n        null=True,\n        default=None\n    )\n    last_name = models.CharField(\n        verbose_name=\"Last Name\",\n        max_length=14,\n        null=True,\n        default=None\n    )\n\n    objects = UserManager()\n    USERNAME_FIELD = 'email'\n\n    def get_full_name(self):\n        # The user is identified by their email address\n        return '{} {}'.format(self.first_name, self.last_name)\n\n    def get_short_name(self):\n        # The user is identified by their email address\n        return self.email\n\n    def __str__(self):  # __unicode__ on Python 2\n        return self.email\n\n    def has_perm(self, perm, obj=None):\n        # Simplest possible answer: Yes, always\n        return True\n\n    def has_module_perms(self, app_label):\n        # Simplest possible answer: Yes, always\n        return True\n\n    class Meta:\n        db_table = 'user'\n        app_label = 'user'\n        verbose_name = 'User'\n        verbose_name_plural = 'Users'\n\n\nclass UserManager(BaseUserManager):  \n    def _create_user(self, email, password, first_name=None, last_name=None, **extra_fields):\n        \"\"\"\n        Creates and saves a User with the given username, email and password.\n        \"\"\"\n        if not email:\n            raise ValueError(_('User must have an email address'))\n        email = self.normalize_email(email)\n        user = self.model(email=email, first_name=first_name, last_name=last_name, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_user(self, email, password=None, first_name=None, last_name=None, **extra_fields):\n        extra_fields.setdefault('is_staff', False)\n        extra_fields.setdefault('is_superuser', False)\n        extra_fields.setdefault('is_active', False)\n\n        return self._create_user(email, password, first_name, last_name, **extra_fields)\n\n    def create_superuser(self, email, password, **extra_fields):\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', True)\n\n        if extra_fields.get('is_staff') is not True:\n            raise ValueError(_('Superuser must have is_staff=True.'))\n        if extra_fields.get('is_superuser') is not True:\n            raise ValueError(_('Superuser must have is_superuser=True.'))\n\n        return self._create_user(email, password, **extra_fields)\n</code></pre>\n\n<p>Now let's work on creating a <a href='http://www.django-rest-framework.org/api-guide/serializers/'>Serializer</a>, which will allow a user to log in into the system.</p>\n\n<pre><code># serializers.py\nfrom rest_framework import serializers\n\n\nclass UserLoginSerializer(serializers.Serializer):  \n    email = serializers.CharField(required=True)\n    password = serializers.CharField(required=True)\n</code></pre>\n\n<p>A view associated with it to use the Login Serializer  </p>\n\n<pre><code># views.py\nfrom django.contrib.auth import authenticate, login  \nfrom django.utils.decorators import method_decorator  \nfrom django.views.decorators.csrf import csrf_protect  \nfrom rest_framework import status  \nfrom rest_framework.generics import CreateAPIView  \nfrom rest_framework.response import Response\n\nfrom auths.serializers import UserLoginSerializer\n\n\nclass UserLoginView(CreateAPIView):  \n    serializer_class = UserLoginSerializer\n\n    @method_decorator(csrf_protect)\n    def post(self, request, *args, **kwargs):\n        try:\n            serializer = self.get_serializer(data=request.data)\n            if serializer.is_valid():\n                email = serializer.data['email']\n                password = serializer.data['password']\n                user = authenticate(username=email, password=password)\n                if user is not None and user.is_active:\n                    login(request, user)\n                    return Response({\n                        'message': \"Login successful\"\n                    }, status=status.HTTP_200_OK)\n                else:\n                    return Response(\n                        data={'message': 'Username and Password does not match or'\n                                         ' user has not been activated'\n                              }, status=status.HTTP_401_UNAUTHORIZED)\n            else:\n                return Response(serializer.errors,\n                                status=status.HTTP_400_BAD_REQUEST)\n\n        except Exception as e:\n            return Response(data={'message': str(e)}, status=status.HTTP_401_UNAUTHORIZED)\n</code></pre>\n\n<p>An URL to connect to the view:  </p>\n\n<pre><code>#urls.py\n\nurlpatterns = [  \n    url(r'^login/$', UserLoginView.as_view()),\n]\n</code></pre>\n\n<p>Also lets make a registration API for registering user. For that, we need create serializer/view/urls:</p>\n\n<pre><code># Registration serializer\nlass UserRegisterSerializer(serializers.Serializer):  \n    email = serializers.CharField(required=True)\n    password = serializers.CharField(required=True)\n    first_name = serializers.CharField(required=True)\n    last_name = serializers.CharField(required=True)\n</code></pre>\n\n<p>Now let's update <strong>views.py</strong> with registration codes.  </p>\n\n<pre><code># Registration view\nclass UserRegisterView(CreateAPIView):  \n    serializer_class = UserRegisterSerializer\n\n    @method_decorator(csrf_protect)\n    def post(self, request, *args, **kwargs):\n        try:\n            serializer = self.get_serializer(data=request.data)\n            if serializer.is_valid():\n                email = serializer.data['email']\n                password = serializer.data['password']\n                first_name = serializer.data['first_name']\n                last_name = serializer.data['last_name']\n                user = User.objects.create_user(email, password, first_name, last_name, is_active=True)\n                response_data = {\n                    'message': \"User {} has been created\".format(user.get_username())\n                }\n                return Response(data=response_data, status=status.HTTP_201_CREATED)\n            else:\n                return Response(data={'message': serializer.errors}, status=status.HTTP_400_BAD_REQUEST)\n\n        except Exception as e:\n            return Response(data=\"Internal Server Error\", status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n</code></pre>\n\n<p>And update <strong>urls.py</strong> for accessing the view:</p>\n\n<pre><code>urlpatterns += [  \nurl(r'^register/$', UserRegisterView.as_view(), name='user-register'),  \n]\n</code></pre>\n\n<p>Also let's add another view for logout:  </p>\n\n<pre><code>class UserLogoutView(APIView):  \n    def get(self, request, *args, **kwargs):\n        logout(request)\n        return Response({'message': 'logged out'}, status=status.HTTP_200_OK)\n</code></pre>\n\n<p>Also update the urls:  </p>\n\n<pre><code>urlpatterns += [  \n    url(r'^logout/$', UserLogoutView.as_view()),\n]\n</code></pre>\n\n<p>For our custom authentication, we need to put the following code in <strong>settings.py</strong>:  </p>\n\n<pre><code>AUTH_USER_MODEL = 'auths.User'  \n</code></pre>\n\n<p>Our Login and Registration API is complete.</p>\n\n<h4 id=\"movies\">Movies</h4>\n\n<p>Now let's add another app which will contain Movie Informations. Let's call it movies:  </p>\n\n<pre><code>django-admin.py startapp movies  \n</code></pre>\n\n<p>Inside movies, <strong>models.py</strong> will have following fields:  </p>\n\n<pre><code>from __future__ import unicode_literals\n\nfrom decimal import Decimal  \nfrom django.db import models\n\n\nclass Movie(models.Model):  \n    title = models.CharField(\n        verbose_name='Movie Title',\n        max_length=255\n    )\n    genre = models.CharField(\n        max_length = 255,\n        verbose_name='Genre'\n    )\n    rating = models.DecimalField(\n        verbose_name='Rating out of 10',\n        default=Decimal(0),\n        max_digits=5,\n        decimal_places=2\n    )\n    description = models.TextField(\n        verbose_name='Description',\n        max_length=1000\n    )\n\n    class Meta:\n        db_table = 'movie'\n        app_label = 'movies'\n        verbose_name = 'Movie'\n        verbose_name_plural = 'Movies'\n</code></pre>\n\n<p>Rather than writing multiple views for different http methods(get/post/put/delete), let's use a <a href='http://www.django-rest-framework.org/api-guide/viewsets/'>viewset</a>. For that, first we need to create a serializer for Movie Data:  </p>\n\n<pre><code>from rest_framework import serializers\n\nfrom movies.models import Movie\n\n\nclass MovieSerializer(serializers.ModelSerializer):  \n    class Meta:\n        model = Movie\n        fields = '__all__'\n</code></pre>\n\n<p>And the viewset:  </p>\n\n<pre><code># Views\nfrom rest_framework import viewsets  \nfrom rest_framework.permissions import IsAuthenticated\n\nfrom movies.models import Movie  \nfrom movies.serializers import MovieSerializer\n\n\nclass MovieViewSet(viewsets.ModelViewSet):  \n    \"\"\"\n    A viewset for viewing and editing movie instances.\n    \"\"\"\n    serializer_class = MovieSerializer\n    permission_classes = (IsAuthenticated,)\n    queryset = Movie.objects.all()\n</code></pre>\n\n<p>Urls for <strong>viewset</strong>:  </p>\n\n<pre><code># Urls\nfrom movies.views import MovieViewSet  \nfrom rest_framework.routers import DefaultRouter\n\nrouter = DefaultRouter()  \nrouter.register(r'movies', MovieViewSet)  \nurlpatterns = router.urls\n</code></pre>\n\n<p>Now let's add these two apps(auths, movies) to <code>INSTALLED_APPS</code> in <strong>settings.py</strong>.</p>\n\n<pre><code>INSTALLED_APPS += [  \n    'auths.apps.AuthsConfig',\n    'movies.apps.MoviesConfig',\n]\n</code></pre>\n\n<p>And update <strong>urls.py</strong> beside <strong>settings.py</strong></p>\n\n<pre><code>from django.conf.urls import url, include  \nfrom django.contrib import admin\n\nurlpatterns = [  \n    url(r'^admin/', admin.site.urls),\n    url(r'^api/', include('auths.urls', namespace='auths')),\n    url(r'^api/', include('movies.urls', namespace='movies')),\n\n]\n</code></pre>\n\n<h4 id=\"projectstructureandsettings\">Project Structure and Settings</h4>\n\n<p>So far the django application structure is like this:  </p>\n\n<pre><code>project  \n|-- MovieDatabase\n|   |-- __init__.py\n|   |-- local_settings.py\n|   |-- settings.py\n|   |-- urls.py\n|   `-- wsgi.py\n|-- manage.py\n|--auths\n|   |-- __init__.py\n|   |-- admin.py\n|   |-- apps.py\n|   |-- models.py\n|   |-- serializers.py\n|   |-- urls.py\n|   |-- views.py\n|   |-- migrations\n|       |-- __init__.py\n|       |-- 0001__initial.py\n|--movies\n|   |-- __init__.py\n|   |-- admin.py\n|   |-- apps.py\n|   |-- models.py\n|   |-- serializers.py\n|   |-- urls.py\n|   |-- views.py\n|   |-- migrations\n|       |-- __init__.py\n|       |-- 0001__initial.py\n</code></pre>\n\n<p>We will be putting our frontend apps outside of Django application, so let's update the settings:</p>\n\n<pre><code>STATIC_URL = '/static/'  \nSTATIC_ROOT = '../Frontend'  \n</code></pre>\n\n<p>Also update template settings:  </p>\n\n<pre><code>TEMPLATES = [  \n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            './templates'\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n</code></pre>\n\n<p>So overall Project Structure is like this:</p>\n\n<pre><code>DjangoAngular  \n  |- project\n  |- Frontend\n  |- Docker(containing docker configurations)\n</code></pre>\n\n<p>Now we will be building the Angular Applications inside Frontend in next tutorial.</p>\n\n<p>Cheers!!</p>\n\n<p><strong>FYI: Source for tutorial: <a href=\"https://github.com/ruddra/django-angular\">https://github.com/ruddra/django-angular</a></strong></p>",
        "id": "27",
        "image": "",
        "language": "en_US",
        "markdown": "Django and Angular Js, a popular combination for developing web applications. Today I am going to make an example how to use AngularJs with Django. With no further ado, let's jump into it.\n\nHere, we will use Django as the backend system, it will use RESTful APIs to communicate with AngularJs. We will use CSRF TOKENs for Cross-Site Scripting Protection.\n\nWe will be building a Movie Database System, and in the process of building, we will learn how to configure Django and angular together.\n\n###Django\n\nFirst, we need to setup Django Application. Let us do that by:\n```\npip install django\ndjango-admin.py startproject MovieDatabase\n```\nAs we have said before, we will use Django only for providing data using RESTful API. We won't be using Django's templating system.\n\n\n####Django Rest Framework\nFor RESTful APIs, we will install Django Rest Framework.\n```\npip install djangorestframework\n```\nAnd add `rest_framework` in `INSTALLED_APP` section of the settings.py:\n\n```\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.sites',\n    'rest_framework',\n]\n```\nWe will also be using Django Rest Framework's Basic Authentication and Session Authentication.\n\n```\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    )\n}\n```\nDRF configuration is done!! Now we will start working on creating new models for Movie Database System.\n\n####Auths\nWe need a user app which will contain User model, view, URL and RESTful API related codes. FYI: we will be using our own user model instead of Django's.\n\n```\ndjango-admin.py startapp auths\n```\n\nInside `auths` directory, there should be a `models.py` file. Let's update it:\n\n```\n# models.py\nfrom django.db import models\nfrom django.contrib.auth.base_user import BaseUserManager, AbstractBaseUser\n\n\nclass User(AbstractBaseUser, models.Model):\n    email = models.EmailField(\n        verbose_name='email address',\n        max_length=255,\n        unique=True,\n    )\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    is_superuser = models.BooleanField(default=False)\n    first_name = models.CharField(\n        verbose_name=\"First Name\",\n        max_length=14,\n        null=True,\n        default=None\n    )\n    last_name = models.CharField(\n        verbose_name=\"Last Name\",\n        max_length=14,\n        null=True,\n        default=None\n    )\n\n    objects = UserManager()\n    USERNAME_FIELD = 'email'\n\n    def get_full_name(self):\n        # The user is identified by their email address\n        return '{} {}'.format(self.first_name, self.last_name)\n\n    def get_short_name(self):\n        # The user is identified by their email address\n        return self.email\n\n    def __str__(self):  # __unicode__ on Python 2\n        return self.email\n\n    def has_perm(self, perm, obj=None):\n        # Simplest possible answer: Yes, always\n        return True\n\n    def has_module_perms(self, app_label):\n        # Simplest possible answer: Yes, always\n        return True\n\n    class Meta:\n        db_table = 'user'\n        app_label = 'user'\n        verbose_name = 'User'\n        verbose_name_plural = 'Users'\n\n\nclass UserManager(BaseUserManager):\n    def _create_user(self, email, password, first_name=None, last_name=None, **extra_fields):\n        \"\"\"\n        Creates and saves a User with the given username, email and password.\n        \"\"\"\n        if not email:\n            raise ValueError(_('User must have an email address'))\n        email = self.normalize_email(email)\n        user = self.model(email=email, first_name=first_name, last_name=last_name, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_user(self, email, password=None, first_name=None, last_name=None, **extra_fields):\n        extra_fields.setdefault('is_staff', False)\n        extra_fields.setdefault('is_superuser', False)\n        extra_fields.setdefault('is_active', False)\n\n        return self._create_user(email, password, first_name, last_name, **extra_fields)\n\n    def create_superuser(self, email, password, **extra_fields):\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', True)\n\n        if extra_fields.get('is_staff') is not True:\n            raise ValueError(_('Superuser must have is_staff=True.'))\n        if extra_fields.get('is_superuser') is not True:\n            raise ValueError(_('Superuser must have is_superuser=True.'))\n\n        return self._create_user(email, password, **extra_fields)\n\n```\n\nNow let's work on creating a <a href='http://www.django-rest-framework.org/api-guide/serializers/'>Serializer</a>, which will allow a user to log in into the system.\n\n```\n# serializers.py\nfrom rest_framework import serializers\n\n\nclass UserLoginSerializer(serializers.Serializer):\n    email = serializers.CharField(required=True)\n    password = serializers.CharField(required=True)\n```\nA view associated with it to use the Login Serializer\n```\n# views.py\nfrom django.contrib.auth import authenticate, login\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.csrf import csrf_protect\nfrom rest_framework import status\nfrom rest_framework.generics import CreateAPIView\nfrom rest_framework.response import Response\n\nfrom auths.serializers import UserLoginSerializer\n\n\nclass UserLoginView(CreateAPIView):\n    serializer_class = UserLoginSerializer\n\n    @method_decorator(csrf_protect)\n    def post(self, request, *args, **kwargs):\n        try:\n            serializer = self.get_serializer(data=request.data)\n            if serializer.is_valid():\n                email = serializer.data['email']\n                password = serializer.data['password']\n                user = authenticate(username=email, password=password)\n                if user is not None and user.is_active:\n                    login(request, user)\n                    return Response({\n                        'message': \"Login successful\"\n                    }, status=status.HTTP_200_OK)\n                else:\n                    return Response(\n                        data={'message': 'Username and Password does not match or'\n                                         ' user has not been activated'\n                              }, status=status.HTTP_401_UNAUTHORIZED)\n            else:\n                return Response(serializer.errors,\n                                status=status.HTTP_400_BAD_REQUEST)\n\n        except Exception as e:\n            return Response(data={'message': str(e)}, status=status.HTTP_401_UNAUTHORIZED)\n\n```\nAn URL to connect to the view:\n```\n#urls.py\n\nurlpatterns = [\n    url(r'^login/$', UserLoginView.as_view()),\n]\n\n```\n\nAlso lets make a registration API for registering user. For that, we need create serializer/view/urls:\n\n```\n# Registration serializer\nlass UserRegisterSerializer(serializers.Serializer):\n    email = serializers.CharField(required=True)\n    password = serializers.CharField(required=True)\n    first_name = serializers.CharField(required=True)\n    last_name = serializers.CharField(required=True)\n\n```\nNow let's update **views.py** with registration codes.\n```\n# Registration view\nclass UserRegisterView(CreateAPIView):\n    serializer_class = UserRegisterSerializer\n\n    @method_decorator(csrf_protect)\n    def post(self, request, *args, **kwargs):\n        try:\n            serializer = self.get_serializer(data=request.data)\n            if serializer.is_valid():\n                email = serializer.data['email']\n                password = serializer.data['password']\n                first_name = serializer.data['first_name']\n                last_name = serializer.data['last_name']\n                user = User.objects.create_user(email, password, first_name, last_name, is_active=True)\n                response_data = {\n                    'message': \"User {} has been created\".format(user.get_username())\n                }\n                return Response(data=response_data, status=status.HTTP_201_CREATED)\n            else:\n                return Response(data={'message': serializer.errors}, status=status.HTTP_400_BAD_REQUEST)\n\n        except Exception as e:\n            return Response(data=\"Internal Server Error\", status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n```\n\nAnd update **urls.py** for accessing the view:\n\n```\nurlpatterns += [\nurl(r'^register/$', UserRegisterView.as_view(), name='user-register'),\n]\n```\nAlso let's add another view for logout:\n```\nclass UserLogoutView(APIView):\n    def get(self, request, *args, **kwargs):\n        logout(request)\n        return Response({'message': 'logged out'}, status=status.HTTP_200_OK)\n```\nAlso update the urls:\n```\nurlpatterns += [\n    url(r'^logout/$', UserLogoutView.as_view()),\n]\n```\nFor our custom authentication, we need to put the following code in **settings.py**:\n```\nAUTH_USER_MODEL = 'auths.User'\n```\n\nOur Login and Registration API is complete.\n\n####Movies\n\nNow let's add another app which will contain Movie Informations. Let's call it movies:\n```\ndjango-admin.py startapp movies\n```\nInside movies, **models.py** will have following fields:\n```\nfrom __future__ import unicode_literals\n\nfrom decimal import Decimal\nfrom django.db import models\n\n\nclass Movie(models.Model):\n    title = models.CharField(\n        verbose_name='Movie Title',\n        max_length=255\n    )\n    genre = models.CharField(\n        max_length = 255,\n        verbose_name='Genre'\n    )\n    rating = models.DecimalField(\n        verbose_name='Rating out of 10',\n        default=Decimal(0),\n        max_digits=5,\n        decimal_places=2\n    )\n    description = models.TextField(\n        verbose_name='Description',\n        max_length=1000\n    )\n    \n    class Meta:\n        db_table = 'movie'\n        app_label = 'movies'\n        verbose_name = 'Movie'\n        verbose_name_plural = 'Movies'\n\n```\n\nRather than writing multiple views for different http methods(get/post/put/delete), let's use a <a href='http://www.django-rest-framework.org/api-guide/viewsets/'>viewset</a>. For that, first we need to create a serializer for Movie Data:\n```\nfrom rest_framework import serializers\n\nfrom movies.models import Movie\n\n\nclass MovieSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Movie\n        fields = '__all__'\n \n```\nAnd the viewset:\n```\n# Views\nfrom rest_framework import viewsets\nfrom rest_framework.permissions import IsAuthenticated\n\nfrom movies.models import Movie\nfrom movies.serializers import MovieSerializer\n\n\nclass MovieViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A viewset for viewing and editing movie instances.\n    \"\"\"\n    serializer_class = MovieSerializer\n    permission_classes = (IsAuthenticated,)\n    queryset = Movie.objects.all()\n\n```\nUrls for **viewset**:\n```\n# Urls\nfrom movies.views import MovieViewSet\nfrom rest_framework.routers import DefaultRouter\n\nrouter = DefaultRouter()\nrouter.register(r'movies', MovieViewSet)\nurlpatterns = router.urls\n\n```\nNow let's add these two apps(auths, movies) to `INSTALLED_APPS` in **settings.py**.\n\n```\nINSTALLED_APPS += [\n    'auths.apps.AuthsConfig',\n    'movies.apps.MoviesConfig',\n]\n```\nAnd update **urls.py** beside **settings.py**\n\n```\nfrom django.conf.urls import url, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^api/', include('auths.urls', namespace='auths')),\n    url(r'^api/', include('movies.urls', namespace='movies')),\n\n]\n```\n\n####Project Structure and Settings\nSo far the django application structure is like this:\n```\nproject\n|-- MovieDatabase\n|   |-- __init__.py\n|   |-- local_settings.py\n|   |-- settings.py\n|   |-- urls.py\n|   `-- wsgi.py\n|-- manage.py\n|--auths\n|   |-- __init__.py\n|   |-- admin.py\n|   |-- apps.py\n|   |-- models.py\n|   |-- serializers.py\n|   |-- urls.py\n|   |-- views.py\n|   |-- migrations\n|       |-- __init__.py\n|       |-- 0001__initial.py\n|--movies\n|   |-- __init__.py\n|   |-- admin.py\n|   |-- apps.py\n|   |-- models.py\n|   |-- serializers.py\n|   |-- urls.py\n|   |-- views.py\n|   |-- migrations\n|       |-- __init__.py\n|       |-- 0001__initial.py\n```\n\nWe will be putting our frontend apps outside of Django application, so let's update the settings:\n\n```\nSTATIC_URL = '/static/'\nSTATIC_ROOT = '../Frontend'\n```\nAlso update template settings:\n```\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            './templates'\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n```\nSo overall Project Structure is like this:\n\n```\nDjangoAngular\n  |- project\n  |- Frontend\n  |- Docker(containing docker configurations)\n```\n\nNow we will be building the Angular Applications inside Frontend in next tutorial.\n\nCheers!!\n\n**FYI: Source for tutorial: https://github.com/ruddra/django-angular**",
        "meta_description": "Django & Angular s, a popular combination for developing web apps. We will use Django as the backend, it will use RESTful APIs to communicate with Angularjs",
        "meta_title": "Django with AngularJs (Part One: Django)",
        "page": "0",
        "published_at": "1487966340000",
        "published_by": "1",
        "slug": "django-with-angular-js-part-one",
        "status": "draft",
        "title": "Django With AngularJs (Part 1: Build RESTful APIs using Django)",
        "updated_at": "1490111082766",
        "updated_by": "1",
        "uuid": "8d9116aa-7c09-4a40-b735-7464dd9f945b"
    },
    {
        "author_id": "1",
        "created_at": "1488039564745",
        "created_by": "1",
        "featured": "1",
        "html": "<p>In last <a href='/2017/02/25/django-with-angular-js-part-one/'>tutorial</a>, we have built a Django Application, which has RESTful API services. Now we are going to make Angular Application for consuming those APIs and make this website ALIVE!!</p>\n\n<p>Now first, let's add AngularJs in our template and along with necessary Js and CSS files for displaying template:</p>\n\n<pre><code>    &lt;!-- CSS --&gt;\n    &lt;link href=\"{% static 'css/tether.min.css' %}\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"{% static 'css/bootstrap.min.css' %}\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"{% static 'css/ngDialog.min.css' %}\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"{% static 'css/ngDialog-theme-default.min.css' %}\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"{% static 'css/override.css' %}\" rel=\"stylesheet\"&gt;\n\n    &lt;!-- JS Library --&gt;\n    &lt;script src=\"{% static 'js/jquery-3.1.1.min.js' %}\"&gt;&lt;/script&gt;\n    &lt;script src=\"{% static 'js/tether.min.js' %}\"&gt;&lt;/script&gt;\n    &lt;script src=\"{% static 'js/bootstrap.min.js' %}\"&gt;&lt;/script&gt;\n    &lt;script src=\"{% static 'js/angular.min.js' %}\"&gt;&lt;/script&gt;\n    &lt;script src=\"{% static 'js/angular-route.min.js' %}\"&gt;&lt;/script&gt;\n    &lt;script src=\"{% static 'js/angular-resource.min.js' %}\"&gt;&lt;/script&gt;\n    &lt;script src=\"{% static 'js/ngDialog.min.js' %}\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Here we see that we have added angular-<code>route.min.js</code> and <code>angular-resource.min.js</code>, because we will be using <a href='https://docs.angularjs.org/api/ngRoute/service/$route'>Angular Route</a> for Angular routing and <a href='https://docs.angularjs.org/api/ngResource/service/$resource'>Angular Resource</a> for communication with the django server.</p>\n\n<p>Now, let's create the angular app and name it <code>app.main.js</code>.</p>\n\n<pre><code>//angular app initialization and libaray injection\nvar movApp = angular.module(\"movApp\", [\"ngRoute\", 'ngResource']);\n\n\n//csrf token configuration as we will be using cookie based session\nmovApp.config(['$httpProvider', function ($httpProvider) {  \n    $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n}]);\n\n//all the urls for angular app, with the controller names and templates we will be using\nmovApp.config(function ($routeProvider, $locationProvider, $provide) {  \n    $routeProvider\n        .when('/', {\n            templateUrl: '/static/apps/auths/login/login.html',\n            controller: 'LoginController',\n            controllerAs: 'loginCtrl'\n        })\n        .when('/register', {\n            templateUrl: '/static/apps/auths/register/register.html',\n            controller: 'RegistrationController',\n            controllerAs: 'regCtrl'\n        })\n        .when('/movies', {\n            templateUrl: '/static/apps/movies/list/movies.html',\n            controller: 'MovlistController',\n            controllerAs: 'movLisCtrl'\n        })\n        .when('/movies/:id', {\n            templateUrl: '/static/apps/movies/details/movies.html',\n            controller: 'MovDetController',\n            controllerAs: 'movDetCtrl'\n        })\n        .when('/movies/create', {\n            templateUrl: '/static/apps/movies/create/movies.html',\n            controller: 'MovCreController',\n            controllerAs: 'movCreCtrl'\n        })\n    ;\n    $provide.decorator('$sniffer', function ($delegate) {\n        $delegate.history = false;\n        return $delegate;\n    });\n//urls for this app will be like &lt;host&gt;/#!/&lt;url&gt;\n    $locationProvider\n        .html5Mode(true)\n        .hashPrefix('!');\n});\n\n//resource configuration\nmovApp.config(['$resourceProvider', function($resourceProvider) {  \n  // Don't strip trailing slashes from calculated URLs\n  $resourceProvider.defaults.stripTrailingSlashes = false;\n}]);\n</code></pre>\n\n<p>This is the heart of the Angular application.</p>",
        "id": "28",
        "image": "",
        "language": "en_US",
        "markdown": "In last <a href='/2017/02/25/django-with-angular-js-part-one/'>tutorial</a>, we have built a Django Application, which has RESTful API services. Now we are going to make Angular Application for consuming those APIs and make this website ALIVE!!\n\nNow first, let's add AngularJs in our template and along with necessary Js and CSS files for displaying template:\n\n```\n    <!-- CSS -->\n    <link href=\"{% static 'css/tether.min.css' %}\" rel=\"stylesheet\">\n    <link href=\"{% static 'css/bootstrap.min.css' %}\" rel=\"stylesheet\">\n    <link href=\"{% static 'css/ngDialog.min.css' %}\" rel=\"stylesheet\">\n    <link href=\"{% static 'css/ngDialog-theme-default.min.css' %}\" rel=\"stylesheet\">\n    <link href=\"{% static 'css/override.css' %}\" rel=\"stylesheet\">\n\n    <!-- JS Library -->\n    <script src=\"{% static 'js/jquery-3.1.1.min.js' %}\"></script>\n    <script src=\"{% static 'js/tether.min.js' %}\"></script>\n    <script src=\"{% static 'js/bootstrap.min.js' %}\"></script>\n    <script src=\"{% static 'js/angular.min.js' %}\"></script>\n    <script src=\"{% static 'js/angular-route.min.js' %}\"></script>\n    <script src=\"{% static 'js/angular-resource.min.js' %}\"></script>\n    <script src=\"{% static 'js/ngDialog.min.js' %}\"></script>\n```\n\nHere we see that we have added angular-`route.min.js` and `angular-resource.min.js`, because we will be using <a href='https://docs.angularjs.org/api/ngRoute/service/$route'>Angular Route</a> for Angular routing and <a href='https://docs.angularjs.org/api/ngResource/service/$resource'>Angular Resource</a> for communication with the django server.\n\nNow, let's create the angular app and name it `app.main.js`.\n\n```\n//angular app initialization and libaray injection\nvar movApp = angular.module(\"movApp\", [\"ngRoute\", 'ngResource']);\n\n\n//csrf token configuration as we will be using cookie based session\nmovApp.config(['$httpProvider', function ($httpProvider) {\n    $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n}]);\n\n//all the urls for angular app, with the controller names and templates we will be using\nmovApp.config(function ($routeProvider, $locationProvider, $provide) {\n    $routeProvider\n        .when('/', {\n            templateUrl: '/static/apps/auths/login/login.html',\n            controller: 'LoginController',\n            controllerAs: 'loginCtrl'\n        })\n        .when('/register', {\n            templateUrl: '/static/apps/auths/register/register.html',\n            controller: 'RegistrationController',\n            controllerAs: 'regCtrl'\n        })\n        .when('/movies', {\n            templateUrl: '/static/apps/movies/list/movies.html',\n            controller: 'MovlistController',\n            controllerAs: 'movLisCtrl'\n        })\n        .when('/movies/:id', {\n            templateUrl: '/static/apps/movies/details/movies.html',\n            controller: 'MovDetController',\n            controllerAs: 'movDetCtrl'\n        })\n        .when('/movies/create', {\n            templateUrl: '/static/apps/movies/create/movies.html',\n            controller: 'MovCreController',\n            controllerAs: 'movCreCtrl'\n        })\n    ;\n    $provide.decorator('$sniffer', function ($delegate) {\n        $delegate.history = false;\n        return $delegate;\n    });\n//urls for this app will be like <host>/#!/<url>\n    $locationProvider\n        .html5Mode(true)\n        .hashPrefix('!');\n});\n\n//resource configuration\nmovApp.config(['$resourceProvider', function($resourceProvider) {\n  // Don't strip trailing slashes from calculated URLs\n  $resourceProvider.defaults.stripTrailingSlashes = false;\n}]);\n\n```\n\nThis is the heart of the Angular application.\n\n\n\n",
        "meta_description": "Second part of Django with Angular tutorial. In this tutorial, we will cover all about angular JS",
        "meta_title": "Django With AngularJs (Part 2: Build Frontend using AngularJs)",
        "page": "0",
        "published_at": "1488040475747",
        "published_by": "1",
        "slug": "django-with-angularjs-part-two",
        "status": "draft",
        "title": "Django With AngularJs (Part 2: Build Frontend using AngularJs)",
        "updated_at": "1490111090387",
        "updated_by": "1",
        "uuid": "ce449159-b7ce-4b94-b983-b97fbde56e9d"
    },
    {
        "author_id": "1",
        "created_at": "1490111111682",
        "created_by": "1",
        "featured": "0",
        "html": "<dl>  \n<dt>PhantomJS is</dt>  \n<dd> a headless WebKit scriptable with a JavaScript API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.</dd>  \n</dl>\n\n<p>And </p>\n\n<dl>  \n<dt>  \nSelenium is  \n</dt>  \n<dd>  \nA portable software-testing framework for web applications. Selenium provides a record/playback tool for authoring tests without the need to learn a test scripting language (Selenium IDE)  \n</dd>  \n</dl>\n\n<p>Using the combination of selenium and PhantomJs can give you a way to capture screenshots and use it in your choices.</p>\n\n<p>For that let's install PhantomJs in your computer. <br />\nFor Ubuntu/Debian platform, you can use like this:  </p>\n\n<pre><code>&gt;sudo apt-get install phantomjs\n        -------- OR --------\n&gt;sudo apt-get update\n&gt;sudo apt-get install build-essential chrpath libssl-dev libxft-dev\n&gt;sudo apt-get install libfreetype6 libfreetype6-dev\n&gt;sudo apt-get install libfontconfig1 libfontconfig1-dev\n&gt;cd ~\n&gt;wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\n&gt;sudo tar xvjf phantomjs-2.1.1-linux-x86_64.tar.bz2\n&gt;sudo mv phantomjs-2.1.1-linux-x86_64 /usr/local/share\n&gt;sudo ln -sf /usr/local/share/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin\n</code></pre>\n\n<p>Or use <code>npm</code>:  </p>\n\n<pre><code>&gt;npm install phantomjs2\n</code></pre>\n\n<p>Install selenium by using <code>pip install selenium</code></p>\n\n<p>Let's go to coding:  </p>\n\n<pre><code>from selenium import webdriver  # Import selenium web driver\n\ndriver = webdriver.PhantomJs()  # PhantomJs webdriver\n\ndriver.get('https://google.com')\n\ndriver.save_screenshot('google.png')  \n</code></pre>\n\n<p>Done! your image will be saved as <strong>google.png</strong>.</p>\n\n<p>Suppose you want to store the image in Django ImageFile, you can use the following code:</p>\n\n<pre><code>screenshot = driver.screenshot_as_base64()  # binary image\n\nmy_model = MyModel()  \nmy_model.image_field = ContentFile(screenshot, 'google.png')  \nMyModel.save()  \n</code></pre>\n\n<p>That's all for now. <br />\nCheers!!</p>",
        "id": "29",
        "image": "",
        "language": "en_US",
        "markdown": "<dl>\n<dt>PhantomJS is</dt>\n<dd> a headless WebKit scriptable with a JavaScript API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.</dd>\n</dl>\n\nAnd \n\n<dl>\n<dt>\nSelenium is\n</dt>\n<dd>\nA portable software-testing framework for web applications. Selenium provides a record/playback tool for authoring tests without the need to learn a test scripting language (Selenium IDE)\n</dd>\n</dl>\n\nUsing the combination of selenium and PhantomJs can give you a way to capture screenshots and use it in your choices.\n\nFor that let's install PhantomJs in your computer.\nFor Ubuntu/Debian platform, you can use like this:\n```\n>sudo apt-get install phantomjs\n        -------- OR --------\n>sudo apt-get update\n>sudo apt-get install build-essential chrpath libssl-dev libxft-dev\n>sudo apt-get install libfreetype6 libfreetype6-dev\n>sudo apt-get install libfontconfig1 libfontconfig1-dev\n>cd ~\n>wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\n>sudo tar xvjf phantomjs-2.1.1-linux-x86_64.tar.bz2\n>sudo mv phantomjs-2.1.1-linux-x86_64 /usr/local/share\n>sudo ln -sf /usr/local/share/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin\n```\nOr use `npm`:\n```\n>npm install phantomjs2\n```\n\nInstall selenium by using `pip install selenium`\n\nLet's go to coding:\n```\nfrom selenium import webdriver  # Import selenium web driver\n\ndriver = webdriver.PhantomJs()  # PhantomJs webdriver\n\ndriver.get('https://google.com')\n\ndriver.save_screenshot('google.png')\n```\n\nDone! your image will be saved as **google.png**.\n\nSuppose you want to store the image in Django ImageFile, you can use the following code:\n\n```\nscreenshot = driver.screenshot_as_base64()  # binary image\n\nmy_model = MyModel()\nmy_model.image_field = ContentFile(screenshot, 'google.png')\nMyModel.save()\n```\n\nThat's all for now.\nCheers!!",
        "meta_description": "Using the combination of selenium and PhantomJs can give you a way to capture screenshots and use it in your choices.",
        "meta_title": "Python: Selenium with PhantomJs to capture Screenshots",
        "page": "0",
        "published_at": "1490112464573",
        "published_by": "1",
        "slug": "python-selenium-with-phantomjs-to-capture-screenshots",
        "status": "published",
        "title": "Python: Selenium with PhantomJs to capture Screenshots",
        "updated_at": "1490112559203",
        "updated_by": "1",
        "uuid": "945be163-406a-4a1d-8ea3-780aa2934c6b"
    },
    {
        "author_id": "1",
        "created_at": "1495982159452",
        "created_by": "1",
        "featured": "0",
        "html": "<p>Who hasn't heard PIL? It's an image processing library made by python (Python Image Library). Pillow is an extension of it.</p>\n\n<p>So installing pillow is really easy:  </p>\n\n<blockquote>\n  <p>pip install pillow</p>\n</blockquote>\n\n<p>Now we are going to do some image processing cool stuff:</p>\n\n<p>First Load Image:</p>\n\n<pre><code>from PIL import Image, ImageOps\n\nimg = Image.open('image.png')  \n</code></pre>\n\n<h4 id=\"resizeimage\">Resize Image</h4>\n\n<p>Suppose We want to resize an image and maintain its aspect ratio. Here we need to get the aspect ratio after resizing. Here is a snippet for it:</p>\n\n<pre><code>   def get_resize_image_size(image, baseheight=None):\n        \"\"\"\n        Get resize image size\n        \"\"\"\n        size = 1200, 1200\n        print(\"Getting resize image size\")\n        if not baseheight:\n            baseheight = size[1]\n        hpercent = (baseheight / float(image.size[1]))\n        wsize = int((float(image.size[0]) * float(hpercent)))\n        return wsize, baseheight\n</code></pre>\n\n<p><strong>Or</strong> we may want to our desired image size.</p>\n\n<p>After we get the desired aspect ratio, now we resize it with the following code:</p>\n\n<pre><code>def resize_image(img, size=None):  \n    \"\"\"\n    Resize Image\n    img: Image file opened by PIL\n    size: if Size not given, it will be \n    calculated \n    \"\"\"\n    print(\"Resizing image\")\n    if not size:\n       size = get_resize_image_size(img)\n    img = img.resize(size, Image.ANTIALIAS)\n    return img\n</code></pre>\n\n<h4 id=\"cropimageinboxshape\">Crop Image in Box Shape</h4>\n\n<p>When we try to crop, we can either give it positions for cropping or we can calculate the points, which will be used in cropping. Suppose we have a random image, but we want to crop it in middle position and we want to crop in such way that, we will only take out 1200x1200 size out of the sample image, the following is the code:</p>\n\n<pre><code>    def crop_position(image):\n        \"\"\"\n        Get Crop Image Positions\n        \"\"\"\n        print(\"Getting Crop Image Positions\")\n        width, height = image.size\n        new_width, new_height = 1200, 1200\n        left = (width - new_width) / 2\n        top = (height - new_height) / 2\n        right = (width + new_width) / 2\n        bottom = (height + new_height) / 2\n        return left, top, right, bottom\n</code></pre>\n\n<p>Now we got the position, lets do cropping:</p>\n\n<pre><code>def crop_image(img, positions=None):  \n   \"\"\"\n   Crop Image in Box Shape\n   \"\"\"\n   if not positions:\n       positions = crop_position(img)\n   return img.crop(box=positions)\n</code></pre>\n\n<h4 id=\"resizeimageandcropincentertoconvertittoafixedsize\">Resize Image and Crop in Center to Convert it to a Fixed Size</h4>\n\n<p>Let's take an image in size and convert it to 1200x1200 image:</p>\n\n<pre><code>   def convert_image(pil_image):\n        \"\"\"\n        Resize Image and Crop in Center to Convert it to a Fixed Size\n        \"\"\"\n        try:\n            if pil_image.size == self.size:\n                print(\"Nothing to change, returning image\")\n                return image\n            # Resize to size given in settings\n            pil_image = resize_image(pil_image)\n            # Cropping to adjust size given in settings\n            pil_image = crop_image(pil_image)\n            pil_image.save(path)\n        except (KeyError, Exception) as exp:\n            print(str(exp))\n            raise exp\n</code></pre>\n\n<h4 id=\"pasteimageoverbackgroundimage\">Paste Image over Background Image</h4>\n\n<p>The following code will do the trick:</p>\n\n<pre><code>    def add_overlay_over_background(background_image, overlay_image, offset=(0, 0)):\n        \"\"\"\n        Add overlay image over background image\n        \"\"\"\n        background_image.paste(overlay_image, offset, mask=overlay_image)\n        return background_image\n</code></pre>\n\n<h4 id=\"drawtextoverimage\">Draw Text over Image</h4>\n\n<p>For that, we first we need fonts:</p>\n\n<pre><code>    path = 'path/to/font'\n    def get_font(size):\n        \"\"\"\n        Get Font Object\n        \"\"\"\n        return ImageFont.truetype(path, size=size)\n</code></pre>\n\n<p>Then we need to co-ordinates where the texts will be written:</p>\n\n<p>Here are two scenarios:</p>\n\n<ol>\n<li>You provide the exact positions.</li>\n<li>You can provide the height of the text position, we will calculate where the texts will be printed in the image. Here we are assuming that texts will be aligned in middle horizontally. It will be symmetric in perspective middle vertical line.</li>\n</ol>\n\n<pre><code>    def process_text_coordination(position, font=None, vertical_only=False, text=None):\n        \"\"\"\n        Process Co-Ordination of the position\n        \"\"\"\n        if vertical_only:\n            # Case Two\n            size = font.getsize(text)\n            width = (self.size[0] - size[0]) / 2\n            return width, position\n       # Case One\n       return position\n</code></pre>\n\n<p>Now we got everything, so let's do writing text on image:</p>\n\n<pre><code>    def write_text_on_image(image, font, text,position, color, size, vertical_only=False):\n        \"\"\"\n        Write Text over Image\n        \"\"\"\n        draw = ImageDraw.Draw(image)\n        font = get_font(size)\n        position = process_text_coordination(\n            position, font, vertical_only, text\n        )\n        draw.text(position, text, font=font, fill=color)\n        return image\n</code></pre>\n\n<p>BTW, here color can be hexa value of the color you want to use. For white, you need use: <code>#fffff</code></p>\n\n<h4 id=\"adjastbrightnessofimages\">Adjast brightness of Images</h4>\n\n<p>Let's lighten or darken image based on amount:  </p>\n\n<pre><code>    def darken_or_lighten_pixels(image, amount=0.5):\n        \"\"\"\n        Enhance Image\n        \"\"\"\n        converter = ImageEnhance.Brightness(image)\n        return converter.enhance(amount)\n</code></pre>\n\n<h4 id=\"adjastcolorofimages\">Adjast color of images</h4>\n\n<p>Let's adjust color of image based on amount</p>\n\n<pre><code>    def add_color_saturation(image, amount=0.5):\n        \"\"\"\n        Color saturation\n        \"\"\"\n        converter = ImageEnhance.Color(image)\n        return converter.enhance(amount)\n</code></pre>\n\n<h4 id=\"savepilimageindjangomodelsorserveasdjangofile\">Save PIL Image in Django Models or Serve as Django File</h4>\n\n<p>This code will convert PIL Images to Content file:</p>\n\n<pre><code>    def process_django_file(pil_image, name, format='png'):\n        \"\"\"\n        Process the PIL file to Django File\n        \"\"\"\n        file_object = BytesIO()\n        pil_image.save(file_object, format=format)\n        content = file_object.getvalue()\n        return ContentFile(content, name=name)\n</code></pre>\n\n<p>And saving image will be damn easy:</p>\n\n<pre><code>pil_image = Image.open('image.png')\n\ncontent_file = process_django_file(pil_image, name=\"some name\", format='png')\n\nmy_model.image = content_file  \nmy_model.save()  \n</code></pre>\n\n<p>And many more methods are given in the following Repo:</p>\n\n<p><a href=\"https://github.com/ruddra/play-with-pillow\">https://github.com/ruddra/play-with-pillow</a></p>\n\n<p>Hope it was helpful. Cheers!!!</p>",
        "id": "30",
        "image": "",
        "language": "en_US",
        "markdown": "Who hasn't heard PIL? It's an image processing library made by python (Python Image Library). Pillow is an extension of it.\n\nSo installing pillow is really easy:\n>pip install pillow\n\nNow we are going to do some image processing cool stuff:\n\nFirst Load Image:\n\n```\nfrom PIL import Image, ImageOps\n\nimg = Image.open('image.png')\n```\n\n#### Resize Image\nSuppose We want to resize an image and maintain its aspect ratio. Here we need to get the aspect ratio after resizing. Here is a snippet for it:\n\n```\n   def get_resize_image_size(image, baseheight=None):\n        \"\"\"\n        Get resize image size\n        \"\"\"\n        size = 1200, 1200\n        print(\"Getting resize image size\")\n        if not baseheight:\n            baseheight = size[1]\n        hpercent = (baseheight / float(image.size[1]))\n        wsize = int((float(image.size[0]) * float(hpercent)))\n        return wsize, baseheight\n\n```\n**Or** we may want to our desired image size.\n\nAfter we get the desired aspect ratio, now we resize it with the following code:\n\n```\ndef resize_image(img, size=None):\n    \"\"\"\n    Resize Image\n    img: Image file opened by PIL\n    size: if Size not given, it will be \n    calculated \n    \"\"\"\n    print(\"Resizing image\")\n    if not size:\n       size = get_resize_image_size(img)\n    img = img.resize(size, Image.ANTIALIAS)\n    return img\n```\n\n####Crop Image in Box Shape\nWhen we try to crop, we can either give it positions for cropping or we can calculate the points, which will be used in cropping. Suppose we have a random image, but we want to crop it in middle position and we want to crop in such way that, we will only take out 1200x1200 size out of the sample image, the following is the code:\n\n```\n    def crop_position(image):\n        \"\"\"\n        Get Crop Image Positions\n        \"\"\"\n        print(\"Getting Crop Image Positions\")\n        width, height = image.size\n        new_width, new_height = 1200, 1200\n        left = (width - new_width) / 2\n        top = (height - new_height) / 2\n        right = (width + new_width) / 2\n        bottom = (height + new_height) / 2\n        return left, top, right, bottom\n```\nNow we got the position, lets do cropping:\n\n```\ndef crop_image(img, positions=None):\n   \"\"\"\n   Crop Image in Box Shape\n   \"\"\"\n   if not positions:\n       positions = crop_position(img)\n   return img.crop(box=positions)\n```\n\n####Resize Image and Crop in Center to Convert it to a Fixed Size\nLet's take an image in size and convert it to 1200x1200 image:\n\n```\n   def convert_image(pil_image):\n        \"\"\"\n        Resize Image and Crop in Center to Convert it to a Fixed Size\n        \"\"\"\n        try:\n            if pil_image.size == self.size:\n                print(\"Nothing to change, returning image\")\n                return image\n            # Resize to size given in settings\n            pil_image = resize_image(pil_image)\n            # Cropping to adjust size given in settings\n            pil_image = crop_image(pil_image)\n            pil_image.save(path)\n        except (KeyError, Exception) as exp:\n            print(str(exp))\n            raise exp\n```\n\n####Paste Image over Background Image\nThe following code will do the trick:\n\n```\n    def add_overlay_over_background(background_image, overlay_image, offset=(0, 0)):\n        \"\"\"\n        Add overlay image over background image\n        \"\"\"\n        background_image.paste(overlay_image, offset, mask=overlay_image)\n        return background_image\n```\n\n####Draw Text over Image\nFor that, we first we need fonts:\n\n```\n    path = 'path/to/font'\n    def get_font(size):\n        \"\"\"\n        Get Font Object\n        \"\"\"\n        return ImageFont.truetype(path, size=size)\n```\nThen we need to co-ordinates where the texts will be written:\n\nHere are two scenarios:\n\n   1. You provide the exact positions.\n   2. You can provide the height of the text position, we will calculate where the texts will be printed in the image. Here we are assuming that texts will be aligned in middle horizontally. It will be symmetric in perspective middle vertical line.\n\n```\n\n    def process_text_coordination(position, font=None, vertical_only=False, text=None):\n        \"\"\"\n        Process Co-Ordination of the position\n        \"\"\"\n        if vertical_only:\n            # Case Two\n            size = font.getsize(text)\n            width = (self.size[0] - size[0]) / 2\n            return width, position\n       # Case One\n       return position\n\n```\nNow we got everything, so let's do writing text on image:\n\n```\n    def write_text_on_image(image, font, text,position, color, size, vertical_only=False):\n        \"\"\"\n        Write Text over Image\n        \"\"\"\n        draw = ImageDraw.Draw(image)\n        font = get_font(size)\n        position = process_text_coordination(\n            position, font, vertical_only, text\n        )\n        draw.text(position, text, font=font, fill=color)\n        return image\n\n```\nBTW, here color can be hexa value of the color you want to use. For white, you need use: `#fffff`\n\n####Adjast brightness of Images\nLet's lighten or darken image based on amount:\n```\n    def darken_or_lighten_pixels(image, amount=0.5):\n        \"\"\"\n        Enhance Image\n        \"\"\"\n        converter = ImageEnhance.Brightness(image)\n        return converter.enhance(amount)\n\n```\n\n####Adjast color of images\n\nLet's adjust color of image based on amount\n\n```\n    def add_color_saturation(image, amount=0.5):\n        \"\"\"\n        Color saturation\n        \"\"\"\n        converter = ImageEnhance.Color(image)\n        return converter.enhance(amount)\n\n```\n\n####Save PIL Image in Django Models or Serve as Django File\n\nThis code will convert PIL Images to Content file:\n\n```\n    def process_django_file(pil_image, name, format='png'):\n        \"\"\"\n        Process the PIL file to Django File\n        \"\"\"\n        file_object = BytesIO()\n        pil_image.save(file_object, format=format)\n        content = file_object.getvalue()\n        return ContentFile(content, name=name)\n```\n\nAnd saving image will be damn easy:\n\n```\npil_image = Image.open('image.png')\n\ncontent_file = process_django_file(pil_image, name=\"some name\", format='png')\n\nmy_model.image = content_file\nmy_model.save()\n```\n\nAnd many more methods are given in the following Repo:\n\nhttps://github.com/ruddra/play-with-pillow\n\nHope it was helpful. Cheers!!!",
        "meta_description": "This tutorial focuses on doing some useful stuff using Pillow(Python Image Library ext). For example Image Cropping, resizing, Pasting image over image etc.",
        "meta_title": "",
        "page": "0",
        "published_at": "1497686655963",
        "published_by": "1",
        "slug": "play-with-pillow",
        "status": "published",
        "title": "Play With Pillow",
        "updated_at": "1497686954703",
        "updated_by": "1",
        "uuid": "ab79dd68-cf62-4eac-bd03-5cd65cf48cfd"
    },
    {
        "author_id": "1",
        "created_at": "1500480767317",
        "created_by": "1",
        "featured": "0",
        "html": "<p>Chrome apps are really handy when you don't want to overhaul your system with apps for every little purpose. Starting those apps at startup can be used instead of manually starting them everytime you want to use them. Like starting the messenger at startup of the system. To do that.</p>\n\n<ol>\n<li>First, go to Ubuntu's search menu and search for <code>startup applications</code>. <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/ubuntu_chrome_app/1.png\">  </li>\n<li>Then open that application preference and add new startup application. <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/ubuntu_chrome_app/3.png\"> <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/ubuntu_chrome_app/4.jpg\">  </li>\n<li>Put any name you want in there. Also, in command section, write: </li>\n</ol>\n\n<pre><code>google-chrome --app-id=[app_id]  \n</code></pre>\n\n<p>Now you need to have <strong>app_id</strong> which you can easily find like this:</p>\n\n<p>For example, we want to add All in One Messenger, and when you look for it in chrome store, the URL will appear like this: <a href=\"https://chrome.google.com/webstore/detail/all-in-one-messenger/lainlkmlgipednloilifbppmhdocjbda?hl=en\">https://chrome.google.com/webstore/detail/all-in-one-messenger/lainlkmlgipednloilifbppmhdocjbda?hl=en</a></p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/ubuntu_chrome_app/2.gif\"></p>\n\n<p>So the <code>lainlkmlgipednloilifbppmhdocjbda</code> is the <strong>app_id</strong> here. </p>\n\n<p>Finally, if we want to add this app at startup, first we need to add it to our chrome, then like the previous steps mentioned above, add new startup application with the command: <code>google-chrome --app-id=lainlkmlgipednloilifbppmhdocjbda</code>. That should do the trick and you will see all in one messenger starting up whenever you initially login into the system.</p>",
        "id": "32",
        "image": "",
        "language": "en_US",
        "markdown": "Chrome apps are really handy when you don't want to overhaul your system with apps for every little purpose. Starting those apps at startup can be used instead of manually starting them everytime you want to use them. Like starting the messenger at startup of the system. To do that.\n\n1. First, go to Ubuntu's search menu and search for `startup applications`.\n<img src=\"https://github.com/ruddra/blog-images/raw/master/ubuntu_chrome_app/1.png\">\n2. Then open that application preference and add new startup application. \n<img src=\"https://github.com/ruddra/blog-images/raw/master/ubuntu_chrome_app/3.png\">\n<img src=\"https://github.com/ruddra/blog-images/raw/master/ubuntu_chrome_app/4.jpg\">\n3. Put any name you want in there. Also, in command section, write: \n\n```\ngoogle-chrome --app-id=[app_id]\n```\n\nNow you need to have **app_id** which you can easily find like this:\n\nFor example, we want to add All in One Messenger, and when you look for it in chrome store, the URL will appear like this: https://chrome.google.com/webstore/detail/all-in-one-messenger/lainlkmlgipednloilifbppmhdocjbda?hl=en\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/ubuntu_chrome_app/2.gif\">\n\nSo the `lainlkmlgipednloilifbppmhdocjbda` is the **app_id** here. \n\nFinally, if we want to add this app at startup, first we need to add it to our chrome, then like the previous steps mentioned above, add new startup application with the command: `google-chrome --app-id=lainlkmlgipednloilifbppmhdocjbda`. That should do the trick and you will see all in one messenger starting up whenever you initially login into the system.",
        "meta_description": "",
        "meta_title": "",
        "page": "0",
        "published_at": "1500483398570",
        "published_by": "1",
        "slug": "ubuntu-protip-launching-chrome-apps-at-startup",
        "status": "published",
        "title": "Ubuntu Hacks: Launching Chrome Apps at Startup",
        "updated_at": "1500483795220",
        "updated_by": "1",
        "uuid": "bd93e223-b8f8-4c6f-a93a-474690990d49"
    },
    {
        "author_id": "1",
        "created_at": "1501085597916",
        "created_by": "1",
        "featured": "0",
        "html": "<p><a href=\"https://code.visualstudio.com/\">VS Code</a> is an editor developed by Microsoft. I have been using this editor for Python development for a few months now. Previously I have been using Pycharm Community Edition for development, but I had to switch to an editor which was less resource consuming than Pycharm, hence I found VS Code. </p>\n\n<p>It was initially suggested to my by one of my colleagues. My first impression was, what is this? Is it really usable? Is it as bad as Atom?(I have a dreadful experience with Atom, although Atom is maybe as good as VS Code). But instead, I found that it is really useful, user-friendly and has lots of useful features. </p>\n\n<p>Let us check out, how we can use VS Code to develop Production grade Python applications.</p>\n\n<h3 id=\"configuringvscode\">Configuring VS Code:</h3>\n\n<h4 id=\"configuringpython\">Configuring Python</h4>\n\n<p>For using pythonic features, you need to install plugin <a href=\"https://github.com/DonJayamanne/pythonVSCode\">Python VS Code</a> <br />\nTo do that, go to Extensions Section of VS Code(marked blue in the image given below), in search section, type python; and install the red marked package called <strong>Python by Don Jayamanne</strong>.</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/vscode/1.gif\"></p>\n\n<p>Now go to <strong>preference>settings</strong> and open <strong>workspace settings</strong>: <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/vscode/2.png\"></p>\n\n<p>Here configure the virtual environment like this:  </p>\n\n<pre><code>{\n    \"python.pythonPath\": \"/path/to/virtualenv/bin/python\",\n}\n</code></pre>\n\n<p>That should be enough to let you use the virtual environment for development.</p>\n\n<p>After that, let us add some more features which are useful to develop python codes.</p>\n\n<h4 id=\"usingpep8andlint\">Using pep8 and lint:</h4>\n\n<p>To add them to vs code, add the following key values to above dictionary:  </p>\n\n<pre><code>\"python.linting.pep8Enabled\": true,\n\"python.linting.pylintPath\": \"/path/to/virtualenv/bin/pylint\",\n\"python.linting.pylintArgs\": [\n        \"--load-plugins\",\n        \"pylint_django\"\n    ],\n\"python.linting.pylintEnabled\": true\n</code></pre>\n\n<p>To use the above features, editor will prompt you to install <strong>pylint</strong> and <strong>autopep8</strong>, or you can install them directly in virtual environment:  </p>\n\n<pre><code>pip install autopep8  \npip install pylint  \n</code></pre>\n\n<h4 id=\"formatonsave\">Format On Save:</h4>\n\n<p>Add this like in dict: <code>\"editor.formatOnSave\": true</code> <br />\nIt will auto format code (language does not matter).</p>\n\n<h4 id=\"addrulerineditor\">Add ruler in editor:</h4>\n\n<p>Adding rulers in editor gives you a better idea of how many words will you put on a single line, in Pep8 Standard, it's 79. So let's add the following key and values in the settings dictionary:</p>\n\n<pre><code>\"editor.rulers\": [\n        80,\n        120\n    ],\n</code></pre>\n\n<h4 id=\"ignoringunnecessaryfiles\">Ignoring unnecessary files:</h4>\n\n<p>To ignore unnecessary files, add this following lines:</p>\n\n<pre><code>\"files.exclude\": {\n        \"**/.git\": true,\n        \"**/.svn\": true,\n        \"**/.hg\": true,\n        \"**/CVS\": true,\n        \"**/.DS_Store\": true,\n        \".vscode\": true,\n        \"**/*.pyc\": true\n    },\n</code></pre>\n\n<h4 id=\"disablepreview\">Disable preview:</h4>\n\n<p>When you open a file using an import file or try to go back to the daclaration of the code, vs code intends to open it in a preview window, which sometimes is annoying when you want to do it multiple steps/times. To disable it, add this:</p>\n\n<pre><code>\"workbench.editor.enablePreview\": false,\n</code></pre>\n\n<h3 id=\"debugging\">Debugging</h3>\n\n<p>It is really cool to have debugging feature built-in VS Code. Although as far as I tested, it works perfectly fine on Ubuntu, but not in OSX. So please check before you configure it.</p>\n\n<p>Anyways, the best way to configure it for <strong>Django</strong> is to add the following lines in <strong>launch.js</strong>:</p>\n\n<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Django\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"stopOnEntry\": true,\n            \"pythonPath\": \"${config:python.pythonPath}\",\n            \"program\": \"${workspaceRoot}/manage.py\",\n            \"cwd\": \"${workspaceRoot}\",\n            \"args\": [\n                \"runserver\",\n                \"--noreload\",\n                \"--nothreading\"\n            ],\n            \"env\": {},\n            \"envFile\": \"${workspaceRoot}/../virtualenv\",  //virtualenv pat\n            \"debugOptions\": [\n                \"WaitOnAbnormalExit\",\n                \"WaitOnNormalExit\",\n                \"RedirectOutput\",\n                \"DjangoDebugging\"\n            ]\n        }\n    ]\n}\n</code></pre>\n\n<p>Or go to Debug section(Marked green in the screenshot), click the section marked as yellow and then click add configuration. </p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/vscode/3.gif\"></p>\n\n<p>Then, click on Django settings to add new Django settings for debugging.</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/vscode/4.gif\"></p>\n\n<h3 id=\"usefulplugins\">Useful plugins:</h3>\n\n<ol>\n<li>Use <a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\">Sync</a> to synchronize your settings in between VS Code instances over multiple machines.  </li>\n<li>You can use <a href=\"https://marketplace.visualstudio.com/items?itemName=waderyan.gitblame\">Git Blame</a> to see Git blames.  </li>\n<li><a href=\"https://github.com/k--kato/vscode-intellij-idea-keybindings\">IntellijIdea Keybindings</a> allows you to use Idea's shortcut keys in VSCode.  </li>\n<li>Use <a href=\"https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons\">Icons</a> to beautify VS Code's icons.</li>\n</ol>\n\n<h3 id=\"sidenotes\">Side Notes:</h3>\n\n<p>It goes without saying that Pycharm is the best IDE for Python development. It supports refactoring, which makes life a lot easier, has advanced debugging, and configuring it really easy. Still, VS Code has its own charm. I prefer VS code's UI, its configurations(which is really dynamic and lots of options) and most importantly, I can do front end development better in VS Code, as Pycharm community edition does not support JS.</p>\n\n<p>Thanks for reading. Cheers!!</p>",
        "id": "33",
        "image": "",
        "language": "en_US",
        "markdown": "<a href=\"https://code.visualstudio.com/\">VS Code</a> is an editor developed by Microsoft. I have been using this editor for Python development for a few months now. Previously I have been using Pycharm Community Edition for development, but I had to switch to an editor which was less resource consuming than Pycharm, hence I found VS Code. \n\nIt was initially suggested to my by one of my colleagues. My first impression was, what is this? Is it really usable? Is it as bad as Atom?(I have a dreadful experience with Atom, although Atom is maybe as good as VS Code). But instead, I found that it is really useful, user-friendly and has lots of useful features. \n\nLet us check out, how we can use VS Code to develop Production grade Python applications.\n\n### Configuring VS Code:\n#### Configuring Python\nFor using pythonic features, you need to install plugin <a href=\"https://github.com/DonJayamanne/pythonVSCode\">Python VS Code</a>\nTo do that, go to Extensions Section of VS Code(marked blue in the image given below), in search section, type python; and install the red marked package called **Python by Don Jayamanne**.\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/vscode/1.gif\">\n\nNow go to **preference>settings** and open **workspace settings**:\n<img src=\"https://github.com/ruddra/blog-images/raw/master/vscode/2.png\">\n\nHere configure the virtual environment like this:\n```\n{\n    \"python.pythonPath\": \"/path/to/virtualenv/bin/python\",\n}\n```\nThat should be enough to let you use the virtual environment for development.\n\nAfter that, let us add some more features which are useful to develop python codes.\n\n#### Using pep8 and lint:\nTo add them to vs code, add the following key values to above dictionary:\n```\n\"python.linting.pep8Enabled\": true,\n\"python.linting.pylintPath\": \"/path/to/virtualenv/bin/pylint\",\n\"python.linting.pylintArgs\": [\n        \"--load-plugins\",\n        \"pylint_django\"\n    ],\n\"python.linting.pylintEnabled\": true\n```\nTo use the above features, editor will prompt you to install **pylint** and **autopep8**, or you can install them directly in virtual environment:\n```\npip install autopep8\npip install pylint\n```\n#### Format On Save:\nAdd this like in dict: `\"editor.formatOnSave\": true`\nIt will auto format code (language does not matter).\n\n#### Add ruler in editor:\nAdding rulers in editor gives you a better idea of how many words will you put on a single line, in Pep8 Standard, it's 79. So let's add the following key and values in the settings dictionary:\n\n```\n\"editor.rulers\": [\n        80,\n        120\n    ],\n```\n\n#### Ignoring unnecessary files:\nTo ignore unnecessary files, add this following lines:\n\n```\n\"files.exclude\": {\n        \"**/.git\": true,\n        \"**/.svn\": true,\n        \"**/.hg\": true,\n        \"**/CVS\": true,\n        \"**/.DS_Store\": true,\n        \".vscode\": true,\n        \"**/*.pyc\": true\n    },\n```\n#### Disable preview:\nWhen you open a file using an import file or try to go back to the daclaration of the code, vs code intends to open it in a preview window, which sometimes is annoying when you want to do it multiple steps/times. To disable it, add this:\n\n```\n\"workbench.editor.enablePreview\": false,\n```\n\n### Debugging\nIt is really cool to have debugging feature built-in VS Code. Although as far as I tested, it works perfectly fine on Ubuntu, but not in OSX. So please check before you configure it.\n\nAnyways, the best way to configure it for **Django** is to add the following lines in **launch.js**:\n\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Django\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"stopOnEntry\": true,\n            \"pythonPath\": \"${config:python.pythonPath}\",\n            \"program\": \"${workspaceRoot}/manage.py\",\n            \"cwd\": \"${workspaceRoot}\",\n            \"args\": [\n                \"runserver\",\n                \"--noreload\",\n                \"--nothreading\"\n            ],\n            \"env\": {},\n            \"envFile\": \"${workspaceRoot}/../virtualenv\",  //virtualenv pat\n            \"debugOptions\": [\n                \"WaitOnAbnormalExit\",\n                \"WaitOnNormalExit\",\n                \"RedirectOutput\",\n                \"DjangoDebugging\"\n            ]\n        }\n    ]\n}\n```\n\nOr go to Debug section(Marked green in the screenshot), click the section marked as yellow and then click add configuration. \n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/vscode/3.gif\">\n\nThen, click on Django settings to add new Django settings for debugging.\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/vscode/4.gif\">\n\n### Useful plugins:\n1. Use <a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\">Sync</a> to synchronize your settings in between VS Code instances over multiple machines.\n2. You can use <a href=\"https://marketplace.visualstudio.com/items?itemName=waderyan.gitblame\">Git Blame</a> to see Git blames.\n3. <a href=\"https://github.com/k--kato/vscode-intellij-idea-keybindings\">IntellijIdea Keybindings</a> allows you to use Idea's shortcut keys in VSCode.\n4. Use <a href=\"https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons\">Icons</a> to beautify VS Code's icons.\n\n### Side Notes:\nIt goes without saying that Pycharm is the best IDE for Python development. It supports refactoring, which makes life a lot easier, has advanced debugging, and configuring it really easy. Still, VS Code has its own charm. I prefer VS code's UI, its configurations(which is really dynamic and lots of options) and most importantly, I can do front end development better in VS Code, as Pycharm community edition does not support JS.\n\nThanks for reading. Cheers!!",
        "meta_description": "VS Code is an editor developed by Microsoft. I have switched this because it was less resource consuming than Pycharm.",
        "meta_title": "",
        "page": "0",
        "published_at": "1503083270352",
        "published_by": "1",
        "slug": "vs-code-for-python-development",
        "status": "published",
        "title": "Using VS Code for Python/Django Development",
        "updated_at": "1519483771761",
        "updated_by": "1",
        "uuid": "00bdb0af-f768-4424-9243-14bf72d0d76a"
    },
    {
        "author_id": "1",
        "created_at": "1519479131154",
        "created_by": "1",
        "featured": "0",
        "html": "<p>If you want to use Openshift for deploying Django, you can follow this post and simply do that. You don't need to learn Kubernetes. We will use docker file only. No other fancy stuff.</p>\n\n<p>Also, before starting, I am also hoping you are little bit familiar with <strong><a href=\"https://www.openshift.com/\">Openshift 3</a></strong> and <a href=\"https://docs.openshift.com/enterprise/3.0/cli_reference/get_started_cli.html\">oc tools</a>. Download oc clients from <a href=\"https://www.openshift.org/download.html\">here</a></p>\n\n<p>So let's get started:  </p>\n\n<h3 id=\"contentsofthispost\">Contents of this Post</h3>\n\n<p>In the blog, we are going to discuss about how we can deploy production grade django server, using mysql as <strong>Database</strong>. We are also going to use <strong>Gunicorn</strong> to deploy Django. We will be using <strong>Whitenoise</strong> to serve static files. We will use <strong>Persistent Volume</strong> provided by Openshift to store media contents. <br />\nA working example for deploying can be found here: <br />\n<a href=\"https://github.com/ruddra/openshift-django\">Deploying Django in Openshift Github Repo</a></p>\n\n<p>Now let's discuss part by part about the deployment.</p>\n\n<h3 id=\"deployingdatabase\">Deploying Database</h3>\n\n<p>First we need to deploy our mysql server to Openshift. We are going to do that using this command:  </p>\n\n<pre><code>oc new-app openshift/mysql-55-centos7  \n</code></pre>\n\n<p>It will start building the deployment for mysql. But it will throw error as there is no <code>MYSQL_USER</code>, <code>MYSQL_PASSWORD</code>, <code>MYSQL_DATABASE</code> defined in environment variable. So we can update the deployment by this commands:</p>\n\n<pre><code>&gt; oc env dc/mysql-55-centos7 MYSQL_USER=myroot\n\n&gt; oc env dc/mysql-55-centos7 MYSQL_PASSWORD=myroot123\n\n&gt; oc env dc/mysql-55-centos7 MYSQL_DATABASE=mydjango\n</code></pre>\n\n<p>You can check the deployment name using the command <code>oc status</code>.</p>\n\n<p>Now our MySQL server is ready inside Openshift and it should look like this:</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/openshift-django/mysql-deployment.png\"></p>\n\n<p>In our django application, we can use internal service name(FYI:It did not work for my local machine) <code>mysql-55-centos7</code> in <strong>DATABASE_SETTINGS</strong> or we can use internal IP which we can find in <code>application&gt;pods</code>. Checkout the list of pods:</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/openshift-django/pods.png\" alt=\"Pods\" /></p>\n\n<p>Find out the <strong>running Pod</strong> of Mysql and when you click on the name, you will go the details page. There you can find the IP like given image given below: <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/openshift-django/mysql-pod.png\" alt=\"Mysql Pod\" /></p>\n\n<p>You can update the settings of the Django application like this:</p>\n\n<pre><code>DATABASES = {  \n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'mydjango',\n        'USER': 'rootadmin',\n        'PASSWORD': 'rootadmin123',\n        'HOST': '172.17.0.4',  # The IP we get from Pods\n        'PORT': '3306',\n    }\n}\n</code></pre>\n\n<p>That's it, our mysql configuration is done.</p>\n\n<h3 id=\"makingdjangoproject\">Making Django Project</h3>\n\n<p>We need a django application for this deployment right!! So let's create one or if you have one, you can use it(lets hope its not too much complicated). If you have one, then please skip to next section.</p>\n\n<pre><code>django-admin.py startproject django-openshift  \n</code></pre>\n\n<p>Now inside the project, lets create an app:  </p>\n\n<pre><code>django-admin.py startapp pictures  \n</code></pre>\n\n<p>and add this app to django project:</p>\n\n<pre><code>#inside django settings(django-openshift/django-openshift/settings.py)\n\nINSTALLED_APPS += [  \n    'pictures'\n]\n</code></pre>\n\n<p>Lets update the <strong>models.py</strong> of pictures:  </p>\n\n<pre><code>from django.db import models\n\n\nclass Pictures(models.Model):  \n    image = models.ImageField()\n</code></pre>\n\n<p>and update the <strong>admin.py</strong>  </p>\n\n<pre><code>from django.contrib import admin  \nfrom .models import Picture\n\n\nadmin.site.register(Picture)  \n</code></pre>\n\n<p>and add a requirements.pip file in the root directory with the given entries:  </p>\n\n<pre><code>django&gt;=2.0  \nmysqlclient==1.3.12  \npillow==5.0.0  \ngunicorn==19.7.1  \nwhitenoise==3.3.1  \n</code></pre>\n\n<p>We have created a really simple django application where we can upload photos.</p>\n\n<h3 id=\"creatingdockerfilefordjango\">Creating Docker File for Django</h3>\n\n<p>Now lets create the <strong>Dockerfile</strong> for django:</p>\n\n<pre><code>FROM python:3.6  \nENV PYTHONUNBUFFERED 1\n\nRUN mkdir /src  \nWORKDIR /src  \nADD . /src\n\nRUN pip install -r requirements.pip\n\nRUN ./manage.py migrate  \nRUN ./manage.py collectstatic --no-input\n\nCMD gunicorn openshift_django.wsgi -b 0.0.0.0:3013\n\nEXPOSE 3013  \n</code></pre>\n\n<p>In this dockerfile, we are going to do the following stuffs: <br />\n1. We will be using <code>python:3.6</code> official image.</p>\n\n<ol>\n<li><p>We are going to install dependencies from <strong>requirements.pip</strong>.</p></li>\n<li><p>We are going to run database migrations.</p></li>\n<li><p>We are going to put <strong>gunicorn</strong> command which will make the application running in <strong>CMD</strong>.</p></li>\n<li><p>We are going to expose 3013 port.</p></li>\n</ol>\n\n<p>We are going to expose 3013 because it's one of the default port for openshift, we can also use 8080 as well.</p>\n\n<h3 id=\"servingstaticandmediacontents\">Serving Static and Media Contents</h3>\n\n<p>For serving static files, we are going to use <a href=\"http://whitenoise.evans.io/en/stable/\">whitenoise</a>. Its pretty simple, please go their documentation and check how they configure it in Django.</p>\n\n<p>For Media content, we are using django's own media serving mechanism. You can update the <strong>urls.py</strong> like this:</p>\n\n<pre><code>from django.conf.urls import url, re_path  \nfrom django.views.static import serve  \nfrom django.conf import settings\n\nurlpatterns += [  \n    re_path(r'^media/(?P&lt;path&gt;.*)$', serve, {\n            'document_root': settings.MEDIA_ROOT,\n            }),\n]\n</code></pre>\n\n<p>So media will be served from url path <code>/media/*</code></p>\n\n<p>Now we need to configure media settings in <strong>settings.py</strong>.</p>\n\n<pre><code>MEDIA_ROOT = '/data/' # Why data? explained in below  \nMEDIA_URL='/media/'  \n</code></pre>\n\n<p>So, it will store media contents in <code>/data</code> directory whenever its uploaded through django.</p>\n\n<h3 id=\"deployingdjangotoopenshift\">Deploying Django to Openshift</h3>\n\n<p>There are many ways to deploy to openshift. You can check (here)[https://docs.openshift.com/enterprise/3.0/dev_guide/deployments.html] for more details. But I can share my ways.</p>\n\n<ol>\n<li>Lets say, you have your application in git. So you can deploy it using  </li>\n</ol>\n\n<pre><code>oc new-app /path/to/src  \n</code></pre>\n\n<p>Then it will push the git configurations to openshift. Then openshift will pull code from git, build the image and start deploying it.</p>\n\n<p>Or you can use  </p>\n\n<pre><code>oc new-build /path/to/src  \n</code></pre>\n\n<p>It will push binary to openshift, and openshift will build image from that and start deployment.</p>\n\n<p>If you want to rebuild the app, you can use  </p>\n\n<pre><code>oc start-build ./path/to/src  \n</code></pre>\n\n<p>\nIt will start new build.</p>\n\n<p>Now, if you want to see status of your deployment from console, you can use <code>oc status</code> command. If you want to expose your app(it will create url and you can access it through that url), then use this command:  </p>\n\n<pre><code>oc expose svc/&lt;your-service-name&gt;  \n</code></pre>\n\n<h3 id=\"allowedhostsindjango\">Allowed Hosts in Django</h3>\n\n<p>Once deployed, if you try to access the application, you might face errors. And one of the most common error is related <code>ALLOWED_HOSTS</code>. There is several ways to avoid this, like you can put  </p>\n\n<pre><code>ALLOWED_HOSTS=['*']  \n</code></pre>\n\n<p>It will allow all hosts. Or</p>\n\n<pre><code>ALLOWED_HOSTS=[  \nos.environ.get('OPENSHIFT_DNS', '*')  \n]\n</code></pre>\n\n<p>And you can configure the deployment by adding environment variable like this:</p>\n\n<pre><code>oc env svc/&lt;your-service&gt; OPENSHIFT_DNS='YOUR OPENSHIFT DNS'  \n</code></pre>\n\n<h3 id=\"uploadingimagesinpersistentvolume\">Uploading Images in Persistent Volume</h3>\n\n<p>When you try to upload images, You will face permission errors from Django. To avoid that, you can attach storage(Persistent Volume) to your deployment. To do that, create a storage from console like this given image: <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/openshift-django/create-storage.png\" alt=\"image\" /></p>\n\n<p>Put any name you want, access mode can <strong>RWO</strong>, size 1 GB or anything you wish.</p>\n\n<p>After creating the storage, go to deployment configuration: <br />\n<img src=\"https://github.com/ruddra/blog-images/raw/master/openshift-django/go-to-deployment-config.png\" alt=\"Image\" />\nIn the bottom of the page, there is a button called <strong>add storage</strong>, click on that. <br />\nWhile adding the storage, mount path should be the path where you want to access your media files from in file storage. In our application, its <code>/data</code> like image below:</p>\n\n<p><img src=\"https://github.com/ruddra/blog-images/raw/master/openshift-django/oc-add-storage.png\" alt=\"Image\" /></p>\n\n<p>That's about it, you should be able to access your application in exposed url.</p>\n\n<p>For more advanced stuff, please checkout <a href=\"https://blog.openshift.com/migrating-django-applications-openshift-3/\">Openshift's Blog about how they deploy Django</a>.</p>\n\n<p>Thanks for reading. Cheers!!</p>",
        "id": "34",
        "image": "/content/images/2018/02/mysql-deployment.png",
        "language": "en_US",
        "markdown": "If you want to use Openshift for deploying Django, you can follow this post and simply do that. You don't need to learn Kubernetes. We will use docker file only. No other fancy stuff.\n\nAlso, before starting, I am also hoping you are little bit familiar with **[Openshift 3](https://www.openshift.com/)** and [oc tools](https://docs.openshift.com/enterprise/3.0/cli_reference/get_started_cli.html). Download oc clients from [here](https://www.openshift.org/download.html)\n\nSo let's get started:\n###Contents of this Post\nIn the blog, we are going to discuss about how we can deploy production grade django server, using mysql as **Database**. We are also going to use **Gunicorn** to deploy Django. We will be using **Whitenoise** to serve static files. We will use **Persistent Volume** provided by Openshift to store media contents.\nA working example for deploying can be found here:\n[Deploying Django in Openshift Github Repo](https://github.com/ruddra/openshift-django)\n\nNow let's discuss part by part about the deployment.\n\n\n### Deploying Database\n\nFirst we need to deploy our mysql server to Openshift. We are going to do that using this command:\n```\noc new-app openshift/mysql-55-centos7\n```\nIt will start building the deployment for mysql. But it will throw error as there is no `MYSQL_USER`, `MYSQL_PASSWORD`, `MYSQL_DATABASE` defined in environment variable. So we can update the deployment by this commands:\n\n```\n> oc env dc/mysql-55-centos7 MYSQL_USER=myroot\n\n> oc env dc/mysql-55-centos7 MYSQL_PASSWORD=myroot123\n\n> oc env dc/mysql-55-centos7 MYSQL_DATABASE=mydjango\n```\nYou can check the deployment name using the command `oc status`.\n\nNow our MySQL server is ready inside Openshift and it should look like this:\n\n<img src=\"https://github.com/ruddra/blog-images/raw/master/openshift-django/mysql-deployment.png\">\n\nIn our django application, we can use internal service name(FYI:It did not work for my local machine) `mysql-55-centos7` in **DATABASE_SETTINGS** or we can use internal IP which we can find in `application>pods`. Checkout the list of pods:\n\n![Pods](https://github.com/ruddra/blog-images/raw/master/openshift-django/pods.png)\n\nFind out the **running Pod** of Mysql and when you click on the name, you will go the details page. There you can find the IP like given image given below:\n![Mysql Pod](https://github.com/ruddra/blog-images/raw/master/openshift-django/mysql-pod.png)\n\nYou can update the settings of the Django application like this:\n\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'mydjango',\n        'USER': 'rootadmin',\n        'PASSWORD': 'rootadmin123',\n        'HOST': '172.17.0.4',  # The IP we get from Pods\n        'PORT': '3306',\n    }\n}\n```\nThat's it, our mysql configuration is done.\n\n\n### Making Django Project\n\nWe need a django application for this deployment right!! So let's create one or if you have one, you can use it(lets hope its not too much complicated). If you have one, then please skip to next section.\n\n```\ndjango-admin.py startproject django-openshift\n```\n\nNow inside the project, lets create an app:\n```\ndjango-admin.py startapp pictures\n```\n\nand add this app to django project:\n\n```\n#inside django settings(django-openshift/django-openshift/settings.py)\n\nINSTALLED_APPS += [\n    'pictures'\n]\n```\n\nLets update the **models.py** of pictures:\n```\nfrom django.db import models\n\n\nclass Pictures(models.Model):\n    image = models.ImageField()\n```\n\nand update the **admin.py**\n```\nfrom django.contrib import admin\nfrom .models import Picture\n\n\nadmin.site.register(Picture)\n```\n\nand add a requirements.pip file in the root directory with the given entries:\n```\ndjango>=2.0\nmysqlclient==1.3.12\npillow==5.0.0\ngunicorn==19.7.1\nwhitenoise==3.3.1\n```\nWe have created a really simple django application where we can upload photos.\n\n###Creating Docker File for Django\nNow lets create the **Dockerfile** for django:\n\n```\nFROM python:3.6\nENV PYTHONUNBUFFERED 1\n\nRUN mkdir /src\nWORKDIR /src\nADD . /src\n\nRUN pip install -r requirements.pip\n\nRUN ./manage.py migrate\nRUN ./manage.py collectstatic --no-input\n\nCMD gunicorn openshift_django.wsgi -b 0.0.0.0:3013\n\nEXPOSE 3013\n```\nIn this dockerfile, we are going to do the following stuffs:\n1. We will be using `python:3.6` official image.\n\n2. We are going to install dependencies from **requirements.pip**.\n\n3. We are going to run database migrations.\n\n4. We are going to put **gunicorn** command which will make the application running in **CMD**.\n\n5. We are going to expose 3013 port.\n\nWe are going to expose 3013 because it's one of the default port for openshift, we can also use 8080 as well.\n\n### Serving Static and Media Contents\nFor serving static files, we are going to use [whitenoise](http://whitenoise.evans.io/en/stable/). Its pretty simple, please go their documentation and check how they configure it in Django.\n\nFor Media content, we are using django's own media serving mechanism. You can update the **urls.py** like this:\n\n```\nfrom django.conf.urls import url, re_path\nfrom django.views.static import serve\nfrom django.conf import settings\n\nurlpatterns += [\n    re_path(r'^media/(?P<path>.*)$', serve, {\n            'document_root': settings.MEDIA_ROOT,\n            }),\n]\n\n```\n\nSo media will be served from url path `/media/*`\n\nNow we need to configure media settings in **settings.py**.\n\n```\nMEDIA_ROOT = '/data/' # Why data? explained in below\nMEDIA_URL='/media/'\n```\nSo, it will store media contents in `/data` directory whenever its uploaded through django.\n\n### Deploying Django to Openshift\n\nThere are many ways to deploy to openshift. You can check (here)[https://docs.openshift.com/enterprise/3.0/dev_guide/deployments.html] for more details. But I can share my ways.\n\n1. Lets say, you have your application in git. So you can deploy it using \n```\noc new-app /path/to/src\n```\nThen it will push the git configurations to openshift. Then openshift will pull code from git, build the image and start deploying it.\n\nOr you can use \n```\noc new-build /path/to/src\n```\n\nIt will push binary to openshift, and openshift will build image from that and start deployment.\n\nIf you want to rebuild the app, you can use\n```\noc start-build ./path/to/src\n``` \nIt will start new build.\n\nNow, if you want to see status of your deployment from console, you can use `oc status` command. If you want to expose your app(it will create url and you can access it through that url), then use this command:\n```\noc expose svc/<your-service-name>\n```\n\n### Allowed Hosts in Django\nOnce deployed, if you try to access the application, you might face errors. And one of the most common error is related `ALLOWED_HOSTS`. There is several ways to avoid this, like you can put \n```\nALLOWED_HOSTS=['*']\n```\nIt will allow all hosts. Or\n\n```\nALLOWED_HOSTS=[\nos.environ.get('OPENSHIFT_DNS', '*')\n]\n```\nAnd you can configure the deployment by adding environment variable like this:\n\n```\noc env svc/<your-service> OPENSHIFT_DNS='YOUR OPENSHIFT DNS'\n```\n\n### Uploading Images in Persistent Volume\n\nWhen you try to upload images, You will face permission errors from Django. To avoid that, you can attach storage(Persistent Volume) to your deployment. To do that, create a storage from console like this given image:\n![image](https://github.com/ruddra/blog-images/raw/master/openshift-django/create-storage.png)\n\nPut any name you want, access mode can **RWO**, size 1 GB or anything you wish.\n\nAfter creating the storage, go to deployment configuration:\n![Image](https://github.com/ruddra/blog-images/raw/master/openshift-django/go-to-deployment-config.png)\nIn the bottom of the page, there is a button called **add storage**, click on that.\nWhile adding the storage, mount path should be the path where you want to access your media files from in file storage. In our application, its `/data` like image below:\n\n![Image](https://github.com/ruddra/blog-images/raw/master/openshift-django/oc-add-storage.png)\n\nThat's about it, you should be able to access your application in exposed url.\n\nFor more advanced stuff, please checkout [Openshift's Blog about how they deploy Django](https://blog.openshift.com/migrating-django-applications-openshift-3/).\n\nThanks for reading. Cheers!!\n\n\n\n\n",
        "meta_description": "If you want to use Openshift for deploying Django, you can follow this post and simply do that. You don't need to learn Kubernetes. We use docker file only.",
        "meta_title": "Deploy Django to Openshift Powered by MySQL and Gunicorn",
        "page": "0",
        "published_at": "1519483680000",
        "published_by": "1",
        "slug": "deploy-django-to-openshift-3",
        "status": "published",
        "title": "Deploy Django to Openshift 3 Powered by MySQL and Gunicorn",
        "updated_at": "1519484983539",
        "updated_by": "1",
        "uuid": "2317a5d5-26f4-442a-a390-16c045e08e8d"
    }
]
